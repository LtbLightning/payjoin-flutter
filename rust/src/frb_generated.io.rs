// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0.

// Section: imports

use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
use flutter_rust_bridge::{Handler, IntoIntoDart};

use super::*;
use crate::*;

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate_io!();

// Section: dart2rust

impl CstDecode<flutter_rust_bridge::for_generated::anyhow::Error>
    for *mut wire_cst_list_prim_u_8_strict
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> flutter_rust_bridge::for_generated::anyhow::Error {
        unimplemented!()
    }
}
impl CstDecode<flutter_rust_bridge::DartOpaque> for *const std::ffi::c_void {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> flutter_rust_bridge::DartOpaque {
        unsafe { flutter_rust_bridge::for_generated::cst_decode_dart_opaque(self as _) }
    }
}
impl CstDecode<RustOpaqueNom<bitcoin_ffi::Script>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<bitcoin_ffi::Script> {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl CstDecode<RustOpaqueNom<payjoin_ffi::OhttpKeys>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<payjoin_ffi::OhttpKeys> {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl CstDecode<RustOpaqueNom<payjoin_ffi::Url>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<payjoin_ffi::Url> {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl CstDecode<RustOpaqueNom<payjoin_ffi::receive::InputPair>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<payjoin_ffi::receive::InputPair> {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl CstDecode<RustOpaqueNom<payjoin_ffi::receive::MaybeInputsOwned>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<payjoin_ffi::receive::MaybeInputsOwned> {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl CstDecode<RustOpaqueNom<payjoin_ffi::receive::MaybeInputsSeen>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<payjoin_ffi::receive::MaybeInputsSeen> {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl CstDecode<RustOpaqueNom<payjoin_ffi::receive::OutputsUnknown>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<payjoin_ffi::receive::OutputsUnknown> {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl CstDecode<RustOpaqueNom<payjoin_ffi::receive::PayjoinProposal>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<payjoin_ffi::receive::PayjoinProposal> {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl CstDecode<RustOpaqueNom<payjoin_ffi::receive::ProvisionalProposal>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<payjoin_ffi::receive::ProvisionalProposal> {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl CstDecode<RustOpaqueNom<payjoin_ffi::receive::Receiver>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<payjoin_ffi::receive::Receiver> {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl CstDecode<RustOpaqueNom<payjoin_ffi::receive::UncheckedProposal>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<payjoin_ffi::receive::UncheckedProposal> {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl CstDecode<RustOpaqueNom<payjoin_ffi::receive::WantsInputs>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<payjoin_ffi::receive::WantsInputs> {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl CstDecode<RustOpaqueNom<payjoin_ffi::receive::WantsOutputs>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<payjoin_ffi::receive::WantsOutputs> {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl CstDecode<RustOpaqueNom<payjoin_ffi::send::Sender>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<payjoin_ffi::send::Sender> {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl CstDecode<RustOpaqueNom<payjoin_ffi::send::SenderBuilder>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<payjoin_ffi::send::SenderBuilder> {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl CstDecode<RustOpaqueNom<payjoin_ffi::send::V1Context>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<payjoin_ffi::send::V1Context> {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl CstDecode<RustOpaqueNom<payjoin_ffi::send::V2GetContext>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<payjoin_ffi::send::V2GetContext> {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl CstDecode<RustOpaqueNom<payjoin_ffi::send::V2PostContext>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<payjoin_ffi::send::V2PostContext> {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl CstDecode<RustOpaqueNom<payjoin_ffi::uri::PjUri>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<payjoin_ffi::uri::PjUri> {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl CstDecode<RustOpaqueNom<payjoin_ffi::uri::PjUriBuilder>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<payjoin_ffi::uri::PjUriBuilder> {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl CstDecode<RustOpaqueNom<payjoin_ffi::uri::Uri>> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> RustOpaqueNom<payjoin_ffi::uri::Uri> {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl CstDecode<RustOpaqueNom<std::sync::Mutex<core::option::Option<payjoin_ffi::ClientResponse>>>>
    for usize
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<std::sync::Mutex<core::option::Option<payjoin_ffi::ClientResponse>>> {
        unsafe { decode_rust_opaque_nom(self as _) }
    }
}
impl CstDecode<String> for *mut wire_cst_list_prim_u_8_strict {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> String {
        let vec: Vec<u8> = self.cst_decode();
        String::from_utf8(vec).unwrap()
    }
}
impl CstDecode<crate::utils::types::ClientResponse> for *mut wire_cst_client_response {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::utils::types::ClientResponse {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::utils::types::ClientResponse>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::receive::FfiMaybeInputsOwned> for *mut wire_cst_ffi_maybe_inputs_owned {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::receive::FfiMaybeInputsOwned {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::receive::FfiMaybeInputsOwned>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::receive::FfiMaybeInputsSeen> for *mut wire_cst_ffi_maybe_inputs_seen {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::receive::FfiMaybeInputsSeen {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::receive::FfiMaybeInputsSeen>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::uri::FfiOhttpKeys> for *mut wire_cst_ffi_ohttp_keys {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::uri::FfiOhttpKeys {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::uri::FfiOhttpKeys>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::receive::FfiOutputsUnknown> for *mut wire_cst_ffi_outputs_unknown {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::receive::FfiOutputsUnknown {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::receive::FfiOutputsUnknown>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::receive::FfiPayjoinProposal> for *mut wire_cst_ffi_payjoin_proposal {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::receive::FfiPayjoinProposal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::receive::FfiPayjoinProposal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::uri::FfiPjUri> for *mut wire_cst_ffi_pj_uri {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::uri::FfiPjUri {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::uri::FfiPjUri>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::uri::FfiPjUriBuilder> for *mut wire_cst_ffi_pj_uri_builder {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::uri::FfiPjUriBuilder {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::uri::FfiPjUriBuilder>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::receive::FfiProvisionalProposal>
    for *mut wire_cst_ffi_provisional_proposal
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::receive::FfiProvisionalProposal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::receive::FfiProvisionalProposal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::receive::FfiReceiver> for *mut wire_cst_ffi_receiver {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::receive::FfiReceiver {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::receive::FfiReceiver>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::bitcoin_ffi::FfiScript> for *mut wire_cst_ffi_script {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::bitcoin_ffi::FfiScript {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::bitcoin_ffi::FfiScript>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::send::FfiSender> for *mut wire_cst_ffi_sender {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::send::FfiSender {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::send::FfiSender>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::send::FfiSenderBuilder> for *mut wire_cst_ffi_sender_builder {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::send::FfiSenderBuilder {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::send::FfiSenderBuilder>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::receive::FfiUncheckedProposal> for *mut wire_cst_ffi_unchecked_proposal {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::receive::FfiUncheckedProposal {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::receive::FfiUncheckedProposal>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::uri::FfiUri> for *mut wire_cst_ffi_uri {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::uri::FfiUri {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::uri::FfiUri>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::uri::FfiUrl> for *mut wire_cst_ffi_url {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::uri::FfiUrl {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::uri::FfiUrl>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::send::FfiV1Context> for *mut wire_cst_ffi_v_1_context {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::send::FfiV1Context {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::send::FfiV1Context>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::send::FfiV2GetContext> for *mut wire_cst_ffi_v_2_get_context {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::send::FfiV2GetContext {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::send::FfiV2GetContext>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::send::FfiV2PostContext> for *mut wire_cst_ffi_v_2_post_context {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::send::FfiV2PostContext {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::send::FfiV2PostContext>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::receive::FfiWantsInputs> for *mut wire_cst_ffi_wants_inputs {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::receive::FfiWantsInputs {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::receive::FfiWantsInputs>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::receive::FfiWantsOutputs> for *mut wire_cst_ffi_wants_outputs {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::receive::FfiWantsOutputs {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::receive::FfiWantsOutputs>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::utils::types::PsbtInput> for *mut wire_cst_psbt_input {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::utils::types::PsbtInput {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::utils::types::PsbtInput>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::utils::types::TxIn> for *mut wire_cst_tx_in {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::utils::types::TxIn {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::utils::types::TxIn>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::utils::types::TxOut> for *mut wire_cst_tx_out {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::utils::types::TxOut {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::utils::types::TxOut>::cst_decode(*wrap).into()
    }
}
impl CstDecode<u64> for *mut u64 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> u64 {
        unsafe { *flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
    }
}
impl CstDecode<u8> for *mut u8 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> u8 {
        unsafe { *flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
    }
}
impl CstDecode<crate::utils::types::ClientResponse> for wire_cst_client_response {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::utils::types::ClientResponse {
        crate::utils::types::ClientResponse(self.field0.cst_decode())
    }
}
impl CstDecode<crate::api::receive::FfiInputPair> for wire_cst_ffi_input_pair {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::receive::FfiInputPair {
        crate::api::receive::FfiInputPair(self.field0.cst_decode())
    }
}
impl CstDecode<crate::api::receive::FfiMaybeInputsOwned> for wire_cst_ffi_maybe_inputs_owned {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::receive::FfiMaybeInputsOwned {
        crate::api::receive::FfiMaybeInputsOwned(self.field0.cst_decode())
    }
}
impl CstDecode<crate::api::receive::FfiMaybeInputsSeen> for wire_cst_ffi_maybe_inputs_seen {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::receive::FfiMaybeInputsSeen {
        crate::api::receive::FfiMaybeInputsSeen(self.field0.cst_decode())
    }
}
impl CstDecode<crate::api::uri::FfiOhttpKeys> for wire_cst_ffi_ohttp_keys {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::uri::FfiOhttpKeys {
        crate::api::uri::FfiOhttpKeys(self.field0.cst_decode())
    }
}
impl CstDecode<crate::api::receive::FfiOutputsUnknown> for wire_cst_ffi_outputs_unknown {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::receive::FfiOutputsUnknown {
        crate::api::receive::FfiOutputsUnknown(self.field0.cst_decode())
    }
}
impl CstDecode<crate::api::receive::FfiPayjoinProposal> for wire_cst_ffi_payjoin_proposal {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::receive::FfiPayjoinProposal {
        crate::api::receive::FfiPayjoinProposal(self.field0.cst_decode())
    }
}
impl CstDecode<crate::api::uri::FfiPjUri> for wire_cst_ffi_pj_uri {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::uri::FfiPjUri {
        crate::api::uri::FfiPjUri(self.field0.cst_decode())
    }
}
impl CstDecode<crate::api::uri::FfiPjUriBuilder> for wire_cst_ffi_pj_uri_builder {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::uri::FfiPjUriBuilder {
        crate::api::uri::FfiPjUriBuilder { internal: self.internal.cst_decode() }
    }
}
impl CstDecode<crate::api::receive::FfiProvisionalProposal> for wire_cst_ffi_provisional_proposal {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::receive::FfiProvisionalProposal {
        crate::api::receive::FfiProvisionalProposal(self.field0.cst_decode())
    }
}
impl CstDecode<crate::api::receive::FfiReceiver> for wire_cst_ffi_receiver {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::receive::FfiReceiver {
        crate::api::receive::FfiReceiver(self.field0.cst_decode())
    }
}
impl CstDecode<crate::api::bitcoin_ffi::FfiScript> for wire_cst_ffi_script {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::bitcoin_ffi::FfiScript {
        crate::api::bitcoin_ffi::FfiScript(self.field0.cst_decode())
    }
}
impl CstDecode<crate::api::send::FfiSender> for wire_cst_ffi_sender {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::send::FfiSender {
        crate::api::send::FfiSender(self.field0.cst_decode())
    }
}
impl CstDecode<crate::api::send::FfiSenderBuilder> for wire_cst_ffi_sender_builder {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::send::FfiSenderBuilder {
        crate::api::send::FfiSenderBuilder(self.field0.cst_decode())
    }
}
impl CstDecode<crate::api::receive::FfiUncheckedProposal> for wire_cst_ffi_unchecked_proposal {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::receive::FfiUncheckedProposal {
        crate::api::receive::FfiUncheckedProposal(self.field0.cst_decode())
    }
}
impl CstDecode<crate::api::uri::FfiUri> for wire_cst_ffi_uri {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::uri::FfiUri {
        crate::api::uri::FfiUri(self.field0.cst_decode())
    }
}
impl CstDecode<crate::api::uri::FfiUrl> for wire_cst_ffi_url {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::uri::FfiUrl {
        crate::api::uri::FfiUrl(self.field0.cst_decode())
    }
}
impl CstDecode<crate::api::send::FfiV1Context> for wire_cst_ffi_v_1_context {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::send::FfiV1Context {
        crate::api::send::FfiV1Context(self.field0.cst_decode())
    }
}
impl CstDecode<crate::api::send::FfiV2GetContext> for wire_cst_ffi_v_2_get_context {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::send::FfiV2GetContext {
        crate::api::send::FfiV2GetContext(self.field0.cst_decode())
    }
}
impl CstDecode<crate::api::send::FfiV2PostContext> for wire_cst_ffi_v_2_post_context {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::send::FfiV2PostContext {
        crate::api::send::FfiV2PostContext(self.field0.cst_decode())
    }
}
impl CstDecode<crate::api::receive::FfiWantsInputs> for wire_cst_ffi_wants_inputs {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::receive::FfiWantsInputs {
        crate::api::receive::FfiWantsInputs(self.field0.cst_decode())
    }
}
impl CstDecode<crate::api::receive::FfiWantsOutputs> for wire_cst_ffi_wants_outputs {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::receive::FfiWantsOutputs {
        crate::api::receive::FfiWantsOutputs(self.field0.cst_decode())
    }
}
impl CstDecode<Vec<crate::api::receive::FfiInputPair>> for *mut wire_cst_list_ffi_input_pair {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<crate::api::receive::FfiInputPair> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<Vec<u8>>> for *mut wire_cst_list_list_prim_u_8_strict {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<Vec<u8>> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::utils::types::OutPoint>> for *mut wire_cst_list_out_point {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<crate::utils::types::OutPoint> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<u8>> for *mut wire_cst_list_prim_u_8_loose {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<u8> {
        unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}
impl CstDecode<Vec<u8>> for *mut wire_cst_list_prim_u_8_strict {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<u8> {
        unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}
impl CstDecode<Vec<crate::utils::types::TxOut>> for *mut wire_cst_list_tx_out {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<crate::utils::types::TxOut> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<crate::utils::types::OutPoint> for wire_cst_out_point {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::utils::types::OutPoint {
        crate::utils::types::OutPoint { txid: self.txid.cst_decode(), vout: self.vout.cst_decode() }
    }
}
impl CstDecode<crate::utils::error::PayjoinError> for wire_cst_payjoin_error {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::utils::error::PayjoinError {
        match self.tag {
            0 => {
                let ans = unsafe { self.kind.InvalidAddress };
                crate::utils::error::PayjoinError::InvalidAddress {
                    message: ans.message.cst_decode(),
                }
            }
            1 => {
                let ans = unsafe { self.kind.InvalidScript };
                crate::utils::error::PayjoinError::InvalidScript {
                    message: ans.message.cst_decode(),
                }
            }
            2 => {
                let ans = unsafe { self.kind.NetworkValidation };
                crate::utils::error::PayjoinError::NetworkValidation {
                    message: ans.message.cst_decode(),
                }
            }
            3 => {
                let ans = unsafe { self.kind.PsbtParseError };
                crate::utils::error::PayjoinError::PsbtParseError {
                    message: ans.message.cst_decode(),
                }
            }
            4 => {
                let ans = unsafe { self.kind.ResponseError };
                crate::utils::error::PayjoinError::ResponseError {
                    message: ans.message.cst_decode(),
                }
            }
            5 => {
                let ans = unsafe { self.kind.RequestError };
                crate::utils::error::PayjoinError::RequestError {
                    message: ans.message.cst_decode(),
                }
            }
            6 => {
                let ans = unsafe { self.kind.TransactionError };
                crate::utils::error::PayjoinError::TransactionError {
                    message: ans.message.cst_decode(),
                }
            }
            7 => {
                let ans = unsafe { self.kind.ServerError };
                crate::utils::error::PayjoinError::ServerError { message: ans.message.cst_decode() }
            }
            8 => {
                let ans = unsafe { self.kind.SelectionError };
                crate::utils::error::PayjoinError::SelectionError {
                    message: ans.message.cst_decode(),
                }
            }
            9 => {
                let ans = unsafe { self.kind.CreateRequestError };
                crate::utils::error::PayjoinError::CreateRequestError {
                    message: ans.message.cst_decode(),
                }
            }
            10 => {
                let ans = unsafe { self.kind.PjParseError };
                crate::utils::error::PayjoinError::PjParseError {
                    message: ans.message.cst_decode(),
                }
            }
            11 => {
                let ans = unsafe { self.kind.PjNotSupported };
                crate::utils::error::PayjoinError::PjNotSupported {
                    message: ans.message.cst_decode(),
                }
            }
            12 => {
                let ans = unsafe { self.kind.ValidationError };
                crate::utils::error::PayjoinError::ValidationError {
                    message: ans.message.cst_decode(),
                }
            }
            13 => {
                let ans = unsafe { self.kind.V2Error };
                crate::utils::error::PayjoinError::V2Error { message: ans.message.cst_decode() }
            }
            14 => {
                let ans = unsafe { self.kind.UnexpectedError };
                crate::utils::error::PayjoinError::UnexpectedError {
                    message: ans.message.cst_decode(),
                }
            }
            15 => {
                let ans = unsafe { self.kind.OhttpError };
                crate::utils::error::PayjoinError::OhttpError { message: ans.message.cst_decode() }
            }
            16 => {
                let ans = unsafe { self.kind.UrlError };
                crate::utils::error::PayjoinError::UrlError { message: ans.message.cst_decode() }
            }
            17 => {
                let ans = unsafe { self.kind.IoError };
                crate::utils::error::PayjoinError::IoError { message: ans.message.cst_decode() }
            }
            18 => {
                let ans = unsafe { self.kind.OutputSubstitutionError };
                crate::utils::error::PayjoinError::OutputSubstitutionError {
                    message: ans.message.cst_decode(),
                }
            }
            19 => {
                let ans = unsafe { self.kind.InputContributionError };
                crate::utils::error::PayjoinError::InputContributionError {
                    message: ans.message.cst_decode(),
                }
            }
            20 => {
                let ans = unsafe { self.kind.InputPairError };
                crate::utils::error::PayjoinError::InputPairError {
                    message: ans.message.cst_decode(),
                }
            }
            21 => {
                let ans = unsafe { self.kind.SerdeJsonError };
                crate::utils::error::PayjoinError::SerdeJsonError {
                    message: ans.message.cst_decode(),
                }
            }
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::utils::types::PsbtInput> for wire_cst_psbt_input {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::utils::types::PsbtInput {
        crate::utils::types::PsbtInput {
            witness_utxo: self.witness_utxo.cst_decode(),
            redeem_script: self.redeem_script.cst_decode(),
            witness_script: self.witness_script.cst_decode(),
        }
    }
}
impl CstDecode<(crate::utils::types::Request, crate::utils::types::ClientResponse)>
    for wire_cst_record_request_client_response
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> (crate::utils::types::Request, crate::utils::types::ClientResponse) {
        (self.field0.cst_decode(), self.field1.cst_decode())
    }
}
impl CstDecode<(crate::utils::types::Request, crate::api::send::FfiV1Context)>
    for wire_cst_record_request_ffi_v_1_context
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> (crate::utils::types::Request, crate::api::send::FfiV1Context) {
        (self.field0.cst_decode(), self.field1.cst_decode())
    }
}
impl CstDecode<(crate::utils::types::Request, crate::api::send::FfiV2PostContext)>
    for wire_cst_record_request_ffi_v_2_post_context
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> (crate::utils::types::Request, crate::api::send::FfiV2PostContext) {
        (self.field0.cst_decode(), self.field1.cst_decode())
    }
}
impl CstDecode<crate::utils::types::Request> for wire_cst_request {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::utils::types::Request {
        crate::utils::types::Request {
            url: self.url.cst_decode(),
            content_type: self.content_type.cst_decode(),
            body: self.body.cst_decode(),
        }
    }
}
impl CstDecode<crate::utils::types::TxIn> for wire_cst_tx_in {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::utils::types::TxIn {
        crate::utils::types::TxIn {
            previous_output: self.previous_output.cst_decode(),
            script_sig: self.script_sig.cst_decode(),
            sequence: self.sequence.cst_decode(),
            witness: self.witness.cst_decode(),
        }
    }
}
impl CstDecode<crate::utils::types::TxOut> for wire_cst_tx_out {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::utils::types::TxOut {
        crate::utils::types::TxOut {
            value: self.value.cst_decode(),
            script_pubkey: self.script_pubkey.cst_decode(),
        }
    }
}
impl NewWithNullPtr for wire_cst_client_response {
    fn new_with_null_ptr() -> Self {
        Self { field0: Default::default() }
    }
}
impl Default for wire_cst_client_response {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_ffi_input_pair {
    fn new_with_null_ptr() -> Self {
        Self { field0: Default::default() }
    }
}
impl Default for wire_cst_ffi_input_pair {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_ffi_maybe_inputs_owned {
    fn new_with_null_ptr() -> Self {
        Self { field0: Default::default() }
    }
}
impl Default for wire_cst_ffi_maybe_inputs_owned {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_ffi_maybe_inputs_seen {
    fn new_with_null_ptr() -> Self {
        Self { field0: Default::default() }
    }
}
impl Default for wire_cst_ffi_maybe_inputs_seen {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_ffi_ohttp_keys {
    fn new_with_null_ptr() -> Self {
        Self { field0: Default::default() }
    }
}
impl Default for wire_cst_ffi_ohttp_keys {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_ffi_outputs_unknown {
    fn new_with_null_ptr() -> Self {
        Self { field0: Default::default() }
    }
}
impl Default for wire_cst_ffi_outputs_unknown {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_ffi_payjoin_proposal {
    fn new_with_null_ptr() -> Self {
        Self { field0: Default::default() }
    }
}
impl Default for wire_cst_ffi_payjoin_proposal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_ffi_pj_uri {
    fn new_with_null_ptr() -> Self {
        Self { field0: Default::default() }
    }
}
impl Default for wire_cst_ffi_pj_uri {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_ffi_pj_uri_builder {
    fn new_with_null_ptr() -> Self {
        Self { internal: Default::default() }
    }
}
impl Default for wire_cst_ffi_pj_uri_builder {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_ffi_provisional_proposal {
    fn new_with_null_ptr() -> Self {
        Self { field0: Default::default() }
    }
}
impl Default for wire_cst_ffi_provisional_proposal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_ffi_receiver {
    fn new_with_null_ptr() -> Self {
        Self { field0: Default::default() }
    }
}
impl Default for wire_cst_ffi_receiver {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_ffi_script {
    fn new_with_null_ptr() -> Self {
        Self { field0: Default::default() }
    }
}
impl Default for wire_cst_ffi_script {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_ffi_sender {
    fn new_with_null_ptr() -> Self {
        Self { field0: Default::default() }
    }
}
impl Default for wire_cst_ffi_sender {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_ffi_sender_builder {
    fn new_with_null_ptr() -> Self {
        Self { field0: Default::default() }
    }
}
impl Default for wire_cst_ffi_sender_builder {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_ffi_unchecked_proposal {
    fn new_with_null_ptr() -> Self {
        Self { field0: Default::default() }
    }
}
impl Default for wire_cst_ffi_unchecked_proposal {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_ffi_uri {
    fn new_with_null_ptr() -> Self {
        Self { field0: Default::default() }
    }
}
impl Default for wire_cst_ffi_uri {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_ffi_url {
    fn new_with_null_ptr() -> Self {
        Self { field0: Default::default() }
    }
}
impl Default for wire_cst_ffi_url {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_ffi_v_1_context {
    fn new_with_null_ptr() -> Self {
        Self { field0: Default::default() }
    }
}
impl Default for wire_cst_ffi_v_1_context {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_ffi_v_2_get_context {
    fn new_with_null_ptr() -> Self {
        Self { field0: Default::default() }
    }
}
impl Default for wire_cst_ffi_v_2_get_context {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_ffi_v_2_post_context {
    fn new_with_null_ptr() -> Self {
        Self { field0: Default::default() }
    }
}
impl Default for wire_cst_ffi_v_2_post_context {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_ffi_wants_inputs {
    fn new_with_null_ptr() -> Self {
        Self { field0: Default::default() }
    }
}
impl Default for wire_cst_ffi_wants_inputs {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_ffi_wants_outputs {
    fn new_with_null_ptr() -> Self {
        Self { field0: Default::default() }
    }
}
impl Default for wire_cst_ffi_wants_outputs {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_out_point {
    fn new_with_null_ptr() -> Self {
        Self { txid: core::ptr::null_mut(), vout: Default::default() }
    }
}
impl Default for wire_cst_out_point {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_payjoin_error {
    fn new_with_null_ptr() -> Self {
        Self { tag: -1, kind: PayjoinErrorKind { nil__: () } }
    }
}
impl Default for wire_cst_payjoin_error {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_psbt_input {
    fn new_with_null_ptr() -> Self {
        Self {
            witness_utxo: core::ptr::null_mut(),
            redeem_script: core::ptr::null_mut(),
            witness_script: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_psbt_input {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_record_request_client_response {
    fn new_with_null_ptr() -> Self {
        Self { field0: Default::default(), field1: Default::default() }
    }
}
impl Default for wire_cst_record_request_client_response {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_record_request_ffi_v_1_context {
    fn new_with_null_ptr() -> Self {
        Self { field0: Default::default(), field1: Default::default() }
    }
}
impl Default for wire_cst_record_request_ffi_v_1_context {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_record_request_ffi_v_2_post_context {
    fn new_with_null_ptr() -> Self {
        Self { field0: Default::default(), field1: Default::default() }
    }
}
impl Default for wire_cst_record_request_ffi_v_2_post_context {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_request {
    fn new_with_null_ptr() -> Self {
        Self {
            url: Default::default(),
            content_type: core::ptr::null_mut(),
            body: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_request {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_tx_in {
    fn new_with_null_ptr() -> Self {
        Self {
            previous_output: Default::default(),
            script_sig: Default::default(),
            sequence: Default::default(),
            witness: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_tx_in {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_tx_out {
    fn new_with_null_ptr() -> Self {
        Self { value: Default::default(), script_pubkey: core::ptr::null_mut() }
    }
}
impl Default for wire_cst_tx_out {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__bitcoin_ffi__ffi_script_new(
    port_: i64,
    raw_output_script: *mut wire_cst_list_prim_u_8_loose,
) {
    wire__crate__api__bitcoin_ffi__ffi_script_new_impl(port_, raw_output_script)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__bitcoin_ffi__ffi_script_to_bytes(
    port_: i64,
    that: *mut wire_cst_ffi_script,
) {
    wire__crate__api__bitcoin_ffi__ffi_script_to_bytes_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__io__fetch_ohttp_keys(
    port_: i64,
    ohttp_relay: *mut wire_cst_ffi_url,
    payjoin_directory: *mut wire_cst_ffi_url,
) {
    wire__crate__api__io__fetch_ohttp_keys_impl(port_, ohttp_relay, payjoin_directory)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__receive__ffi_input_pair_new(
    port_: i64,
    txin: *mut wire_cst_tx_in,
    psbtin: *mut wire_cst_psbt_input,
) {
    wire__crate__api__receive__ffi_input_pair_new_impl(port_, txin, psbtin)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__receive__ffi_maybe_inputs_owned_check_inputs_not_owned(
    port_: i64,
    that: *mut wire_cst_ffi_maybe_inputs_owned,
    is_owned: *const std::ffi::c_void,
) {
    wire__crate__api__receive__ffi_maybe_inputs_owned_check_inputs_not_owned_impl(
        port_, that, is_owned,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__receive__ffi_maybe_inputs_seen_check_no_inputs_seen_before(
    port_: i64,
    that: *mut wire_cst_ffi_maybe_inputs_seen,
    is_known: *const std::ffi::c_void,
) {
    wire__crate__api__receive__ffi_maybe_inputs_seen_check_no_inputs_seen_before_impl(
        port_, that, is_known,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__receive__ffi_outputs_unknown_identify_receiver_outputs(
    port_: i64,
    that: *mut wire_cst_ffi_outputs_unknown,
    is_receiver_output: *const std::ffi::c_void,
) {
    wire__crate__api__receive__ffi_outputs_unknown_identify_receiver_outputs_impl(
        port_,
        that,
        is_receiver_output,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__receive__ffi_payjoin_proposal_extract_v1_req(
    port_: i64,
    that: *mut wire_cst_ffi_payjoin_proposal,
) {
    wire__crate__api__receive__ffi_payjoin_proposal_extract_v1_req_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__receive__ffi_payjoin_proposal_extract_v2_req(
    port_: i64,
    that: *mut wire_cst_ffi_payjoin_proposal,
) {
    wire__crate__api__receive__ffi_payjoin_proposal_extract_v2_req_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__receive__ffi_payjoin_proposal_is_output_substitution_disabled(
    port_: i64,
    that: *mut wire_cst_ffi_payjoin_proposal,
) {
    wire__crate__api__receive__ffi_payjoin_proposal_is_output_substitution_disabled_impl(
        port_, that,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__receive__ffi_payjoin_proposal_process_res(
    port_: i64,
    that: *mut wire_cst_ffi_payjoin_proposal,
    res: *mut wire_cst_list_prim_u_8_loose,
    ohttp_context: *mut wire_cst_client_response,
) {
    wire__crate__api__receive__ffi_payjoin_proposal_process_res_impl(
        port_,
        that,
        res,
        ohttp_context,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__receive__ffi_payjoin_proposal_psbt(
    port_: i64,
    that: *mut wire_cst_ffi_payjoin_proposal,
) {
    wire__crate__api__receive__ffi_payjoin_proposal_psbt_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__receive__ffi_payjoin_proposal_utxos_to_be_locked(
    port_: i64,
    that: *mut wire_cst_ffi_payjoin_proposal,
) {
    wire__crate__api__receive__ffi_payjoin_proposal_utxos_to_be_locked_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__receive__ffi_provisional_proposal_finalize_proposal(
    port_: i64,
    that: *mut wire_cst_ffi_provisional_proposal,
    process_psbt: *const std::ffi::c_void,
    min_fee_rate_sat_per_vb: *mut u64,
    max_fee_rate_sat_per_vb: u64,
) {
    wire__crate__api__receive__ffi_provisional_proposal_finalize_proposal_impl(
        port_,
        that,
        process_psbt,
        min_fee_rate_sat_per_vb,
        max_fee_rate_sat_per_vb,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__receive__ffi_receiver_create(
    port_: i64,
    address: *mut wire_cst_list_prim_u_8_strict,
    network: i32,
    directory: *mut wire_cst_ffi_url,
    ohttp_keys: *mut wire_cst_ffi_ohttp_keys,
    ohttp_relay: *mut wire_cst_ffi_url,
    expire_after: *mut u64,
) {
    wire__crate__api__receive__ffi_receiver_create_impl(
        port_,
        address,
        network,
        directory,
        ohttp_keys,
        ohttp_relay,
        expire_after,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__receive__ffi_receiver_extract_req(
    port_: i64,
    that: *mut wire_cst_ffi_receiver,
) {
    wire__crate__api__receive__ffi_receiver_extract_req_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__receive__ffi_receiver_from_json(
    json: *mut wire_cst_list_prim_u_8_strict,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire__crate__api__receive__ffi_receiver_from_json_impl(json)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__receive__ffi_receiver_id(
    that: *mut wire_cst_ffi_receiver,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire__crate__api__receive__ffi_receiver_id_impl(that)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__receive__ffi_receiver_pj_uri_builder(
    that: *mut wire_cst_ffi_receiver,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire__crate__api__receive__ffi_receiver_pj_uri_builder_impl(that)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__receive__ffi_receiver_pj_url(
    port_: i64,
    that: *mut wire_cst_ffi_receiver,
) {
    wire__crate__api__receive__ffi_receiver_pj_url_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__receive__ffi_receiver_process_res(
    port_: i64,
    that: *mut wire_cst_ffi_receiver,
    body: *mut wire_cst_list_prim_u_8_loose,
    ctx: *mut wire_cst_client_response,
) {
    wire__crate__api__receive__ffi_receiver_process_res_impl(port_, that, body, ctx)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__receive__ffi_receiver_to_json(
    that: *mut wire_cst_ffi_receiver,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire__crate__api__receive__ffi_receiver_to_json_impl(that)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__receive__ffi_unchecked_proposal_assume_interactive_receiver(
    port_: i64,
    that: *mut wire_cst_ffi_unchecked_proposal,
) {
    wire__crate__api__receive__ffi_unchecked_proposal_assume_interactive_receiver_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__receive__ffi_unchecked_proposal_check_broadcast_suitability(
    port_: i64,
    that: *mut wire_cst_ffi_unchecked_proposal,
    min_fee_rate: *mut u64,
    can_broadcast: *const std::ffi::c_void,
) {
    wire__crate__api__receive__ffi_unchecked_proposal_check_broadcast_suitability_impl(
        port_,
        that,
        min_fee_rate,
        can_broadcast,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__receive__ffi_unchecked_proposal_extract_tx_to_schedule_broadcast(
    port_: i64,
    that: *mut wire_cst_ffi_unchecked_proposal,
) {
    wire__crate__api__receive__ffi_unchecked_proposal_extract_tx_to_schedule_broadcast_impl(
        port_, that,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__receive__ffi_wants_inputs_commit_inputs(
    port_: i64,
    that: *mut wire_cst_ffi_wants_inputs,
) {
    wire__crate__api__receive__ffi_wants_inputs_commit_inputs_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__receive__ffi_wants_inputs_contribute_inputs(
    port_: i64,
    that: *mut wire_cst_ffi_wants_inputs,
    replacement_inputs: *mut wire_cst_list_ffi_input_pair,
) {
    wire__crate__api__receive__ffi_wants_inputs_contribute_inputs_impl(
        port_,
        that,
        replacement_inputs,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__receive__ffi_wants_inputs_try_preserving_privacy(
    port_: i64,
    that: *mut wire_cst_ffi_wants_inputs,
    candidate_inputs: *mut wire_cst_list_ffi_input_pair,
) {
    wire__crate__api__receive__ffi_wants_inputs_try_preserving_privacy_impl(
        port_,
        that,
        candidate_inputs,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__receive__ffi_wants_outputs_commit_outputs(
    port_: i64,
    that: *mut wire_cst_ffi_wants_outputs,
) {
    wire__crate__api__receive__ffi_wants_outputs_commit_outputs_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__receive__ffi_wants_outputs_is_output_substitution_disabled(
    port_: i64,
    that: *mut wire_cst_ffi_wants_outputs,
) {
    wire__crate__api__receive__ffi_wants_outputs_is_output_substitution_disabled_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__receive__ffi_wants_outputs_replace_receiver_outputs(
    port_: i64,
    that: *mut wire_cst_ffi_wants_outputs,
    replacement_outputs: *mut wire_cst_list_tx_out,
    drain_script: *mut wire_cst_ffi_script,
) {
    wire__crate__api__receive__ffi_wants_outputs_replace_receiver_outputs_impl(
        port_,
        that,
        replacement_outputs,
        drain_script,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__receive__ffi_wants_outputs_substitute_receiver_script(
    port_: i64,
    that: *mut wire_cst_ffi_wants_outputs,
    output_script: *mut wire_cst_ffi_script,
) {
    wire__crate__api__receive__ffi_wants_outputs_substitute_receiver_script_impl(
        port_,
        that,
        output_script,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__send__ffi_sender_builder_always_disable_output_substitution(
    port_: i64,
    that: *mut wire_cst_ffi_sender_builder,
    disable: bool,
) {
    wire__crate__api__send__ffi_sender_builder_always_disable_output_substitution_impl(
        port_, that, disable,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__send__ffi_sender_builder_build_non_incentivizing(
    port_: i64,
    that: *mut wire_cst_ffi_sender_builder,
    min_fee_rate: u64,
) {
    wire__crate__api__send__ffi_sender_builder_build_non_incentivizing_impl(
        port_,
        that,
        min_fee_rate,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__send__ffi_sender_builder_build_recommended(
    port_: i64,
    that: *mut wire_cst_ffi_sender_builder,
    min_fee_rate: u64,
) {
    wire__crate__api__send__ffi_sender_builder_build_recommended_impl(port_, that, min_fee_rate)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__send__ffi_sender_builder_build_with_additional_fee(
    port_: i64,
    that: *mut wire_cst_ffi_sender_builder,
    max_fee_contribution: u64,
    change_index: *mut u8,
    min_fee_rate: u64,
    clamp_fee_contribution: bool,
) {
    wire__crate__api__send__ffi_sender_builder_build_with_additional_fee_impl(
        port_,
        that,
        max_fee_contribution,
        change_index,
        min_fee_rate,
        clamp_fee_contribution,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__send__ffi_sender_builder_from_psbt_and_uri(
    port_: i64,
    psbt_base64: *mut wire_cst_list_prim_u_8_strict,
    pj_uri: *mut wire_cst_ffi_pj_uri,
) {
    wire__crate__api__send__ffi_sender_builder_from_psbt_and_uri_impl(port_, psbt_base64, pj_uri)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__send__ffi_sender_extract_v1(
    port_: i64,
    that: *mut wire_cst_ffi_sender,
) {
    wire__crate__api__send__ffi_sender_extract_v1_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__send__ffi_sender_extract_v2(
    port_: i64,
    that: *mut wire_cst_ffi_sender,
    ohttp_proxy_url: *mut wire_cst_ffi_url,
) {
    wire__crate__api__send__ffi_sender_extract_v2_impl(port_, that, ohttp_proxy_url)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__send__ffi_sender_from_json(
    json: *mut wire_cst_list_prim_u_8_strict,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire__crate__api__send__ffi_sender_from_json_impl(json)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__send__ffi_sender_to_json(
    that: *mut wire_cst_ffi_sender,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire__crate__api__send__ffi_sender_to_json_impl(that)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__send__ffi_v_1_context_process_response(
    port_: i64,
    that: *mut wire_cst_ffi_v_1_context,
    response: *mut wire_cst_list_prim_u_8_loose,
) {
    wire__crate__api__send__ffi_v_1_context_process_response_impl(port_, that, response)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__send__ffi_v_2_get_context_extract_req(
    port_: i64,
    that: *mut wire_cst_ffi_v_2_get_context,
    ohttp_relay: *mut wire_cst_ffi_url,
) {
    wire__crate__api__send__ffi_v_2_get_context_extract_req_impl(port_, that, ohttp_relay)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__send__ffi_v_2_get_context_process_response(
    port_: i64,
    that: *mut wire_cst_ffi_v_2_get_context,
    response: *mut wire_cst_list_prim_u_8_loose,
    ohttp_ctx: *mut wire_cst_client_response,
) {
    wire__crate__api__send__ffi_v_2_get_context_process_response_impl(
        port_, that, response, ohttp_ctx,
    )
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__send__ffi_v_2_post_context_process_response(
    port_: i64,
    that: *mut wire_cst_ffi_v_2_post_context,
    response: *mut wire_cst_list_prim_u_8_loose,
) {
    wire__crate__api__send__ffi_v_2_post_context_process_response_impl(port_, that, response)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__uri__ffi_ohttp_keys_decode(
    port_: i64,
    bytes: *mut wire_cst_list_prim_u_8_loose,
) {
    wire__crate__api__uri__ffi_ohttp_keys_decode_impl(port_, bytes)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__uri__ffi_pj_uri_address(
    that: *mut wire_cst_ffi_pj_uri,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire__crate__api__uri__ffi_pj_uri_address_impl(that)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__uri__ffi_pj_uri_amount_sats(
    that: *mut wire_cst_ffi_pj_uri,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire__crate__api__uri__ffi_pj_uri_amount_sats_impl(that)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__uri__ffi_pj_uri_as_string(
    that: *mut wire_cst_ffi_pj_uri,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire__crate__api__uri__ffi_pj_uri_as_string_impl(that)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__uri__ffi_pj_uri_builder_amount_sats(
    that: *mut wire_cst_ffi_pj_uri_builder,
    amount: u64,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire__crate__api__uri__ffi_pj_uri_builder_amount_sats_impl(that, amount)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__uri__ffi_pj_uri_builder_build(
    that: *mut wire_cst_ffi_pj_uri_builder,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire__crate__api__uri__ffi_pj_uri_builder_build_impl(that)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__uri__ffi_pj_uri_builder_label(
    that: *mut wire_cst_ffi_pj_uri_builder,
    label: *mut wire_cst_list_prim_u_8_strict,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire__crate__api__uri__ffi_pj_uri_builder_label_impl(that, label)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__uri__ffi_pj_uri_builder_message(
    that: *mut wire_cst_ffi_pj_uri_builder,
    message: *mut wire_cst_list_prim_u_8_strict,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire__crate__api__uri__ffi_pj_uri_builder_message_impl(that, message)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__uri__ffi_pj_uri_builder_pjos(
    that: *mut wire_cst_ffi_pj_uri_builder,
    pjos: bool,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire__crate__api__uri__ffi_pj_uri_builder_pjos_impl(that, pjos)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__uri__ffi_pj_uri_pj_endpoint(
    that: *mut wire_cst_ffi_pj_uri,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire__crate__api__uri__ffi_pj_uri_pj_endpoint_impl(that)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__uri__ffi_uri_address(
    that: *mut wire_cst_ffi_uri,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire__crate__api__uri__ffi_uri_address_impl(that)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__uri__ffi_uri_amount_sats(
    that: *mut wire_cst_ffi_uri,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire__crate__api__uri__ffi_uri_amount_sats_impl(that)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__uri__ffi_uri_as_string(
    that: *mut wire_cst_ffi_uri,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire__crate__api__uri__ffi_uri_as_string_impl(that)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__uri__ffi_uri_check_pj_supported(
    that: *mut wire_cst_ffi_uri,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire__crate__api__uri__ffi_uri_check_pj_supported_impl(that)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__uri__ffi_uri_label(
    that: *mut wire_cst_ffi_uri,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire__crate__api__uri__ffi_uri_label_impl(that)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__uri__ffi_uri_message(
    that: *mut wire_cst_ffi_uri,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire__crate__api__uri__ffi_uri_message_impl(that)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__uri__ffi_uri_parse(
    uri: *mut wire_cst_list_prim_u_8_strict,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire__crate__api__uri__ffi_uri_parse_impl(uri)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__uri__ffi_url_as_string(
    that: *mut wire_cst_ffi_url,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire__crate__api__uri__ffi_url_as_string_impl(that)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__uri__ffi_url_parse(
    url: *mut wire_cst_list_prim_u_8_strict,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire__crate__api__uri__ffi_url_parse_impl(url)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__uri__ffi_url_query(
    that: *mut wire_cst_ffi_url,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    wire__crate__api__uri__ffi_url_query_impl(that)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_bitcoin_ffiScript(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<bitcoin_ffi::Script>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_bitcoin_ffiScript(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<bitcoin_ffi::Script>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_payjoin_ffiOhttpKeys(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<payjoin_ffi::OhttpKeys>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_payjoin_ffiOhttpKeys(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<payjoin_ffi::OhttpKeys>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_payjoin_ffiUrl(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<payjoin_ffi::Url>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_payjoin_ffiUrl(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<payjoin_ffi::Url>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_payjoin_ffireceiveInputPair(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<payjoin_ffi::receive::InputPair>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_payjoin_ffireceiveInputPair(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<payjoin_ffi::receive::InputPair>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_payjoin_ffireceiveMaybeInputsOwned(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<payjoin_ffi::receive::MaybeInputsOwned>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_payjoin_ffireceiveMaybeInputsOwned(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<payjoin_ffi::receive::MaybeInputsOwned>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_payjoin_ffireceiveMaybeInputsSeen(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<payjoin_ffi::receive::MaybeInputsSeen>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_payjoin_ffireceiveMaybeInputsSeen(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<payjoin_ffi::receive::MaybeInputsSeen>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_payjoin_ffireceiveOutputsUnknown(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<payjoin_ffi::receive::OutputsUnknown>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_payjoin_ffireceiveOutputsUnknown(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<payjoin_ffi::receive::OutputsUnknown>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_payjoin_ffireceivePayjoinProposal(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<payjoin_ffi::receive::PayjoinProposal>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_payjoin_ffireceivePayjoinProposal(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<payjoin_ffi::receive::PayjoinProposal>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_payjoin_ffireceiveProvisionalProposal(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<payjoin_ffi::receive::ProvisionalProposal>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_payjoin_ffireceiveProvisionalProposal(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<payjoin_ffi::receive::ProvisionalProposal>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_payjoin_ffireceiveReceiver(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<payjoin_ffi::receive::Receiver>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_payjoin_ffireceiveReceiver(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<payjoin_ffi::receive::Receiver>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_payjoin_ffireceiveUncheckedProposal(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<payjoin_ffi::receive::UncheckedProposal>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_payjoin_ffireceiveUncheckedProposal(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<payjoin_ffi::receive::UncheckedProposal>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_payjoin_ffireceiveWantsInputs(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<payjoin_ffi::receive::WantsInputs>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_payjoin_ffireceiveWantsInputs(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<payjoin_ffi::receive::WantsInputs>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_payjoin_ffireceiveWantsOutputs(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<payjoin_ffi::receive::WantsOutputs>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_payjoin_ffireceiveWantsOutputs(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<payjoin_ffi::receive::WantsOutputs>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_payjoin_ffisendSender(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<payjoin_ffi::send::Sender>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_payjoin_ffisendSender(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<payjoin_ffi::send::Sender>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_payjoin_ffisendSenderBuilder(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<payjoin_ffi::send::SenderBuilder>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_payjoin_ffisendSenderBuilder(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<payjoin_ffi::send::SenderBuilder>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_payjoin_ffisendV1Context(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<payjoin_ffi::send::V1Context>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_payjoin_ffisendV1Context(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<payjoin_ffi::send::V1Context>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_payjoin_ffisendV2GetContext(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<payjoin_ffi::send::V2GetContext>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_payjoin_ffisendV2GetContext(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<payjoin_ffi::send::V2GetContext>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_payjoin_ffisendV2PostContext(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<payjoin_ffi::send::V2PostContext>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_payjoin_ffisendV2PostContext(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<payjoin_ffi::send::V2PostContext>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_payjoin_ffiuriPjUri(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<payjoin_ffi::uri::PjUri>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_payjoin_ffiuriPjUri(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<payjoin_ffi::uri::PjUri>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_payjoin_ffiuriPjUriBuilder(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<payjoin_ffi::uri::PjUriBuilder>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_payjoin_ffiuriPjUriBuilder(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<payjoin_ffi::uri::PjUriBuilder>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_payjoin_ffiuriUri(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<payjoin_ffi::uri::Uri>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_payjoin_ffiuriUri(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<payjoin_ffi::uri::Uri>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_stdsyncMutexcoreoptionOptionpayjoin_ffiClientResponse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<std :: sync :: Mutex < core :: option :: Option < payjoin_ffi :: ClientResponse > >>::increment_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_stdsyncMutexcoreoptionOptionpayjoin_ffiClientResponse(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        StdArc::<std :: sync :: Mutex < core :: option :: Option < payjoin_ffi :: ClientResponse > >>::decrement_strong_count(ptr as _);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_cst_new_box_autoadd_client_response(
) -> *mut wire_cst_client_response {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_client_response::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_cst_new_box_autoadd_ffi_maybe_inputs_owned(
) -> *mut wire_cst_ffi_maybe_inputs_owned {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_ffi_maybe_inputs_owned::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_cst_new_box_autoadd_ffi_maybe_inputs_seen(
) -> *mut wire_cst_ffi_maybe_inputs_seen {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_ffi_maybe_inputs_seen::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_cst_new_box_autoadd_ffi_ohttp_keys(
) -> *mut wire_cst_ffi_ohttp_keys {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_ffi_ohttp_keys::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_cst_new_box_autoadd_ffi_outputs_unknown(
) -> *mut wire_cst_ffi_outputs_unknown {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_ffi_outputs_unknown::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_cst_new_box_autoadd_ffi_payjoin_proposal(
) -> *mut wire_cst_ffi_payjoin_proposal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_ffi_payjoin_proposal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_cst_new_box_autoadd_ffi_pj_uri() -> *mut wire_cst_ffi_pj_uri
{
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_ffi_pj_uri::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_cst_new_box_autoadd_ffi_pj_uri_builder(
) -> *mut wire_cst_ffi_pj_uri_builder {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_ffi_pj_uri_builder::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_cst_new_box_autoadd_ffi_provisional_proposal(
) -> *mut wire_cst_ffi_provisional_proposal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_ffi_provisional_proposal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_cst_new_box_autoadd_ffi_receiver(
) -> *mut wire_cst_ffi_receiver {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_ffi_receiver::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_cst_new_box_autoadd_ffi_script() -> *mut wire_cst_ffi_script
{
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_ffi_script::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_cst_new_box_autoadd_ffi_sender() -> *mut wire_cst_ffi_sender
{
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_ffi_sender::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_cst_new_box_autoadd_ffi_sender_builder(
) -> *mut wire_cst_ffi_sender_builder {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_ffi_sender_builder::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_cst_new_box_autoadd_ffi_unchecked_proposal(
) -> *mut wire_cst_ffi_unchecked_proposal {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_ffi_unchecked_proposal::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_cst_new_box_autoadd_ffi_uri() -> *mut wire_cst_ffi_uri {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_ffi_uri::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_cst_new_box_autoadd_ffi_url() -> *mut wire_cst_ffi_url {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_ffi_url::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_cst_new_box_autoadd_ffi_v_1_context(
) -> *mut wire_cst_ffi_v_1_context {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_ffi_v_1_context::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_cst_new_box_autoadd_ffi_v_2_get_context(
) -> *mut wire_cst_ffi_v_2_get_context {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_ffi_v_2_get_context::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_cst_new_box_autoadd_ffi_v_2_post_context(
) -> *mut wire_cst_ffi_v_2_post_context {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_ffi_v_2_post_context::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_cst_new_box_autoadd_ffi_wants_inputs(
) -> *mut wire_cst_ffi_wants_inputs {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_ffi_wants_inputs::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_cst_new_box_autoadd_ffi_wants_outputs(
) -> *mut wire_cst_ffi_wants_outputs {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_ffi_wants_outputs::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_cst_new_box_autoadd_psbt_input() -> *mut wire_cst_psbt_input
{
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_psbt_input::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_cst_new_box_autoadd_tx_in() -> *mut wire_cst_tx_in {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_tx_in::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_cst_new_box_autoadd_tx_out() -> *mut wire_cst_tx_out {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_tx_out::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_cst_new_box_autoadd_u_64(value: u64) -> *mut u64 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_cst_new_box_autoadd_u_8(value: u8) -> *mut u8 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_cst_new_list_ffi_input_pair(
    len: i32,
) -> *mut wire_cst_list_ffi_input_pair {
    let wrap = wire_cst_list_ffi_input_pair {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_ffi_input_pair>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_cst_new_list_list_prim_u_8_strict(
    len: i32,
) -> *mut wire_cst_list_list_prim_u_8_strict {
    let wrap = wire_cst_list_list_prim_u_8_strict {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <*mut wire_cst_list_prim_u_8_strict>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_cst_new_list_out_point(
    len: i32,
) -> *mut wire_cst_list_out_point {
    let wrap = wire_cst_list_out_point {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_out_point>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_cst_new_list_prim_u_8_loose(
    len: i32,
) -> *mut wire_cst_list_prim_u_8_loose {
    let ans = wire_cst_list_prim_u_8_loose {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_cst_new_list_prim_u_8_strict(
    len: i32,
) -> *mut wire_cst_list_prim_u_8_strict {
    let ans = wire_cst_list_prim_u_8_strict {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
}

#[no_mangle]
pub extern "C" fn frbgen_payjoin_flutter_cst_new_list_tx_out(
    len: i32,
) -> *mut wire_cst_list_tx_out {
    let wrap = wire_cst_list_tx_out {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_tx_out>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_client_response {
    field0: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_ffi_input_pair {
    field0: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_ffi_maybe_inputs_owned {
    field0: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_ffi_maybe_inputs_seen {
    field0: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_ffi_ohttp_keys {
    field0: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_ffi_outputs_unknown {
    field0: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_ffi_payjoin_proposal {
    field0: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_ffi_pj_uri {
    field0: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_ffi_pj_uri_builder {
    internal: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_ffi_provisional_proposal {
    field0: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_ffi_receiver {
    field0: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_ffi_script {
    field0: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_ffi_sender {
    field0: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_ffi_sender_builder {
    field0: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_ffi_unchecked_proposal {
    field0: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_ffi_uri {
    field0: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_ffi_url {
    field0: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_ffi_v_1_context {
    field0: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_ffi_v_2_get_context {
    field0: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_ffi_v_2_post_context {
    field0: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_ffi_wants_inputs {
    field0: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_ffi_wants_outputs {
    field0: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_ffi_input_pair {
    ptr: *mut wire_cst_ffi_input_pair,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_list_prim_u_8_strict {
    ptr: *mut *mut wire_cst_list_prim_u_8_strict,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_out_point {
    ptr: *mut wire_cst_out_point,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_prim_u_8_loose {
    ptr: *mut u8,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_prim_u_8_strict {
    ptr: *mut u8,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_tx_out {
    ptr: *mut wire_cst_tx_out,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_out_point {
    txid: *mut wire_cst_list_prim_u_8_strict,
    vout: u32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_payjoin_error {
    tag: i32,
    kind: PayjoinErrorKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union PayjoinErrorKind {
    InvalidAddress: wire_cst_PayjoinError_InvalidAddress,
    InvalidScript: wire_cst_PayjoinError_InvalidScript,
    NetworkValidation: wire_cst_PayjoinError_NetworkValidation,
    PsbtParseError: wire_cst_PayjoinError_PsbtParseError,
    ResponseError: wire_cst_PayjoinError_ResponseError,
    RequestError: wire_cst_PayjoinError_RequestError,
    TransactionError: wire_cst_PayjoinError_TransactionError,
    ServerError: wire_cst_PayjoinError_ServerError,
    SelectionError: wire_cst_PayjoinError_SelectionError,
    CreateRequestError: wire_cst_PayjoinError_CreateRequestError,
    PjParseError: wire_cst_PayjoinError_PjParseError,
    PjNotSupported: wire_cst_PayjoinError_PjNotSupported,
    ValidationError: wire_cst_PayjoinError_ValidationError,
    V2Error: wire_cst_PayjoinError_V2Error,
    UnexpectedError: wire_cst_PayjoinError_UnexpectedError,
    OhttpError: wire_cst_PayjoinError_OhttpError,
    UrlError: wire_cst_PayjoinError_UrlError,
    IoError: wire_cst_PayjoinError_IoError,
    OutputSubstitutionError: wire_cst_PayjoinError_OutputSubstitutionError,
    InputContributionError: wire_cst_PayjoinError_InputContributionError,
    InputPairError: wire_cst_PayjoinError_InputPairError,
    SerdeJsonError: wire_cst_PayjoinError_SerdeJsonError,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_PayjoinError_InvalidAddress {
    message: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_PayjoinError_InvalidScript {
    message: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_PayjoinError_NetworkValidation {
    message: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_PayjoinError_PsbtParseError {
    message: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_PayjoinError_ResponseError {
    message: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_PayjoinError_RequestError {
    message: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_PayjoinError_TransactionError {
    message: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_PayjoinError_ServerError {
    message: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_PayjoinError_SelectionError {
    message: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_PayjoinError_CreateRequestError {
    message: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_PayjoinError_PjParseError {
    message: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_PayjoinError_PjNotSupported {
    message: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_PayjoinError_ValidationError {
    message: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_PayjoinError_V2Error {
    message: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_PayjoinError_UnexpectedError {
    message: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_PayjoinError_OhttpError {
    message: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_PayjoinError_UrlError {
    message: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_PayjoinError_IoError {
    message: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_PayjoinError_OutputSubstitutionError {
    message: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_PayjoinError_InputContributionError {
    message: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_PayjoinError_InputPairError {
    message: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_PayjoinError_SerdeJsonError {
    message: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_psbt_input {
    witness_utxo: *mut wire_cst_tx_out,
    redeem_script: *mut wire_cst_ffi_script,
    witness_script: *mut wire_cst_ffi_script,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_record_request_client_response {
    field0: wire_cst_request,
    field1: wire_cst_client_response,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_record_request_ffi_v_1_context {
    field0: wire_cst_request,
    field1: wire_cst_ffi_v_1_context,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_record_request_ffi_v_2_post_context {
    field0: wire_cst_request,
    field1: wire_cst_ffi_v_2_post_context,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_request {
    url: wire_cst_ffi_url,
    content_type: *mut wire_cst_list_prim_u_8_strict,
    body: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_tx_in {
    previous_output: wire_cst_out_point,
    script_sig: wire_cst_ffi_script,
    sequence: u32,
    witness: *mut wire_cst_list_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_tx_out {
    value: u64,
    script_pubkey: *mut wire_cst_list_prim_u_8_strict,
}
