// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

#![allow(
    non_camel_case_types,
    unused,
    non_snake_case,
    clippy::needless_return,
    clippy::redundant_closure_call,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::unused_unit,
    clippy::double_parens,
    clippy::let_and_return,
    clippy::too_many_arguments,
    clippy::match_single_binding,
    clippy::clone_on_copy,
    clippy::let_unit_value,
    clippy::deref_addrof,
    clippy::explicit_auto_deref,
    clippy::borrow_deref_ref,
    clippy::needless_borrow
)]

// Section: imports

use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
use flutter_rust_bridge::{Handler, IntoIntoDart};

use crate::api::receive::error::*;
use crate::api::receive::*;
use crate::api::send::*;
use crate::api::uri::*;
use crate::*;

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate!(
    default_stream_sink_codec = DcoCodec,
    default_rust_opaque = RustOpaqueNom,
    default_rust_auto_opaque = RustAutoOpaqueNom,
);
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str = "2.9.0";
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 = 1832616008;

// Section: executor

flutter_rust_bridge::frb_generated_default_handler!();

// Section: wire_funcs

fn wire__crate__api__receive__DartReceiverPersister_new_impl(
    save: impl CstDecode<flutter_rust_bridge::DartOpaque>,
    load: impl CstDecode<flutter_rust_bridge::DartOpaque>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "DartReceiverPersister_new", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_save = decode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiReceiver_Output_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReceiverToken_AnyhowException(save.cst_decode());let api_load = decode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReceiverToken_Output_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiReceiver_AnyhowException(load.cst_decode());
                transform_result_dco::<_, _, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::api::receive::DartReceiverPersister::new(api_save, api_load))?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__send__DartSenderPersister_new_impl(
    save: impl CstDecode<flutter_rust_bridge::DartOpaque>,
    load: impl CstDecode<flutter_rust_bridge::DartOpaque>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "DartSenderPersister_new", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_save = decode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiSender_Output_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSenderToken_AnyhowException(save.cst_decode());let api_load = decode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSenderToken_Output_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiSender_AnyhowException(load.cst_decode());
                transform_result_dco::<_, _, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::api::send::DartSenderPersister::new(api_save, api_load))?;   Ok(output_ok)
                })()) })
}
fn wire__crate__api__uri__FfiPjUri_address_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FfiPjUri>>,
    >,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "FfiPjUri_address",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let mut api_that_guard = None;
                let decode_indices_ =
                    flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                        flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                            &api_that, 0, false,
                        ),
                    ]);
                for i in decode_indices_ {
                    match i {
                        0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                        _ => unreachable!(),
                    }
                }
                let api_that_guard = api_that_guard.unwrap();
                let output_ok =
                    Result::<_, ()>::Ok(crate::api::uri::FfiPjUri::address(&*api_that_guard))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__uri__FfiPjUri_amount_sats_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FfiPjUri>>,
    >,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "FfiPjUri_amount_sats",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let mut api_that_guard = None;
                let decode_indices_ =
                    flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                        flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                            &api_that, 0, false,
                        ),
                    ]);
                for i in decode_indices_ {
                    match i {
                        0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                        _ => unreachable!(),
                    }
                }
                let api_that_guard = api_that_guard.unwrap();
                let output_ok =
                    Result::<_, ()>::Ok(crate::api::uri::FfiPjUri::amount_sats(&*api_that_guard))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__uri__FfiPjUri_as_string_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FfiPjUri>>,
    >,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "FfiPjUri_as_string",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let mut api_that_guard = None;
                let decode_indices_ =
                    flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                        flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                            &api_that, 0, false,
                        ),
                    ]);
                for i in decode_indices_ {
                    match i {
                        0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                        _ => unreachable!(),
                    }
                }
                let api_that_guard = api_that_guard.unwrap();
                let output_ok =
                    Result::<_, ()>::Ok(crate::api::uri::FfiPjUri::as_string(&*api_that_guard))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__uri__FfiPjUri_pj_endpoint_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FfiPjUri>>,
    >,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "FfiPjUri_pj_endpoint",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let mut api_that_guard = None;
                let decode_indices_ =
                    flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                        flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                            &api_that, 0, false,
                        ),
                    ]);
                for i in decode_indices_ {
                    match i {
                        0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                        _ => unreachable!(),
                    }
                }
                let api_that_guard = api_that_guard.unwrap();
                let output_ok =
                    Result::<_, ()>::Ok(crate::api::uri::FfiPjUri::pj_endpoint(&*api_that_guard))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__uri__FfiPjUri_set_amount_sats_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FfiPjUri>>,
    >,
    amount: impl CstDecode<u64>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "FfiPjUri_set_amount_sats",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_amount = amount.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let mut api_that_guard = None;
                let decode_indices_ =
                    flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                        flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                            &api_that, 0, false,
                        ),
                    ]);
                for i in decode_indices_ {
                    match i {
                        0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                        _ => unreachable!(),
                    }
                }
                let api_that_guard = api_that_guard.unwrap();
                let output_ok = Result::<_, ()>::Ok(crate::api::uri::FfiPjUri::set_amount_sats(
                    &*api_that_guard,
                    api_amount,
                ))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__receive__FfiReceiver_extract_req_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FfiReceiver>>,
    >,
    ohttp_relay: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "FfiReceiver_extract_req",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_ohttp_relay = ohttp_relay.cst_decode();
            move |context| {
                transform_result_dco::<_, _, crate::api::receive::error::FfiError>((move || {
                    let mut api_that_guard = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                            flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                &api_that, 0, false,
                            ),
                        ]);
                    for i in decode_indices_ {
                        match i {
                            0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                            _ => unreachable!(),
                        }
                    }
                    let api_that_guard = api_that_guard.unwrap();
                    let output_ok = crate::api::receive::FfiReceiver::extract_req(
                        &*api_that_guard,
                        api_ohttp_relay,
                    )?;
                    Ok(output_ok)
                })(
                ))
            }
        },
    )
}
fn wire__crate__api__receive__FfiReceiver_from_json_impl(
    json: impl CstDecode<String>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "FfiReceiver_from_json",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_json = json.cst_decode();
            transform_result_dco::<_, _, crate::api::FfiSerdeJsonError>((move || {
                let output_ok = crate::api::receive::FfiReceiver::from_json(api_json)?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__receive__FfiReceiver_id_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FfiReceiver>>,
    >,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "FfiReceiver_id",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let mut api_that_guard = None;
                let decode_indices_ =
                    flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                        flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                            &api_that, 0, false,
                        ),
                    ]);
                for i in decode_indices_ {
                    match i {
                        0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                        _ => unreachable!(),
                    }
                }
                let api_that_guard = api_that_guard.unwrap();
                let output_ok =
                    Result::<_, ()>::Ok(crate::api::receive::FfiReceiver::id(&*api_that_guard))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__receive__FfiReceiver_key_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FfiReceiver>>,
    >,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "FfiReceiver_key",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let mut api_that_guard = None;
                let decode_indices_ =
                    flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                        flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                            &api_that, 0, false,
                        ),
                    ]);
                for i in decode_indices_ {
                    match i {
                        0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                        _ => unreachable!(),
                    }
                }
                let api_that_guard = api_that_guard.unwrap();
                let output_ok =
                    Result::<_, ()>::Ok(crate::api::receive::FfiReceiver::key(&*api_that_guard))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__receive__FfiReceiver_load_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    token: impl CstDecode<ReceiverToken>,
    persister: impl CstDecode<DartReceiverPersister>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "FfiReceiver_load",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_token = token.cst_decode();
            let api_persister = persister.cst_decode();
            move |context| {
                transform_result_dco::<_, _, crate::api::receive::error::FfiImplementationError>(
                    (move || {
                        let output_ok =
                            crate::api::receive::FfiReceiver::load(api_token, api_persister)?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__receive__FfiReceiver_pj_uri_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FfiReceiver>>,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "FfiReceiver_pj_uri",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let mut api_that_guard = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                            flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                &api_that, 0, false,
                            ),
                        ]);
                    for i in decode_indices_ {
                        match i {
                            0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                            _ => unreachable!(),
                        }
                    }
                    let api_that_guard = api_that_guard.unwrap();
                    let output_ok = Result::<_, ()>::Ok(crate::api::receive::FfiReceiver::pj_uri(
                        &*api_that_guard,
                    ))?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__receive__FfiReceiver_process_res_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FfiReceiver>>,
    >,
    body: impl CstDecode<Vec<u8>>,
    ctx: impl CstDecode<crate::utils::types::ClientResponse>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "FfiReceiver_process_res",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_body = body.cst_decode();
            let api_ctx = ctx.cst_decode();
            move |context| {
                transform_result_dco::<_, _, crate::api::receive::error::FfiError>((move || {
                    let mut api_that_guard = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                            flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                &api_that, 0, false,
                            ),
                        ]);
                    for i in decode_indices_ {
                        match i {
                            0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                            _ => unreachable!(),
                        }
                    }
                    let api_that_guard = api_that_guard.unwrap();
                    let output_ok = crate::api::receive::FfiReceiver::process_res(
                        &*api_that_guard,
                        &api_body,
                        &api_ctx,
                    )?;
                    Ok(output_ok)
                })(
                ))
            }
        },
    )
}
fn wire__crate__api__receive__FfiReceiver_to_json_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FfiReceiver>>,
    >,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "FfiReceiver_to_json",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, crate::api::FfiSerdeJsonError>((move || {
                let mut api_that_guard = None;
                let decode_indices_ =
                    flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                        flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                            &api_that, 0, false,
                        ),
                    ]);
                for i in decode_indices_ {
                    match i {
                        0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                        _ => unreachable!(),
                    }
                }
                let api_that_guard = api_that_guard.unwrap();
                let output_ok = crate::api::receive::FfiReceiver::to_json(&*api_that_guard)?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__send__FfiSender_extract_v1_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FfiSender>>,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "FfiSender_extract_v1",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let mut api_that_guard = None;
                    let decode_indices_ =
                        flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                            flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                &api_that, 0, false,
                            ),
                        ]);
                    for i in decode_indices_ {
                        match i {
                            0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                            _ => unreachable!(),
                        }
                    }
                    let api_that_guard = api_that_guard.unwrap();
                    let output_ok = Result::<_, ()>::Ok(crate::api::send::FfiSender::extract_v1(
                        &*api_that_guard,
                    ))?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__send__FfiSender_extract_v2_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FfiSender>>,
    >,
    ohttp_proxy_url: impl CstDecode<crate::api::uri::FfiUrl>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "FfiSender_extract_v2",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_ohttp_proxy_url = ohttp_proxy_url.cst_decode();
            move |context| {
                transform_result_dco::<_, _, crate::api::send::error::FfiCreateRequestError>(
                    (move || {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok = crate::api::send::FfiSender::extract_v2(
                            &*api_that_guard,
                            api_ohttp_proxy_url,
                        )?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__send__FfiSender_from_json_impl(
    json: impl CstDecode<String>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "FfiSender_from_json",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_json = json.cst_decode();
            transform_result_dco::<_, _, crate::api::FfiSerdeJsonError>((move || {
                let output_ok = crate::api::send::FfiSender::from_json(api_json)?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__send__FfiSender_key_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FfiSender>>,
    >,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "FfiSender_key",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let mut api_that_guard = None;
                let decode_indices_ =
                    flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                        flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                            &api_that, 0, false,
                        ),
                    ]);
                for i in decode_indices_ {
                    match i {
                        0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                        _ => unreachable!(),
                    }
                }
                let api_that_guard = api_that_guard.unwrap();
                let output_ok =
                    Result::<_, ()>::Ok(crate::api::send::FfiSender::key(&*api_that_guard))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__send__FfiSender_load_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    token: impl CstDecode<SenderToken>,
    persister: impl CstDecode<DartSenderPersister>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "FfiSender_load",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_token = token.cst_decode();
            let api_persister = persister.cst_decode();
            move |context| {
                transform_result_dco::<_, _, crate::api::receive::error::FfiImplementationError>(
                    (move || {
                        let output_ok =
                            crate::api::send::FfiSender::load(api_token, api_persister)?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__send__FfiSender_to_json_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FfiSender>>,
    >,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "FfiSender_to_json",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, crate::api::FfiSerdeJsonError>((move || {
                let mut api_that_guard = None;
                let decode_indices_ =
                    flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                        flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                            &api_that, 0, false,
                        ),
                    ]);
                for i in decode_indices_ {
                    match i {
                        0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                        _ => unreachable!(),
                    }
                }
                let api_that_guard = api_that_guard.unwrap();
                let output_ok = crate::api::send::FfiSender::to_json(&*api_that_guard)?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__receive__ReceiverToken_to_bytes_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ReceiverToken>>,
    >,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ReceiverToken_to_bytes",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let mut api_that_guard = None;
                let decode_indices_ =
                    flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                        flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                            &api_that, 0, false,
                        ),
                    ]);
                for i in decode_indices_ {
                    match i {
                        0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                        _ => unreachable!(),
                    }
                }
                let api_that_guard = api_that_guard.unwrap();
                let output_ok = Result::<_, ()>::Ok(crate::api::receive::ReceiverToken::to_bytes(
                    &*api_that_guard,
                ))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__send__SenderToken_to_bytes_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SenderToken>>,
    >,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "SenderToken_to_bytes",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let mut api_that_guard = None;
                let decode_indices_ =
                    flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                        flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                            &api_that, 0, false,
                        ),
                    ]);
                for i in decode_indices_ {
                    match i {
                        0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                        _ => unreachable!(),
                    }
                }
                let api_that_guard = api_that_guard.unwrap();
                let output_ok =
                    Result::<_, ()>::Ok(crate::api::send::SenderToken::to_bytes(&*api_that_guard))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__io__fetch_ohttp_keys_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ohttp_relay: impl CstDecode<String>,
    payjoin_directory: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "fetch_ohttp_keys",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_ohttp_relay = ohttp_relay.cst_decode();
            let api_payjoin_directory = payjoin_directory.cst_decode();
            move |context| {
                async move {
                    transform_result_dco::<_, _, crate::api::io::error::FfiIoError>(
                        (move || {
                            async move {
                                let output_ok = crate::api::io::fetch_ohttp_keys(
                                    api_ohttp_relay,
                                    api_payjoin_directory,
                                )
                                .await?;
                                Ok(output_ok)
                            }
                        })()
                        .await,
                    )
                }
            }
        },
    )
}
fn wire__crate__api__receive__ffi_input_pair_new_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    txin: impl CstDecode<crate::utils::types::TxIn>,
    psbtin: impl CstDecode<crate::utils::types::PsbtInput>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_input_pair_new",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_txin = txin.cst_decode();
            let api_psbtin = psbtin.cst_decode();
            move |context| {
                transform_result_dco::<_, _, crate::api::receive::error::FfiPsbtInputError>(
                    (move || {
                        let output_ok =
                            crate::api::receive::FfiInputPair::new(api_txin, api_psbtin)?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__receive__ffi_maybe_inputs_owned_check_inputs_not_owned_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::receive::FfiMaybeInputsOwned>,
    is_owned: impl CstDecode<flutter_rust_bridge::DartOpaque>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_maybe_inputs_owned_check_inputs_not_owned",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_is_owned =
                decode_DartFn_Inputs_list_prim_u_8_strict_Output_bool_AnyhowException(
                    is_owned.cst_decode(),
                );
            move |context| {
                transform_result_dco::<_, _, crate::api::receive::error::FfiReplyableError>(
                    (move || {
                        let output_ok =
                            crate::api::receive::FfiMaybeInputsOwned::check_inputs_not_owned(
                                &api_that,
                                api_is_owned,
                            )?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__receive__ffi_maybe_inputs_seen_check_no_inputs_seen_before_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::receive::FfiMaybeInputsSeen>,
    is_known: impl CstDecode<flutter_rust_bridge::DartOpaque>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_maybe_inputs_seen_check_no_inputs_seen_before",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_is_known =
                decode_DartFn_Inputs_out_point_Output_bool_AnyhowException(is_known.cst_decode());
            move |context| {
                transform_result_dco::<_, _, crate::api::receive::error::FfiReplyableError>(
                    (move || {
                        let output_ok =
                            crate::api::receive::FfiMaybeInputsSeen::check_no_inputs_seen_before(
                                &api_that,
                                api_is_known,
                            )?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__receive__ffi_new_receiver_create_impl(
    address: impl CstDecode<String>,
    network: impl CstDecode<crate::utils::types::Network>,
    directory: impl CstDecode<String>,
    ohttp_keys: impl CstDecode<crate::api::uri::FfiOhttpKeys>,
    expire_after: impl CstDecode<Option<u64>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_new_receiver_create",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_address = address.cst_decode();
            let api_network = network.cst_decode();
            let api_directory = directory.cst_decode();
            let api_ohttp_keys = ohttp_keys.cst_decode();
            let api_expire_after = expire_after.cst_decode();
            transform_result_dco::<_, _, crate::api::uri::error::FfiIntoUrlError>((move || {
                let output_ok = crate::api::receive::FfiNewReceiver::create(
                    api_address,
                    api_network,
                    api_directory,
                    api_ohttp_keys,
                    api_expire_after,
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__receive__ffi_new_receiver_persist_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::receive::FfiNewReceiver>,
    persister: impl CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DartReceiverPersister>,
        >,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_new_receiver_persist",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_persister = persister.cst_decode();
            move |context| {
                transform_result_dco::<_, _, crate::api::receive::error::FfiImplementationError>(
                    (move || {
                        let mut api_persister_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_persister,
                                    0,
                                    true,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_persister_guard =
                                        Some(api_persister.lockable_decode_sync_ref_mut())
                                }
                                _ => unreachable!(),
                            }
                        }
                        let mut api_persister_guard = api_persister_guard.unwrap();
                        let output_ok = crate::api::receive::FfiNewReceiver::persist(
                            &api_that,
                            &mut *api_persister_guard,
                        )?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__send__ffi_new_sender_persist_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::send::FfiNewSender>,
    persister: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DartSenderPersister>>,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_new_sender_persist",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_persister = persister.cst_decode();
            move |context| {
                transform_result_dco::<_, _, crate::api::receive::error::FfiImplementationError>(
                    (move || {
                        let mut api_persister_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_persister,
                                    0,
                                    true,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_persister_guard =
                                        Some(api_persister.lockable_decode_sync_ref_mut())
                                }
                                _ => unreachable!(),
                            }
                        }
                        let mut api_persister_guard = api_persister_guard.unwrap();
                        let output_ok = crate::api::send::FfiNewSender::persist(
                            &api_that,
                            &mut *api_persister_guard,
                        )?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__uri__ffi_ohttp_keys_decode_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    bytes: impl CstDecode<Vec<u8>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_ohttp_keys_decode",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_bytes = bytes.cst_decode();
            move |context| {
                transform_result_dco::<_, _, crate::api::ohttp::error::FfiOhttpError>((move || {
                    let output_ok = crate::api::uri::FfiOhttpKeys::decode(api_bytes)?;
                    Ok(output_ok)
                })(
                ))
            }
        },
    )
}
fn wire__crate__api__receive__ffi_outputs_unknown_identify_receiver_outputs_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::receive::FfiOutputsUnknown>,
    is_receiver_output: impl CstDecode<flutter_rust_bridge::DartOpaque>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_outputs_unknown_identify_receiver_outputs",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_is_receiver_output =
                decode_DartFn_Inputs_list_prim_u_8_strict_Output_bool_AnyhowException(
                    is_receiver_output.cst_decode(),
                );
            move |context| {
                transform_result_dco::<_, _, crate::api::receive::error::FfiReplyableError>(
                    (move || {
                        let output_ok =
                            crate::api::receive::FfiOutputsUnknown::identify_receiver_outputs(
                                &api_that,
                                api_is_receiver_output,
                            )?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__receive__ffi_payjoin_proposal_extract_req_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::receive::FfiPayjoinProposal>,
    ohttp_relay: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_payjoin_proposal_extract_req",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_ohttp_relay = ohttp_relay.cst_decode();
            move |context| {
                transform_result_dco::<_, _, crate::api::receive::error::FfiError>((move || {
                    let output_ok = crate::api::receive::FfiPayjoinProposal::extract_req(
                        &api_that,
                        api_ohttp_relay,
                    )?;
                    Ok(output_ok)
                })(
                ))
            }
        },
    )
}
fn wire__crate__api__receive__ffi_payjoin_proposal_process_res_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::receive::FfiPayjoinProposal>,
    res: impl CstDecode<Vec<u8>>,
    ohttp_context: impl CstDecode<crate::utils::types::ClientResponse>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_payjoin_proposal_process_res",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_res = res.cst_decode();
            let api_ohttp_context = ohttp_context.cst_decode();
            move |context| {
                transform_result_dco::<_, _, crate::api::receive::error::FfiError>((move || {
                    let output_ok = crate::api::receive::FfiPayjoinProposal::process_res(
                        &api_that,
                        &api_res,
                        &api_ohttp_context,
                    )?;
                    Ok(output_ok)
                })(
                ))
            }
        },
    )
}
fn wire__crate__api__receive__ffi_payjoin_proposal_psbt_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::receive::FfiPayjoinProposal>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_payjoin_proposal_psbt",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(
                        crate::api::receive::FfiPayjoinProposal::psbt(&api_that),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__receive__ffi_payjoin_proposal_utxos_to_be_locked_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::receive::FfiPayjoinProposal>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_payjoin_proposal_utxos_to_be_locked",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(
                        crate::api::receive::FfiPayjoinProposal::utxos_to_be_locked(&api_that),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__receive__ffi_provisional_proposal_finalize_proposal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::receive::FfiProvisionalProposal>,
    process_psbt: impl CstDecode<flutter_rust_bridge::DartOpaque>,
    min_fee_rate_sat_per_vb: impl CstDecode<Option<u64>>,
    max_fee_rate_sat_per_vb: impl CstDecode<Option<u64>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_provisional_proposal_finalize_proposal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_process_psbt = decode_DartFn_Inputs_String_Output_String_AnyhowException(
                process_psbt.cst_decode(),
            );
            let api_min_fee_rate_sat_per_vb = min_fee_rate_sat_per_vb.cst_decode();
            let api_max_fee_rate_sat_per_vb = max_fee_rate_sat_per_vb.cst_decode();
            move |context| {
                transform_result_dco::<_, _, crate::api::receive::error::FfiReplyableError>(
                    (move || {
                        let output_ok =
                            crate::api::receive::FfiProvisionalProposal::finalize_proposal(
                                &api_that,
                                api_process_psbt,
                                api_min_fee_rate_sat_per_vb,
                                api_max_fee_rate_sat_per_vb,
                            )?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__bitcoin_ffi__ffi_script_new_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    raw_output_script: impl CstDecode<Vec<u8>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_script_new",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_raw_output_script = raw_output_script.cst_decode();
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(crate::api::bitcoin_ffi::FfiScript::new(
                        api_raw_output_script,
                    ))?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__bitcoin_ffi__ffi_script_to_bytes_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::bitcoin_ffi::FfiScript>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_script_to_bytes",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(
                        crate::api::bitcoin_ffi::FfiScript::to_bytes(&api_that),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__send__ffi_sender_builder_always_disable_output_substitution_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::send::FfiSenderBuilder>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_sender_builder_always_disable_output_substitution",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(
                        crate::api::send::FfiSenderBuilder::always_disable_output_substitution(
                            &api_that,
                        ),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__send__ffi_sender_builder_build_non_incentivizing_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::send::FfiSenderBuilder>,
    min_fee_rate: impl CstDecode<u64>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_sender_builder_build_non_incentivizing",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_min_fee_rate = min_fee_rate.cst_decode();
            move |context| {
                transform_result_dco::<_, _, crate::api::send::error::FfiBuildSenderError>(
                    (move || {
                        let output_ok =
                            crate::api::send::FfiSenderBuilder::build_non_incentivizing(
                                &api_that,
                                api_min_fee_rate,
                            )?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__send__ffi_sender_builder_build_recommended_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::send::FfiSenderBuilder>,
    min_fee_rate: impl CstDecode<u64>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_sender_builder_build_recommended",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_min_fee_rate = min_fee_rate.cst_decode();
            move |context| {
                transform_result_dco::<_, _, crate::api::send::error::FfiBuildSenderError>(
                    (move || {
                        let output_ok = crate::api::send::FfiSenderBuilder::build_recommended(
                            &api_that,
                            api_min_fee_rate,
                        )?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__send__ffi_sender_builder_build_with_additional_fee_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::send::FfiSenderBuilder>,
    max_fee_contribution: impl CstDecode<u64>,
    change_index: impl CstDecode<Option<u8>>,
    min_fee_rate: impl CstDecode<u64>,
    clamp_fee_contribution: impl CstDecode<bool>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_sender_builder_build_with_additional_fee",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_max_fee_contribution = max_fee_contribution.cst_decode();
            let api_change_index = change_index.cst_decode();
            let api_min_fee_rate = min_fee_rate.cst_decode();
            let api_clamp_fee_contribution = clamp_fee_contribution.cst_decode();
            move |context| {
                transform_result_dco::<_, _, crate::api::send::error::FfiBuildSenderError>(
                    (move || {
                        let output_ok =
                            crate::api::send::FfiSenderBuilder::build_with_additional_fee(
                                &api_that,
                                api_max_fee_contribution,
                                api_change_index,
                                api_min_fee_rate,
                                api_clamp_fee_contribution,
                            )?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__send__ffi_sender_builder_from_psbt_and_uri_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    psbt_base64: impl CstDecode<String>,
    pj_uri: impl CstDecode<FfiPjUri>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_sender_builder_from_psbt_and_uri",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_psbt_base64 = psbt_base64.cst_decode();
            let api_pj_uri = pj_uri.cst_decode();
            move |context| {
                transform_result_dco::<_, _, crate::api::send::error::FfiBuildSenderError>(
                    (move || {
                        let output_ok = crate::api::send::FfiSenderBuilder::from_psbt_and_uri(
                            api_psbt_base64,
                            api_pj_uri,
                        )?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__receive__ffi_unchecked_proposal_assume_interactive_receiver_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::receive::FfiUncheckedProposal>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_unchecked_proposal_assume_interactive_receiver",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(
                        crate::api::receive::FfiUncheckedProposal::assume_interactive_receiver(
                            &api_that,
                        ),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__receive__ffi_unchecked_proposal_check_broadcast_suitability_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::receive::FfiUncheckedProposal>,
    min_fee_rate: impl CstDecode<Option<u64>>,
    can_broadcast: impl CstDecode<flutter_rust_bridge::DartOpaque>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_unchecked_proposal_check_broadcast_suitability",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_min_fee_rate = min_fee_rate.cst_decode();
            let api_can_broadcast =
                decode_DartFn_Inputs_list_prim_u_8_strict_Output_bool_AnyhowException(
                    can_broadcast.cst_decode(),
                );
            move |context| {
                transform_result_dco::<_, _, crate::api::receive::error::FfiReplyableError>(
                    (move || {
                        let output_ok =
                            crate::api::receive::FfiUncheckedProposal::check_broadcast_suitability(
                                &api_that,
                                api_min_fee_rate,
                                api_can_broadcast,
                            )?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__receive__ffi_unchecked_proposal_extract_err_req_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::receive::FfiUncheckedProposal>,
    err: impl CstDecode<FfiJsonReply>,
    ohttp_relay: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_unchecked_proposal_extract_err_req",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_err = err.cst_decode();
            let api_ohttp_relay = ohttp_relay.cst_decode();
            move |context| {
                transform_result_dco::<_, _, crate::api::receive::error::FfiSessionError>(
                    (move || {
                        let output_ok = crate::api::receive::FfiUncheckedProposal::extract_err_req(
                            &api_that,
                            api_err,
                            api_ohttp_relay,
                        )?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__receive__ffi_unchecked_proposal_extract_tx_to_schedule_broadcast_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::receive::FfiUncheckedProposal>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_unchecked_proposal_extract_tx_to_schedule_broadcast",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(
                        crate::api::receive::FfiUncheckedProposal::extract_tx_to_schedule_broadcast(
                            &api_that,
                        ),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__receive__ffi_unchecked_proposal_process_err_res_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::receive::FfiUncheckedProposal>,
    body: impl CstDecode<Vec<u8>>,
    context: impl CstDecode<crate::utils::types::ClientResponse>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_unchecked_proposal_process_err_res",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_body = body.cst_decode();
            let api_context = context.cst_decode();
            move |context| {
                transform_result_dco::<_, _, crate::api::receive::error::FfiSessionError>(
                    (move || {
                        let output_ok = crate::api::receive::FfiUncheckedProposal::process_err_res(
                            &api_that,
                            &api_body,
                            &api_context,
                        )?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__uri__ffi_uri_address_impl(
    that: impl CstDecode<crate::api::uri::FfiUri>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_uri_address",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(crate::api::uri::FfiUri::address(&api_that))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__uri__ffi_uri_amount_sats_impl(
    that: impl CstDecode<crate::api::uri::FfiUri>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_uri_amount_sats",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok =
                    Result::<_, ()>::Ok(crate::api::uri::FfiUri::amount_sats(&api_that))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__uri__ffi_uri_as_string_impl(
    that: impl CstDecode<crate::api::uri::FfiUri>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_uri_as_string",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(crate::api::uri::FfiUri::as_string(&api_that))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__uri__ffi_uri_check_pj_supported_impl(
    that: impl CstDecode<crate::api::uri::FfiUri>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_uri_check_pj_supported",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, crate::api::uri::error::FfiPjNotSupported>((move || {
                let output_ok = crate::api::uri::FfiUri::check_pj_supported(&api_that)?;
                Ok(output_ok)
            })(
            ))
        },
    )
}
fn wire__crate__api__uri__ffi_uri_parse_impl(
    uri: impl CstDecode<String>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_uri_parse",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_uri = uri.cst_decode();
            transform_result_dco::<_, _, crate::api::uri::error::FfiPjParseError>((move || {
                let output_ok = crate::api::uri::FfiUri::parse(api_uri)?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__uri__ffi_url_as_string_impl(
    that: impl CstDecode<crate::api::uri::FfiUrl>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_url_as_string",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(crate::api::uri::FfiUrl::as_string(&api_that))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__uri__ffi_url_parse_impl(
    url: impl CstDecode<String>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_url_parse",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_url = url.cst_decode();
            transform_result_dco::<_, _, crate::api::uri::error::FfiUrlParseError>((move || {
                let output_ok = crate::api::uri::FfiUrl::parse(api_url)?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__uri__ffi_url_query_impl(
    that: impl CstDecode<crate::api::uri::FfiUrl>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_url_query",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(crate::api::uri::FfiUrl::query(&api_that))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__send__ffi_v_1_context_process_response_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::send::FfiV1Context>,
    response: impl CstDecode<Vec<u8>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_v_1_context_process_response",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_response = response.cst_decode();
            move |context| {
                transform_result_dco::<_, _, crate::api::send::error::FfiResponseError>(
                    (move || {
                        let output_ok = crate::api::send::FfiV1Context::process_response(
                            &api_that,
                            api_response,
                        )?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__send__ffi_v_2_get_context_extract_req_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::send::FfiV2GetContext>,
    ohttp_relay: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_v_2_get_context_extract_req",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_ohttp_relay = ohttp_relay.cst_decode();
            move |context| {
                transform_result_dco::<_, _, crate::api::send::error::FfiCreateRequestError>(
                    (move || {
                        let output_ok = crate::api::send::FfiV2GetContext::extract_req(
                            &api_that,
                            api_ohttp_relay,
                        )?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__send__ffi_v_2_get_context_process_response_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::send::FfiV2GetContext>,
    response: impl CstDecode<Vec<u8>>,
    ohttp_ctx: impl CstDecode<crate::utils::types::ClientResponse>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_v_2_get_context_process_response",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_response = response.cst_decode();
            let api_ohttp_ctx = ohttp_ctx.cst_decode();
            move |context| {
                transform_result_dco::<_, _, crate::api::send::error::FfiResponseError>(
                    (move || {
                        let output_ok = crate::api::send::FfiV2GetContext::process_response(
                            &api_that,
                            &api_response,
                            &api_ohttp_ctx,
                        )?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__send__ffi_v_2_post_context_process_response_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::send::FfiV2PostContext>,
    response: impl CstDecode<Vec<u8>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_v_2_post_context_process_response",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_response = response.cst_decode();
            move |context| {
                transform_result_dco::<_, _, crate::api::send::error::FfiEncapsulationError>(
                    (move || {
                        let output_ok = crate::api::send::FfiV2PostContext::process_response(
                            &api_that,
                            &api_response,
                        )?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__receive__ffi_wants_inputs_commit_inputs_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::receive::FfiWantsInputs>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_wants_inputs_commit_inputs",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(
                        crate::api::receive::FfiWantsInputs::commit_inputs(&api_that),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__receive__ffi_wants_inputs_contribute_inputs_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::receive::FfiWantsInputs>,
    replacement_inputs: impl CstDecode<Vec<crate::api::receive::FfiInputPair>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_wants_inputs_contribute_inputs",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_replacement_inputs = replacement_inputs.cst_decode();
            move |context| {
                transform_result_dco::<_, _, crate::api::receive::error::FfiInputContributionError>(
                    (move || {
                        let output_ok = crate::api::receive::FfiWantsInputs::contribute_inputs(
                            &api_that,
                            api_replacement_inputs,
                        )?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__receive__ffi_wants_inputs_try_preserving_privacy_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::receive::FfiWantsInputs>,
    candidate_inputs: impl CstDecode<Vec<crate::api::receive::FfiInputPair>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_wants_inputs_try_preserving_privacy",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_candidate_inputs = candidate_inputs.cst_decode();
            move |context| {
                transform_result_dco::<_, _, crate::api::receive::error::FfiSelectionError>(
                    (move || {
                        let output_ok =
                            crate::api::receive::FfiWantsInputs::try_preserving_privacy(
                                &api_that,
                                api_candidate_inputs,
                            )?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__receive__ffi_wants_outputs_commit_outputs_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::receive::FfiWantsOutputs>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_wants_outputs_commit_outputs",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(
                        crate::api::receive::FfiWantsOutputs::commit_outputs(&api_that),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__receive__ffi_wants_outputs_output_substitution_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::receive::FfiWantsOutputs>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_wants_outputs_output_substitution",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(
                        crate::api::receive::FfiWantsOutputs::output_substitution(&api_that),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__receive__ffi_wants_outputs_replace_receiver_outputs_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::receive::FfiWantsOutputs>,
    replacement_outputs: impl CstDecode<Vec<crate::utils::types::TxOut>>,
    drain_script: impl CstDecode<crate::api::bitcoin_ffi::FfiScript>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "ffi_wants_outputs_replace_receiver_outputs", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_that = that.cst_decode();let api_replacement_outputs = replacement_outputs.cst_decode();let api_drain_script = drain_script.cst_decode(); move |context|  {
                    transform_result_dco::<_, _, crate::api::receive::error::FfiOutputSubstitutionError>((move ||  {
                         let output_ok = crate::api::receive::FfiWantsOutputs::replace_receiver_outputs(&api_that, api_replacement_outputs, &api_drain_script)?;   Ok(output_ok)
                    })())
                } })
}
fn wire__crate__api__receive__ffi_wants_outputs_substitute_receiver_script_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::receive::FfiWantsOutputs>,
    output_script: impl CstDecode<crate::api::bitcoin_ffi::FfiScript>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "ffi_wants_outputs_substitute_receiver_script", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_that = that.cst_decode();let api_output_script = output_script.cst_decode(); move |context|  {
                    transform_result_dco::<_, _, crate::api::receive::error::FfiOutputSubstitutionError>((move ||  {
                         let output_ok = crate::api::receive::FfiWantsOutputs::substitute_receiver_script(&api_that, &api_output_script)?;   Ok(output_ok)
                    })())
                } })
}

// Section: related_funcs

fn decode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiReceiver_Output_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReceiverToken_AnyhowException(
    dart_opaque: flutter_rust_bridge::DartOpaque,
) -> impl Fn(
    FfiReceiver,
) -> flutter_rust_bridge::DartFnFuture<
    std::result::Result<ReceiverToken, flutter_rust_bridge::for_generated::anyhow::Error>,
> {
    use flutter_rust_bridge::IntoDart;

    async fn body(
        dart_opaque: flutter_rust_bridge::DartOpaque,
        arg0: FfiReceiver,
    ) -> std::result::Result<ReceiverToken, flutter_rust_bridge::for_generated::anyhow::Error> {
        let args = vec![arg0.into_into_dart().into_dart()];
        let message = FLUTTER_RUST_BRIDGE_HANDLER.dart_fn_invoke(dart_opaque, args).await;

        let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
        let action = deserializer.cursor.read_u8().unwrap();
        let ans = match action {
            0 => std::result::Result::Ok(<ReceiverToken>::sse_decode(&mut deserializer)),
            1 => {
                std::result::Result::Err(
                    <flutter_rust_bridge::for_generated::anyhow::Error>::sse_decode(
                        &mut deserializer,
                    ),
                )
            }
            _ => unreachable!(),
        };
        deserializer.end();
        ans
    }

    move |arg0: FfiReceiver| {
        flutter_rust_bridge::for_generated::convert_into_dart_fn_future(body(
            dart_opaque.clone(),
            arg0,
        ))
    }
}
fn decode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiSender_Output_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSenderToken_AnyhowException(
    dart_opaque: flutter_rust_bridge::DartOpaque,
) -> impl Fn(
    FfiSender,
) -> flutter_rust_bridge::DartFnFuture<
    std::result::Result<SenderToken, flutter_rust_bridge::for_generated::anyhow::Error>,
> {
    use flutter_rust_bridge::IntoDart;

    async fn body(
        dart_opaque: flutter_rust_bridge::DartOpaque,
        arg0: FfiSender,
    ) -> std::result::Result<SenderToken, flutter_rust_bridge::for_generated::anyhow::Error> {
        let args = vec![arg0.into_into_dart().into_dart()];
        let message = FLUTTER_RUST_BRIDGE_HANDLER.dart_fn_invoke(dart_opaque, args).await;

        let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
        let action = deserializer.cursor.read_u8().unwrap();
        let ans = match action {
            0 => std::result::Result::Ok(<SenderToken>::sse_decode(&mut deserializer)),
            1 => {
                std::result::Result::Err(
                    <flutter_rust_bridge::for_generated::anyhow::Error>::sse_decode(
                        &mut deserializer,
                    ),
                )
            }
            _ => unreachable!(),
        };
        deserializer.end();
        ans
    }

    move |arg0: FfiSender| {
        flutter_rust_bridge::for_generated::convert_into_dart_fn_future(body(
            dart_opaque.clone(),
            arg0,
        ))
    }
}
fn decode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReceiverToken_Output_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiReceiver_AnyhowException(
    dart_opaque: flutter_rust_bridge::DartOpaque,
) -> impl Fn(
    ReceiverToken,
) -> flutter_rust_bridge::DartFnFuture<
    std::result::Result<FfiReceiver, flutter_rust_bridge::for_generated::anyhow::Error>,
> {
    use flutter_rust_bridge::IntoDart;

    async fn body(
        dart_opaque: flutter_rust_bridge::DartOpaque,
        arg0: ReceiverToken,
    ) -> std::result::Result<FfiReceiver, flutter_rust_bridge::for_generated::anyhow::Error> {
        let args = vec![arg0.into_into_dart().into_dart()];
        let message = FLUTTER_RUST_BRIDGE_HANDLER.dart_fn_invoke(dart_opaque, args).await;

        let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
        let action = deserializer.cursor.read_u8().unwrap();
        let ans = match action {
            0 => std::result::Result::Ok(<FfiReceiver>::sse_decode(&mut deserializer)),
            1 => {
                std::result::Result::Err(
                    <flutter_rust_bridge::for_generated::anyhow::Error>::sse_decode(
                        &mut deserializer,
                    ),
                )
            }
            _ => unreachable!(),
        };
        deserializer.end();
        ans
    }

    move |arg0: ReceiverToken| {
        flutter_rust_bridge::for_generated::convert_into_dart_fn_future(body(
            dart_opaque.clone(),
            arg0,
        ))
    }
}
fn decode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSenderToken_Output_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiSender_AnyhowException(
    dart_opaque: flutter_rust_bridge::DartOpaque,
) -> impl Fn(
    SenderToken,
) -> flutter_rust_bridge::DartFnFuture<
    std::result::Result<FfiSender, flutter_rust_bridge::for_generated::anyhow::Error>,
> {
    use flutter_rust_bridge::IntoDart;

    async fn body(
        dart_opaque: flutter_rust_bridge::DartOpaque,
        arg0: SenderToken,
    ) -> std::result::Result<FfiSender, flutter_rust_bridge::for_generated::anyhow::Error> {
        let args = vec![arg0.into_into_dart().into_dart()];
        let message = FLUTTER_RUST_BRIDGE_HANDLER.dart_fn_invoke(dart_opaque, args).await;

        let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
        let action = deserializer.cursor.read_u8().unwrap();
        let ans = match action {
            0 => std::result::Result::Ok(<FfiSender>::sse_decode(&mut deserializer)),
            1 => {
                std::result::Result::Err(
                    <flutter_rust_bridge::for_generated::anyhow::Error>::sse_decode(
                        &mut deserializer,
                    ),
                )
            }
            _ => unreachable!(),
        };
        deserializer.end();
        ans
    }

    move |arg0: SenderToken| {
        flutter_rust_bridge::for_generated::convert_into_dart_fn_future(body(
            dart_opaque.clone(),
            arg0,
        ))
    }
}
fn decode_DartFn_Inputs_String_Output_String_AnyhowException(
    dart_opaque: flutter_rust_bridge::DartOpaque,
) -> impl Fn(String) -> flutter_rust_bridge::DartFnFuture<String> {
    use flutter_rust_bridge::IntoDart;

    async fn body(dart_opaque: flutter_rust_bridge::DartOpaque, arg0: String) -> String {
        let args = vec![arg0.into_into_dart().into_dart()];
        let message = FLUTTER_RUST_BRIDGE_HANDLER.dart_fn_invoke(dart_opaque, args).await;

        let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
        let action = deserializer.cursor.read_u8().unwrap();
        let ans = match action {
            0 => std::result::Result::Ok(<String>::sse_decode(&mut deserializer)),
            1 => {
                std::result::Result::Err(
                    <flutter_rust_bridge::for_generated::anyhow::Error>::sse_decode(
                        &mut deserializer,
                    ),
                )
            }
            _ => unreachable!(),
        };
        deserializer.end();
        let ans = ans.expect("Dart throws exception but Rust side assume it is not failable");
        ans
    }

    move |arg0: String| {
        flutter_rust_bridge::for_generated::convert_into_dart_fn_future(body(
            dart_opaque.clone(),
            arg0,
        ))
    }
}
fn decode_DartFn_Inputs_list_prim_u_8_strict_Output_bool_AnyhowException(
    dart_opaque: flutter_rust_bridge::DartOpaque,
) -> impl Fn(Vec<u8>) -> flutter_rust_bridge::DartFnFuture<bool> {
    use flutter_rust_bridge::IntoDart;

    async fn body(dart_opaque: flutter_rust_bridge::DartOpaque, arg0: Vec<u8>) -> bool {
        let args = vec![arg0.into_into_dart().into_dart()];
        let message = FLUTTER_RUST_BRIDGE_HANDLER.dart_fn_invoke(dart_opaque, args).await;

        let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
        let action = deserializer.cursor.read_u8().unwrap();
        let ans = match action {
            0 => std::result::Result::Ok(<bool>::sse_decode(&mut deserializer)),
            1 => {
                std::result::Result::Err(
                    <flutter_rust_bridge::for_generated::anyhow::Error>::sse_decode(
                        &mut deserializer,
                    ),
                )
            }
            _ => unreachable!(),
        };
        deserializer.end();
        let ans = ans.expect("Dart throws exception but Rust side assume it is not failable");
        ans
    }

    move |arg0: Vec<u8>| {
        flutter_rust_bridge::for_generated::convert_into_dart_fn_future(body(
            dart_opaque.clone(),
            arg0,
        ))
    }
}
fn decode_DartFn_Inputs_out_point_Output_bool_AnyhowException(
    dart_opaque: flutter_rust_bridge::DartOpaque,
) -> impl Fn(crate::utils::types::OutPoint) -> flutter_rust_bridge::DartFnFuture<bool> {
    use flutter_rust_bridge::IntoDart;

    async fn body(
        dart_opaque: flutter_rust_bridge::DartOpaque,
        arg0: crate::utils::types::OutPoint,
    ) -> bool {
        let args = vec![arg0.into_into_dart().into_dart()];
        let message = FLUTTER_RUST_BRIDGE_HANDLER.dart_fn_invoke(dart_opaque, args).await;

        let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
        let action = deserializer.cursor.read_u8().unwrap();
        let ans = match action {
            0 => std::result::Result::Ok(<bool>::sse_decode(&mut deserializer)),
            1 => {
                std::result::Result::Err(
                    <flutter_rust_bridge::for_generated::anyhow::Error>::sse_decode(
                        &mut deserializer,
                    ),
                )
            }
            _ => unreachable!(),
        };
        deserializer.end();
        let ans = ans.expect("Dart throws exception but Rust side assume it is not failable");
        ans
    }

    move |arg0: crate::utils::types::OutPoint| {
        flutter_rust_bridge::for_generated::convert_into_dart_fn_future(body(
            dart_opaque.clone(),
            arg0,
        ))
    }
}

// Section: dart2rust

impl CstDecode<bool> for bool {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> bool {
        self
    }
}
impl CstDecode<i32> for i32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> i32 {
        self
    }
}
impl CstDecode<isize> for isize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> isize {
        self
    }
}
impl CstDecode<crate::utils::types::Network> for i32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::utils::types::Network {
        match self {
            0 => crate::utils::types::Network::Bitcoin,
            1 => crate::utils::types::Network::Testnet,
            2 => crate::utils::types::Network::Testnet4,
            3 => crate::utils::types::Network::Signet,
            4 => crate::utils::types::Network::Regtest,
            _ => unreachable!("Invalid variant for Network: {}", self),
        }
    }
}
impl CstDecode<u32> for u32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> u32 {
        self
    }
}
impl CstDecode<u64> for u64 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> u64 {
        self
    }
}
impl CstDecode<u8> for u8 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> u8 {
        self
    }
}
impl CstDecode<usize> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> usize {
        self
    }
}
impl SseDecode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <String>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::anyhow::anyhow!("{}", inner);
    }
}

impl SseDecode for RustAutoOpaqueNom<Error> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Error>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_decode(inner);
    }
}

impl SseDecode for RustAutoOpaqueNom<ImplementationError> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ImplementationError>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_decode(inner);
    }
}

impl SseDecode for RustAutoOpaqueNom<InputContributionError> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<InputContributionError>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_decode(inner);
    }
}

impl SseDecode for RustAutoOpaqueNom<IntoUrlError> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<IntoUrlError>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_decode(inner);
    }
}

impl SseDecode for RustAutoOpaqueNom<IoError> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<IoError>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_decode(inner);
    }
}

impl SseDecode for RustAutoOpaqueNom<OhttpError> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OhttpError>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_decode(inner);
    }
}

impl SseDecode for RustAutoOpaqueNom<OutputSubstitutionError> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OutputSubstitutionError>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_decode(inner);
    }
}

impl SseDecode for RustAutoOpaqueNom<PjNotSupported> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PjNotSupported>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_decode(inner);
    }
}

impl SseDecode for RustAutoOpaqueNom<PjParseError> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PjParseError>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_decode(inner);
    }
}

impl SseDecode for RustAutoOpaqueNom<PsbtInputError> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PsbtInputError>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_decode(inner);
    }
}

impl SseDecode for RustAutoOpaqueNom<ReplyableError> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ReplyableError>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_decode(inner);
    }
}

impl SseDecode for RustAutoOpaqueNom<ResponseError> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ResponseError>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_decode(inner);
    }
}

impl SseDecode for RustAutoOpaqueNom<SelectionError> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SelectionError>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_decode(inner);
    }
}

impl SseDecode for RustAutoOpaqueNom<SerdeJsonError> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SerdeJsonError>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_decode(inner);
    }
}

impl SseDecode for RustAutoOpaqueNom<SessionError> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SessionError>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_decode(inner);
    }
}

impl SseDecode for RustAutoOpaqueNom<UrlParseError> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<UrlParseError>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_decode(inner);
    }
}

impl SseDecode for DartReceiverPersister {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DartReceiverPersister>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for DartSenderPersister {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DartSenderPersister>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for FfiJsonReply {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FfiJsonReply>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for FfiPjUri {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FfiPjUri>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for FfiReceiver {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FfiReceiver>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for FfiSender {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FfiSender>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for ImplementationError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ImplementationError>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for OutputSubstitution {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OutputSubstitution>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for ReceiverToken {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ReceiverToken>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for SenderToken {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SenderToken>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for flutter_rust_bridge::DartOpaque {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { flutter_rust_bridge::for_generated::sse_decode_dart_opaque(inner) };
    }
}

impl SseDecode for RustOpaqueNom<bitcoin_ffi::Script> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DartReceiverPersister>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DartSenderPersister>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Error>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FfiJsonReply>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FfiPjUri>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FfiReceiver>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FfiSender>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ImplementationError>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<InputContributionError>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<IntoUrlError>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<IoError>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OhttpError>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OutputSubstitution>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OutputSubstitutionError>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PjNotSupported>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PjParseError>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PsbtInputError>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ReceiverToken>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ReplyableError>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ResponseError>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SelectionError>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SenderToken>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SerdeJsonError>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SessionError>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<UrlParseError>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<payjoin_ffi::OhttpKeys> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<payjoin_ffi::Url> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<payjoin_ffi::receive::InputPair> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<payjoin_ffi::receive::MaybeInputsOwned> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<payjoin_ffi::receive::MaybeInputsSeen> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<payjoin_ffi::receive::NewReceiver> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<payjoin_ffi::receive::OutputsUnknown> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<payjoin_ffi::receive::PayjoinProposal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<payjoin_ffi::receive::ProvisionalProposal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<payjoin_ffi::receive::UncheckedProposal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<payjoin_ffi::receive::WantsInputs> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<payjoin_ffi::receive::WantsOutputs> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<payjoin_ffi::send::NewSender> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<payjoin_ffi::send::SenderBuilder> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<payjoin_ffi::send::V1Context> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<payjoin_ffi::send::V2GetContext> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<payjoin_ffi::send::V2PostContext> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<payjoin_ffi::uri::Uri> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<std::sync::Mutex<core::option::Option<payjoin_ffi::ClientResponse>>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return String::from_utf8(inner).unwrap();
    }
}

impl SseDecode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap() != 0
    }
}

impl SseDecode for crate::utils::types::ClientResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <RustOpaqueNom<
            std::sync::Mutex<core::option::Option<payjoin_ffi::ClientResponse>>,
        >>::sse_decode(deserializer);
        return crate::utils::types::ClientResponse(var_field0);
    }
}

impl SseDecode for crate::api::send::error::FfiBuildSenderError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_msg = <String>::sse_decode(deserializer);
        return crate::api::send::error::FfiBuildSenderError { msg: var_msg };
    }
}

impl SseDecode for crate::api::send::error::FfiCreateRequestError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_msg = <String>::sse_decode(deserializer);
        return crate::api::send::error::FfiCreateRequestError { msg: var_msg };
    }
}

impl SseDecode for crate::api::send::error::FfiEncapsulationError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_msg = <String>::sse_decode(deserializer);
        return crate::api::send::error::FfiEncapsulationError { msg: var_msg };
    }
}

impl SseDecode for crate::api::receive::error::FfiError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <RustAutoOpaqueNom<Error>>::sse_decode(deserializer);
        return crate::api::receive::error::FfiError(var_field0);
    }
}

impl SseDecode for crate::api::receive::error::FfiImplementationError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <RustAutoOpaqueNom<ImplementationError>>::sse_decode(deserializer);
        return crate::api::receive::error::FfiImplementationError(var_field0);
    }
}

impl SseDecode for crate::api::receive::error::FfiInputContributionError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <RustAutoOpaqueNom<InputContributionError>>::sse_decode(deserializer);
        return crate::api::receive::error::FfiInputContributionError(var_field0);
    }
}

impl SseDecode for crate::api::receive::FfiInputPair {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 =
            <RustOpaqueNom<payjoin_ffi::receive::InputPair>>::sse_decode(deserializer);
        return crate::api::receive::FfiInputPair(var_field0);
    }
}

impl SseDecode for crate::api::uri::error::FfiIntoUrlError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <RustAutoOpaqueNom<IntoUrlError>>::sse_decode(deserializer);
        return crate::api::uri::error::FfiIntoUrlError(var_field0);
    }
}

impl SseDecode for crate::api::io::error::FfiIoError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <RustAutoOpaqueNom<IoError>>::sse_decode(deserializer);
        return crate::api::io::error::FfiIoError(var_field0);
    }
}

impl SseDecode for crate::api::receive::FfiMaybeInputsOwned {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 =
            <RustOpaqueNom<payjoin_ffi::receive::MaybeInputsOwned>>::sse_decode(deserializer);
        return crate::api::receive::FfiMaybeInputsOwned(var_field0);
    }
}

impl SseDecode for crate::api::receive::FfiMaybeInputsSeen {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 =
            <RustOpaqueNom<payjoin_ffi::receive::MaybeInputsSeen>>::sse_decode(deserializer);
        return crate::api::receive::FfiMaybeInputsSeen(var_field0);
    }
}

impl SseDecode for crate::api::receive::FfiNewReceiver {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 =
            <RustOpaqueNom<payjoin_ffi::receive::NewReceiver>>::sse_decode(deserializer);
        return crate::api::receive::FfiNewReceiver(var_field0);
    }
}

impl SseDecode for crate::api::send::FfiNewSender {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 =
            <RustOpaqueNom<payjoin_ffi::send::NewSender>>::sse_decode(deserializer);
        return crate::api::send::FfiNewSender(var_field0);
    }
}

impl SseDecode for crate::api::ohttp::error::FfiOhttpError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <RustAutoOpaqueNom<OhttpError>>::sse_decode(deserializer);
        return crate::api::ohttp::error::FfiOhttpError(var_field0);
    }
}

impl SseDecode for crate::api::uri::FfiOhttpKeys {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <RustOpaqueNom<payjoin_ffi::OhttpKeys>>::sse_decode(deserializer);
        return crate::api::uri::FfiOhttpKeys(var_field0);
    }
}

impl SseDecode for crate::api::receive::error::FfiOutputSubstitutionError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <RustAutoOpaqueNom<OutputSubstitutionError>>::sse_decode(deserializer);
        return crate::api::receive::error::FfiOutputSubstitutionError(var_field0);
    }
}

impl SseDecode for crate::api::receive::FfiOutputsUnknown {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 =
            <RustOpaqueNom<payjoin_ffi::receive::OutputsUnknown>>::sse_decode(deserializer);
        return crate::api::receive::FfiOutputsUnknown(var_field0);
    }
}

impl SseDecode for crate::api::receive::FfiPayjoinProposal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 =
            <RustOpaqueNom<payjoin_ffi::receive::PayjoinProposal>>::sse_decode(deserializer);
        return crate::api::receive::FfiPayjoinProposal(var_field0);
    }
}

impl SseDecode for crate::api::uri::error::FfiPjNotSupported {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <RustAutoOpaqueNom<PjNotSupported>>::sse_decode(deserializer);
        return crate::api::uri::error::FfiPjNotSupported(var_field0);
    }
}

impl SseDecode for crate::api::uri::error::FfiPjParseError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <RustAutoOpaqueNom<PjParseError>>::sse_decode(deserializer);
        return crate::api::uri::error::FfiPjParseError(var_field0);
    }
}

impl SseDecode for crate::api::receive::FfiProvisionalProposal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 =
            <RustOpaqueNom<payjoin_ffi::receive::ProvisionalProposal>>::sse_decode(deserializer);
        return crate::api::receive::FfiProvisionalProposal(var_field0);
    }
}

impl SseDecode for crate::api::receive::error::FfiPsbtInputError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <RustAutoOpaqueNom<PsbtInputError>>::sse_decode(deserializer);
        return crate::api::receive::error::FfiPsbtInputError(var_field0);
    }
}

impl SseDecode for crate::api::receive::error::FfiReplyableError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <RustAutoOpaqueNom<ReplyableError>>::sse_decode(deserializer);
        return crate::api::receive::error::FfiReplyableError(var_field0);
    }
}

impl SseDecode for crate::api::send::error::FfiResponseError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <RustAutoOpaqueNom<ResponseError>>::sse_decode(deserializer);
        return crate::api::send::error::FfiResponseError(var_field0);
    }
}

impl SseDecode for crate::api::bitcoin_ffi::FfiScript {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <RustOpaqueNom<bitcoin_ffi::Script>>::sse_decode(deserializer);
        return crate::api::bitcoin_ffi::FfiScript(var_field0);
    }
}

impl SseDecode for crate::api::receive::error::FfiSelectionError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <RustAutoOpaqueNom<SelectionError>>::sse_decode(deserializer);
        return crate::api::receive::error::FfiSelectionError(var_field0);
    }
}

impl SseDecode for crate::api::send::FfiSenderBuilder {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 =
            <RustOpaqueNom<payjoin_ffi::send::SenderBuilder>>::sse_decode(deserializer);
        return crate::api::send::FfiSenderBuilder(var_field0);
    }
}

impl SseDecode for crate::api::FfiSerdeJsonError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <RustAutoOpaqueNom<SerdeJsonError>>::sse_decode(deserializer);
        return crate::api::FfiSerdeJsonError(var_field0);
    }
}

impl SseDecode for crate::api::receive::error::FfiSessionError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <RustAutoOpaqueNom<SessionError>>::sse_decode(deserializer);
        return crate::api::receive::error::FfiSessionError(var_field0);
    }
}

impl SseDecode for crate::api::receive::FfiUncheckedProposal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 =
            <RustOpaqueNom<payjoin_ffi::receive::UncheckedProposal>>::sse_decode(deserializer);
        return crate::api::receive::FfiUncheckedProposal(var_field0);
    }
}

impl SseDecode for crate::api::uri::FfiUri {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <RustOpaqueNom<payjoin_ffi::uri::Uri>>::sse_decode(deserializer);
        return crate::api::uri::FfiUri(var_field0);
    }
}

impl SseDecode for crate::api::uri::FfiUrl {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <RustOpaqueNom<payjoin_ffi::Url>>::sse_decode(deserializer);
        return crate::api::uri::FfiUrl(var_field0);
    }
}

impl SseDecode for crate::api::uri::error::FfiUrlParseError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <RustAutoOpaqueNom<UrlParseError>>::sse_decode(deserializer);
        return crate::api::uri::error::FfiUrlParseError(var_field0);
    }
}

impl SseDecode for crate::api::send::FfiV1Context {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 =
            <RustOpaqueNom<payjoin_ffi::send::V1Context>>::sse_decode(deserializer);
        return crate::api::send::FfiV1Context(var_field0);
    }
}

impl SseDecode for crate::api::send::FfiV2GetContext {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 =
            <RustOpaqueNom<payjoin_ffi::send::V2GetContext>>::sse_decode(deserializer);
        return crate::api::send::FfiV2GetContext(var_field0);
    }
}

impl SseDecode for crate::api::send::FfiV2PostContext {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 =
            <RustOpaqueNom<payjoin_ffi::send::V2PostContext>>::sse_decode(deserializer);
        return crate::api::send::FfiV2PostContext(var_field0);
    }
}

impl SseDecode for crate::api::receive::FfiWantsInputs {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 =
            <RustOpaqueNom<payjoin_ffi::receive::WantsInputs>>::sse_decode(deserializer);
        return crate::api::receive::FfiWantsInputs(var_field0);
    }
}

impl SseDecode for crate::api::receive::FfiWantsOutputs {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 =
            <RustOpaqueNom<payjoin_ffi::receive::WantsOutputs>>::sse_decode(deserializer);
        return crate::api::receive::FfiWantsOutputs(var_field0);
    }
}

impl SseDecode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for isize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i64::<NativeEndian>().unwrap() as _
    }
}

impl SseDecode for Vec<crate::api::receive::FfiInputPair> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::receive::FfiInputPair>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<Vec<u8>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<Vec<u8>>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::utils::types::OutPoint> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::utils::types::OutPoint>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u8>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::utils::types::TxOut> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::utils::types::TxOut>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for crate::utils::types::Network {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::utils::types::Network::Bitcoin,
            1 => crate::utils::types::Network::Testnet,
            2 => crate::utils::types::Network::Testnet4,
            3 => crate::utils::types::Network::Signet,
            4 => crate::utils::types::Network::Regtest,
            _ => unreachable!("Invalid variant for Network: {}", inner),
        };
    }
}

impl SseDecode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<String>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::bitcoin_ffi::FfiScript> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::bitcoin_ffi::FfiScript>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::receive::FfiUncheckedProposal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::receive::FfiUncheckedProposal>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::utils::types::TxOut> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::utils::types::TxOut>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<u64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<u64>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<u8>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for crate::utils::types::OutPoint {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_txid = <String>::sse_decode(deserializer);
        let mut var_vout = <u32>::sse_decode(deserializer);
        return crate::utils::types::OutPoint { txid: var_txid, vout: var_vout };
    }
}

impl SseDecode for crate::utils::types::PsbtInput {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_witnessUtxo = <Option<crate::utils::types::TxOut>>::sse_decode(deserializer);
        let mut var_redeemScript =
            <Option<crate::api::bitcoin_ffi::FfiScript>>::sse_decode(deserializer);
        let mut var_witnessScript =
            <Option<crate::api::bitcoin_ffi::FfiScript>>::sse_decode(deserializer);
        return crate::utils::types::PsbtInput {
            witness_utxo: var_witnessUtxo,
            redeem_script: var_redeemScript,
            witness_script: var_witnessScript,
        };
    }
}

impl SseDecode for (crate::utils::types::Request, crate::utils::types::ClientResponse) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <crate::utils::types::Request>::sse_decode(deserializer);
        let mut var_field1 = <crate::utils::types::ClientResponse>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for (crate::utils::types::Request, crate::api::send::FfiV1Context) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <crate::utils::types::Request>::sse_decode(deserializer);
        let mut var_field1 = <crate::api::send::FfiV1Context>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for (crate::utils::types::Request, crate::api::send::FfiV2PostContext) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <crate::utils::types::Request>::sse_decode(deserializer);
        let mut var_field1 = <crate::api::send::FfiV2PostContext>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for crate::utils::types::Request {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_url = <crate::api::uri::FfiUrl>::sse_decode(deserializer);
        let mut var_contentType = <String>::sse_decode(deserializer);
        let mut var_body = <Vec<u8>>::sse_decode(deserializer);
        return crate::utils::types::Request {
            url: var_url,
            content_type: var_contentType,
            body: var_body,
        };
    }
}

impl SseDecode for crate::utils::types::TxIn {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_previousOutput = <crate::utils::types::OutPoint>::sse_decode(deserializer);
        let mut var_scriptSig = <crate::api::bitcoin_ffi::FfiScript>::sse_decode(deserializer);
        let mut var_sequence = <u32>::sse_decode(deserializer);
        let mut var_witness = <Vec<Vec<u8>>>::sse_decode(deserializer);
        return crate::utils::types::TxIn {
            previous_output: var_previousOutput,
            script_sig: var_scriptSig,
            sequence: var_sequence,
            witness: var_witness,
        };
    }
}

impl SseDecode for crate::utils::types::TxOut {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_value = <u64>::sse_decode(deserializer);
        let mut var_scriptPubkey = <Vec<u8>>::sse_decode(deserializer);
        return crate::utils::types::TxOut { value: var_value, script_pubkey: var_scriptPubkey };
    }
}

impl SseDecode for u32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap()
    }
}

impl SseDecode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {}
}

impl SseDecode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
    }
}

fn pde_ffi_dispatcher_primary_impl(
    func_id: i32,
    port: flutter_rust_bridge::for_generated::MessagePort,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        _ => unreachable!(),
    }
}

fn pde_ffi_dispatcher_sync_impl(
    func_id: i32,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        _ => unreachable!(),
    }
}

// Section: rust2dart

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<DartReceiverPersister> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<DartReceiverPersister>
{
}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<DartReceiverPersister>>
    for DartReceiverPersister
{
    fn into_into_dart(self) -> FrbWrapper<DartReceiverPersister> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<DartSenderPersister> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<DartSenderPersister>
{
}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<DartSenderPersister>> for DartSenderPersister {
    fn into_into_dart(self) -> FrbWrapper<DartSenderPersister> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<FfiJsonReply> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<FfiJsonReply> {}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<FfiJsonReply>> for FfiJsonReply {
    fn into_into_dart(self) -> FrbWrapper<FfiJsonReply> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<FfiPjUri> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<FfiPjUri> {}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<FfiPjUri>> for FfiPjUri {
    fn into_into_dart(self) -> FrbWrapper<FfiPjUri> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<FfiReceiver> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<FfiReceiver> {}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<FfiReceiver>> for FfiReceiver {
    fn into_into_dart(self) -> FrbWrapper<FfiReceiver> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<FfiSender> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<FfiSender> {}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<FfiSender>> for FfiSender {
    fn into_into_dart(self) -> FrbWrapper<FfiSender> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<ImplementationError> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<ImplementationError>
{
}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<ImplementationError>> for ImplementationError {
    fn into_into_dart(self) -> FrbWrapper<ImplementationError> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<OutputSubstitution> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<OutputSubstitution>
{
}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<OutputSubstitution>> for OutputSubstitution {
    fn into_into_dart(self) -> FrbWrapper<OutputSubstitution> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<ReceiverToken> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<ReceiverToken> {}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<ReceiverToken>> for ReceiverToken {
    fn into_into_dart(self) -> FrbWrapper<ReceiverToken> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<SenderToken> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<SenderToken> {}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<SenderToken>> for SenderToken {
    fn into_into_dart(self) -> FrbWrapper<SenderToken> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::utils::types::ClientResponse {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::utils::types::ClientResponse
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::utils::types::ClientResponse>
    for crate::utils::types::ClientResponse
{
    fn into_into_dart(self) -> crate::utils::types::ClientResponse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::send::error::FfiBuildSenderError {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.msg.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::send::error::FfiBuildSenderError
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::send::error::FfiBuildSenderError>
    for crate::api::send::error::FfiBuildSenderError
{
    fn into_into_dart(self) -> crate::api::send::error::FfiBuildSenderError {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::send::error::FfiCreateRequestError {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.msg.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::send::error::FfiCreateRequestError
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::send::error::FfiCreateRequestError>
    for crate::api::send::error::FfiCreateRequestError
{
    fn into_into_dart(self) -> crate::api::send::error::FfiCreateRequestError {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::send::error::FfiEncapsulationError {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.msg.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::send::error::FfiEncapsulationError
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::send::error::FfiEncapsulationError>
    for crate::api::send::error::FfiEncapsulationError
{
    fn into_into_dart(self) -> crate::api::send::error::FfiEncapsulationError {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::receive::error::FfiError {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::receive::error::FfiError
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::receive::error::FfiError>
    for crate::api::receive::error::FfiError
{
    fn into_into_dart(self) -> crate::api::receive::error::FfiError {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::receive::error::FfiImplementationError {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::receive::error::FfiImplementationError
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::receive::error::FfiImplementationError>
    for crate::api::receive::error::FfiImplementationError
{
    fn into_into_dart(self) -> crate::api::receive::error::FfiImplementationError {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::receive::error::FfiInputContributionError {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::receive::error::FfiInputContributionError
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::receive::error::FfiInputContributionError>
    for crate::api::receive::error::FfiInputContributionError
{
    fn into_into_dart(self) -> crate::api::receive::error::FfiInputContributionError {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::receive::FfiInputPair {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::receive::FfiInputPair
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::receive::FfiInputPair>
    for crate::api::receive::FfiInputPair
{
    fn into_into_dart(self) -> crate::api::receive::FfiInputPair {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::uri::error::FfiIntoUrlError {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::uri::error::FfiIntoUrlError
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::uri::error::FfiIntoUrlError>
    for crate::api::uri::error::FfiIntoUrlError
{
    fn into_into_dart(self) -> crate::api::uri::error::FfiIntoUrlError {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::io::error::FfiIoError {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::io::error::FfiIoError
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::io::error::FfiIoError>
    for crate::api::io::error::FfiIoError
{
    fn into_into_dart(self) -> crate::api::io::error::FfiIoError {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::receive::FfiMaybeInputsOwned {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::receive::FfiMaybeInputsOwned
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::receive::FfiMaybeInputsOwned>
    for crate::api::receive::FfiMaybeInputsOwned
{
    fn into_into_dart(self) -> crate::api::receive::FfiMaybeInputsOwned {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::receive::FfiMaybeInputsSeen {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::receive::FfiMaybeInputsSeen
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::receive::FfiMaybeInputsSeen>
    for crate::api::receive::FfiMaybeInputsSeen
{
    fn into_into_dart(self) -> crate::api::receive::FfiMaybeInputsSeen {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::receive::FfiNewReceiver {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::receive::FfiNewReceiver
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::receive::FfiNewReceiver>
    for crate::api::receive::FfiNewReceiver
{
    fn into_into_dart(self) -> crate::api::receive::FfiNewReceiver {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::send::FfiNewSender {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::send::FfiNewSender
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::send::FfiNewSender>
    for crate::api::send::FfiNewSender
{
    fn into_into_dart(self) -> crate::api::send::FfiNewSender {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::ohttp::error::FfiOhttpError {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::ohttp::error::FfiOhttpError
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::ohttp::error::FfiOhttpError>
    for crate::api::ohttp::error::FfiOhttpError
{
    fn into_into_dart(self) -> crate::api::ohttp::error::FfiOhttpError {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::uri::FfiOhttpKeys {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::uri::FfiOhttpKeys {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::uri::FfiOhttpKeys>
    for crate::api::uri::FfiOhttpKeys
{
    fn into_into_dart(self) -> crate::api::uri::FfiOhttpKeys {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::receive::error::FfiOutputSubstitutionError {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::receive::error::FfiOutputSubstitutionError
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::receive::error::FfiOutputSubstitutionError>
    for crate::api::receive::error::FfiOutputSubstitutionError
{
    fn into_into_dart(self) -> crate::api::receive::error::FfiOutputSubstitutionError {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::receive::FfiOutputsUnknown {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::receive::FfiOutputsUnknown
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::receive::FfiOutputsUnknown>
    for crate::api::receive::FfiOutputsUnknown
{
    fn into_into_dart(self) -> crate::api::receive::FfiOutputsUnknown {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::receive::FfiPayjoinProposal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::receive::FfiPayjoinProposal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::receive::FfiPayjoinProposal>
    for crate::api::receive::FfiPayjoinProposal
{
    fn into_into_dart(self) -> crate::api::receive::FfiPayjoinProposal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::uri::error::FfiPjNotSupported {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::uri::error::FfiPjNotSupported
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::uri::error::FfiPjNotSupported>
    for crate::api::uri::error::FfiPjNotSupported
{
    fn into_into_dart(self) -> crate::api::uri::error::FfiPjNotSupported {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::uri::error::FfiPjParseError {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::uri::error::FfiPjParseError
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::uri::error::FfiPjParseError>
    for crate::api::uri::error::FfiPjParseError
{
    fn into_into_dart(self) -> crate::api::uri::error::FfiPjParseError {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::receive::FfiProvisionalProposal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::receive::FfiProvisionalProposal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::receive::FfiProvisionalProposal>
    for crate::api::receive::FfiProvisionalProposal
{
    fn into_into_dart(self) -> crate::api::receive::FfiProvisionalProposal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::receive::error::FfiPsbtInputError {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::receive::error::FfiPsbtInputError
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::receive::error::FfiPsbtInputError>
    for crate::api::receive::error::FfiPsbtInputError
{
    fn into_into_dart(self) -> crate::api::receive::error::FfiPsbtInputError {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::receive::error::FfiReplyableError {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::receive::error::FfiReplyableError
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::receive::error::FfiReplyableError>
    for crate::api::receive::error::FfiReplyableError
{
    fn into_into_dart(self) -> crate::api::receive::error::FfiReplyableError {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::send::error::FfiResponseError {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::send::error::FfiResponseError
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::send::error::FfiResponseError>
    for crate::api::send::error::FfiResponseError
{
    fn into_into_dart(self) -> crate::api::send::error::FfiResponseError {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::bitcoin_ffi::FfiScript {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::bitcoin_ffi::FfiScript
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::bitcoin_ffi::FfiScript>
    for crate::api::bitcoin_ffi::FfiScript
{
    fn into_into_dart(self) -> crate::api::bitcoin_ffi::FfiScript {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::receive::error::FfiSelectionError {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::receive::error::FfiSelectionError
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::receive::error::FfiSelectionError>
    for crate::api::receive::error::FfiSelectionError
{
    fn into_into_dart(self) -> crate::api::receive::error::FfiSelectionError {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::send::FfiSenderBuilder {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::send::FfiSenderBuilder
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::send::FfiSenderBuilder>
    for crate::api::send::FfiSenderBuilder
{
    fn into_into_dart(self) -> crate::api::send::FfiSenderBuilder {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::FfiSerdeJsonError {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::FfiSerdeJsonError {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::FfiSerdeJsonError>
    for crate::api::FfiSerdeJsonError
{
    fn into_into_dart(self) -> crate::api::FfiSerdeJsonError {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::receive::error::FfiSessionError {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::receive::error::FfiSessionError
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::receive::error::FfiSessionError>
    for crate::api::receive::error::FfiSessionError
{
    fn into_into_dart(self) -> crate::api::receive::error::FfiSessionError {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::receive::FfiUncheckedProposal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::receive::FfiUncheckedProposal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::receive::FfiUncheckedProposal>
    for crate::api::receive::FfiUncheckedProposal
{
    fn into_into_dart(self) -> crate::api::receive::FfiUncheckedProposal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::uri::FfiUri {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::uri::FfiUri {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::uri::FfiUri> for crate::api::uri::FfiUri {
    fn into_into_dart(self) -> crate::api::uri::FfiUri {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::uri::FfiUrl {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::uri::FfiUrl {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::uri::FfiUrl> for crate::api::uri::FfiUrl {
    fn into_into_dart(self) -> crate::api::uri::FfiUrl {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::uri::error::FfiUrlParseError {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::uri::error::FfiUrlParseError
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::uri::error::FfiUrlParseError>
    for crate::api::uri::error::FfiUrlParseError
{
    fn into_into_dart(self) -> crate::api::uri::error::FfiUrlParseError {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::send::FfiV1Context {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::send::FfiV1Context
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::send::FfiV1Context>
    for crate::api::send::FfiV1Context
{
    fn into_into_dart(self) -> crate::api::send::FfiV1Context {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::send::FfiV2GetContext {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::send::FfiV2GetContext
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::send::FfiV2GetContext>
    for crate::api::send::FfiV2GetContext
{
    fn into_into_dart(self) -> crate::api::send::FfiV2GetContext {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::send::FfiV2PostContext {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::send::FfiV2PostContext
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::send::FfiV2PostContext>
    for crate::api::send::FfiV2PostContext
{
    fn into_into_dart(self) -> crate::api::send::FfiV2PostContext {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::receive::FfiWantsInputs {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::receive::FfiWantsInputs
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::receive::FfiWantsInputs>
    for crate::api::receive::FfiWantsInputs
{
    fn into_into_dart(self) -> crate::api::receive::FfiWantsInputs {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::receive::FfiWantsOutputs {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::receive::FfiWantsOutputs
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::receive::FfiWantsOutputs>
    for crate::api::receive::FfiWantsOutputs
{
    fn into_into_dart(self) -> crate::api::receive::FfiWantsOutputs {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::utils::types::Network {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Bitcoin => 0.into_dart(),
            Self::Testnet => 1.into_dart(),
            Self::Testnet4 => 2.into_dart(),
            Self::Signet => 3.into_dart(),
            Self::Regtest => 4.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::utils::types::Network {}
impl flutter_rust_bridge::IntoIntoDart<crate::utils::types::Network>
    for crate::utils::types::Network
{
    fn into_into_dart(self) -> crate::utils::types::Network {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::utils::types::OutPoint {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.txid.into_into_dart().into_dart(), self.vout.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::utils::types::OutPoint {}
impl flutter_rust_bridge::IntoIntoDart<crate::utils::types::OutPoint>
    for crate::utils::types::OutPoint
{
    fn into_into_dart(self) -> crate::utils::types::OutPoint {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::utils::types::PsbtInput {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.witness_utxo.into_into_dart().into_dart(),
            self.redeem_script.into_into_dart().into_dart(),
            self.witness_script.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::utils::types::PsbtInput
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::utils::types::PsbtInput>
    for crate::utils::types::PsbtInput
{
    fn into_into_dart(self) -> crate::utils::types::PsbtInput {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::utils::types::Request {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.url.into_into_dart().into_dart(),
            self.content_type.into_into_dart().into_dart(),
            self.body.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::utils::types::Request {}
impl flutter_rust_bridge::IntoIntoDart<crate::utils::types::Request>
    for crate::utils::types::Request
{
    fn into_into_dart(self) -> crate::utils::types::Request {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::utils::types::TxIn {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.previous_output.into_into_dart().into_dart(),
            self.script_sig.into_into_dart().into_dart(),
            self.sequence.into_into_dart().into_dart(),
            self.witness.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::utils::types::TxIn {}
impl flutter_rust_bridge::IntoIntoDart<crate::utils::types::TxIn> for crate::utils::types::TxIn {
    fn into_into_dart(self) -> crate::utils::types::TxIn {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::utils::types::TxOut {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.value.into_into_dart().into_dart(), self.script_pubkey.into_into_dart().into_dart()]
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::utils::types::TxOut {}
impl flutter_rust_bridge::IntoIntoDart<crate::utils::types::TxOut> for crate::utils::types::TxOut {
    fn into_into_dart(self) -> crate::utils::types::TxOut {
        self
    }
}

impl SseEncode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(format!("{:?}", self), serializer);
    }
}

impl SseEncode for RustAutoOpaqueNom<Error> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Error>>>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_encode(self),
            serializer,
        );
    }
}

impl SseEncode for RustAutoOpaqueNom<ImplementationError> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< ImplementationError>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_encode(self), serializer);
    }
}

impl SseEncode for RustAutoOpaqueNom<InputContributionError> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<InputContributionError>,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_encode(self),
            serializer,
        );
    }
}

impl SseEncode for RustAutoOpaqueNom<IntoUrlError> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< IntoUrlError>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_encode(self), serializer);
    }
}

impl SseEncode for RustAutoOpaqueNom<IoError> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< IoError>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_encode(self), serializer);
    }
}

impl SseEncode for RustAutoOpaqueNom<OhttpError> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< OhttpError>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_encode(self), serializer);
    }
}

impl SseEncode for RustAutoOpaqueNom<OutputSubstitutionError> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OutputSubstitutionError>,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_encode(self),
            serializer,
        );
    }
}

impl SseEncode for RustAutoOpaqueNom<PjNotSupported> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< PjNotSupported>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_encode(self), serializer);
    }
}

impl SseEncode for RustAutoOpaqueNom<PjParseError> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< PjParseError>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_encode(self), serializer);
    }
}

impl SseEncode for RustAutoOpaqueNom<PsbtInputError> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< PsbtInputError>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_encode(self), serializer);
    }
}

impl SseEncode for RustAutoOpaqueNom<ReplyableError> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< ReplyableError>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_encode(self), serializer);
    }
}

impl SseEncode for RustAutoOpaqueNom<ResponseError> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< ResponseError>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_encode(self), serializer);
    }
}

impl SseEncode for RustAutoOpaqueNom<SelectionError> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< SelectionError>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_encode(self), serializer);
    }
}

impl SseEncode for RustAutoOpaqueNom<SerdeJsonError> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< SerdeJsonError>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_encode(self), serializer);
    }
}

impl SseEncode for RustAutoOpaqueNom<SessionError> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< SessionError>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_encode(self), serializer);
    }
}

impl SseEncode for RustAutoOpaqueNom<UrlParseError> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< UrlParseError>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_encode(self), serializer);
    }
}

impl SseEncode for DartReceiverPersister {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DartReceiverPersister>,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for DartSenderPersister {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DartSenderPersister>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self), serializer);
    }
}

impl SseEncode for FfiJsonReply {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FfiJsonReply>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self), serializer);
    }
}

impl SseEncode for FfiPjUri {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FfiPjUri>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self), serializer);
    }
}

impl SseEncode for FfiReceiver {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FfiReceiver>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self), serializer);
    }
}

impl SseEncode for FfiSender {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FfiSender>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self), serializer);
    }
}

impl SseEncode for ImplementationError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< ImplementationError>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self), serializer);
    }
}

impl SseEncode for OutputSubstitution {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OutputSubstitution>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self), serializer);
    }
}

impl SseEncode for ReceiverToken {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ReceiverToken>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self), serializer);
    }
}

impl SseEncode for SenderToken {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SenderToken>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self), serializer);
    }
}

impl SseEncode for flutter_rust_bridge::DartOpaque {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <usize>::sse_encode(self.encode(), serializer);
    }
}

impl SseEncode for RustOpaqueNom<bitcoin_ffi::Script> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DartReceiverPersister>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DartSenderPersister>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Error>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FfiJsonReply>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FfiPjUri>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FfiReceiver>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FfiSender>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ImplementationError>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<InputContributionError>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<IntoUrlError>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<IoError>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OhttpError>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OutputSubstitution>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OutputSubstitutionError>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PjNotSupported>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PjParseError>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PsbtInputError>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ReceiverToken>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ReplyableError>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ResponseError>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SelectionError>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SenderToken>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SerdeJsonError>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SessionError>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<UrlParseError>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<payjoin_ffi::OhttpKeys> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<payjoin_ffi::Url> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<payjoin_ffi::receive::InputPair> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<payjoin_ffi::receive::MaybeInputsOwned> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<payjoin_ffi::receive::MaybeInputsSeen> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<payjoin_ffi::receive::NewReceiver> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<payjoin_ffi::receive::OutputsUnknown> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<payjoin_ffi::receive::PayjoinProposal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<payjoin_ffi::receive::ProvisionalProposal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<payjoin_ffi::receive::UncheckedProposal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<payjoin_ffi::receive::WantsInputs> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<payjoin_ffi::receive::WantsOutputs> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<payjoin_ffi::send::NewSender> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<payjoin_ffi::send::SenderBuilder> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<payjoin_ffi::send::V1Context> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<payjoin_ffi::send::V2GetContext> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<payjoin_ffi::send::V2PostContext> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<payjoin_ffi::uri::Uri> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<std::sync::Mutex<core::option::Option<payjoin_ffi::ClientResponse>>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
    }
}

impl SseEncode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self as _).unwrap();
    }
}

impl SseEncode for crate::utils::types::ClientResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<std :: sync :: Mutex < core :: option :: Option < payjoin_ffi :: ClientResponse > >>>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::send::error::FfiBuildSenderError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.msg, serializer);
    }
}

impl SseEncode for crate::api::send::error::FfiCreateRequestError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.msg, serializer);
    }
}

impl SseEncode for crate::api::send::error::FfiEncapsulationError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.msg, serializer);
    }
}

impl SseEncode for crate::api::receive::error::FfiError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustAutoOpaqueNom<Error>>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::receive::error::FfiImplementationError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustAutoOpaqueNom<ImplementationError>>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::receive::error::FfiInputContributionError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustAutoOpaqueNom<InputContributionError>>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::receive::FfiInputPair {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<payjoin_ffi::receive::InputPair>>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::uri::error::FfiIntoUrlError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustAutoOpaqueNom<IntoUrlError>>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::io::error::FfiIoError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustAutoOpaqueNom<IoError>>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::receive::FfiMaybeInputsOwned {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<payjoin_ffi::receive::MaybeInputsOwned>>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::receive::FfiMaybeInputsSeen {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<payjoin_ffi::receive::MaybeInputsSeen>>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::receive::FfiNewReceiver {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<payjoin_ffi::receive::NewReceiver>>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::send::FfiNewSender {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<payjoin_ffi::send::NewSender>>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::ohttp::error::FfiOhttpError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustAutoOpaqueNom<OhttpError>>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::uri::FfiOhttpKeys {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<payjoin_ffi::OhttpKeys>>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::receive::error::FfiOutputSubstitutionError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustAutoOpaqueNom<OutputSubstitutionError>>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::receive::FfiOutputsUnknown {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<payjoin_ffi::receive::OutputsUnknown>>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::receive::FfiPayjoinProposal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<payjoin_ffi::receive::PayjoinProposal>>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::uri::error::FfiPjNotSupported {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustAutoOpaqueNom<PjNotSupported>>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::uri::error::FfiPjParseError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustAutoOpaqueNom<PjParseError>>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::receive::FfiProvisionalProposal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<payjoin_ffi::receive::ProvisionalProposal>>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::receive::error::FfiPsbtInputError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustAutoOpaqueNom<PsbtInputError>>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::receive::error::FfiReplyableError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustAutoOpaqueNom<ReplyableError>>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::send::error::FfiResponseError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustAutoOpaqueNom<ResponseError>>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::bitcoin_ffi::FfiScript {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<bitcoin_ffi::Script>>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::receive::error::FfiSelectionError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustAutoOpaqueNom<SelectionError>>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::send::FfiSenderBuilder {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<payjoin_ffi::send::SenderBuilder>>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::FfiSerdeJsonError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustAutoOpaqueNom<SerdeJsonError>>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::receive::error::FfiSessionError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustAutoOpaqueNom<SessionError>>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::receive::FfiUncheckedProposal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<payjoin_ffi::receive::UncheckedProposal>>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::uri::FfiUri {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<payjoin_ffi::uri::Uri>>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::uri::FfiUrl {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<payjoin_ffi::Url>>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::uri::error::FfiUrlParseError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustAutoOpaqueNom<UrlParseError>>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::send::FfiV1Context {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<payjoin_ffi::send::V1Context>>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::send::FfiV2GetContext {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<payjoin_ffi::send::V2GetContext>>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::send::FfiV2PostContext {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<payjoin_ffi::send::V2PostContext>>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::receive::FfiWantsInputs {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<payjoin_ffi::receive::WantsInputs>>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::receive::FfiWantsOutputs {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<payjoin_ffi::receive::WantsOutputs>>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for isize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i64::<NativeEndian>(self as _).unwrap();
    }
}

impl SseEncode for Vec<crate::api::receive::FfiInputPair> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::receive::FfiInputPair>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<Vec<u8>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <Vec<u8>>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::utils::types::OutPoint> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::utils::types::OutPoint>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <u8>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::utils::types::TxOut> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::utils::types::TxOut>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for crate::utils::types::Network {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::utils::types::Network::Bitcoin => 0,
                crate::utils::types::Network::Testnet => 1,
                crate::utils::types::Network::Testnet4 => 2,
                crate::utils::types::Network::Signet => 3,
                crate::utils::types::Network::Regtest => 4,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <String>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::bitcoin_ffi::FfiScript> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::bitcoin_ffi::FfiScript>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::receive::FfiUncheckedProposal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::receive::FfiUncheckedProposal>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::utils::types::TxOut> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::utils::types::TxOut>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<u64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <u64>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <u8>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for crate::utils::types::OutPoint {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.txid, serializer);
        <u32>::sse_encode(self.vout, serializer);
    }
}

impl SseEncode for crate::utils::types::PsbtInput {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<crate::utils::types::TxOut>>::sse_encode(self.witness_utxo, serializer);
        <Option<crate::api::bitcoin_ffi::FfiScript>>::sse_encode(self.redeem_script, serializer);
        <Option<crate::api::bitcoin_ffi::FfiScript>>::sse_encode(self.witness_script, serializer);
    }
}

impl SseEncode for (crate::utils::types::Request, crate::utils::types::ClientResponse) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::utils::types::Request>::sse_encode(self.0, serializer);
        <crate::utils::types::ClientResponse>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for (crate::utils::types::Request, crate::api::send::FfiV1Context) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::utils::types::Request>::sse_encode(self.0, serializer);
        <crate::api::send::FfiV1Context>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for (crate::utils::types::Request, crate::api::send::FfiV2PostContext) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::utils::types::Request>::sse_encode(self.0, serializer);
        <crate::api::send::FfiV2PostContext>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for crate::utils::types::Request {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::uri::FfiUrl>::sse_encode(self.url, serializer);
        <String>::sse_encode(self.content_type, serializer);
        <Vec<u8>>::sse_encode(self.body, serializer);
    }
}

impl SseEncode for crate::utils::types::TxIn {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::utils::types::OutPoint>::sse_encode(self.previous_output, serializer);
        <crate::api::bitcoin_ffi::FfiScript>::sse_encode(self.script_sig, serializer);
        <u32>::sse_encode(self.sequence, serializer);
        <Vec<Vec<u8>>>::sse_encode(self.witness, serializer);
    }
}

impl SseEncode for crate::utils::types::TxOut {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u64>::sse_encode(self.value, serializer);
        <Vec<u8>>::sse_encode(self.script_pubkey, serializer);
    }
}

impl SseEncode for u32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self).unwrap();
    }
}

impl SseEncode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u64::<NativeEndian>(self as _).unwrap();
    }
}

#[cfg(not(target_family = "wasm"))]
mod io {
    // This file is automatically generated, so please do not edit it.
    // @generated by `flutter_rust_bridge`@ 2.9.0.

    // Section: imports

    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
    use flutter_rust_bridge::{Handler, IntoIntoDart};

    use super::*;
    use crate::api::receive::error::*;
    use crate::api::receive::*;
    use crate::api::send::*;
    use crate::api::uri::*;
    use crate::*;

    // Section: boilerplate

    flutter_rust_bridge::frb_generated_boilerplate_io!();

    // Section: dart2rust

    impl CstDecode<flutter_rust_bridge::for_generated::anyhow::Error>
        for *mut wire_cst_list_prim_u_8_strict
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> flutter_rust_bridge::for_generated::anyhow::Error {
            unimplemented!()
        }
    }
    impl CstDecode<RustAutoOpaqueNom<Error>> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> RustAutoOpaqueNom<Error> {
            flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_decode(self.cst_decode())
        }
    }
    impl CstDecode<RustAutoOpaqueNom<ImplementationError>> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> RustAutoOpaqueNom<ImplementationError> {
            flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_decode(self.cst_decode())
        }
    }
    impl CstDecode<RustAutoOpaqueNom<InputContributionError>> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> RustAutoOpaqueNom<InputContributionError> {
            flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_decode(self.cst_decode())
        }
    }
    impl CstDecode<RustAutoOpaqueNom<IntoUrlError>> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> RustAutoOpaqueNom<IntoUrlError> {
            flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_decode(self.cst_decode())
        }
    }
    impl CstDecode<RustAutoOpaqueNom<IoError>> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> RustAutoOpaqueNom<IoError> {
            flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_decode(self.cst_decode())
        }
    }
    impl CstDecode<RustAutoOpaqueNom<OhttpError>> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> RustAutoOpaqueNom<OhttpError> {
            flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_decode(self.cst_decode())
        }
    }
    impl CstDecode<RustAutoOpaqueNom<OutputSubstitutionError>> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> RustAutoOpaqueNom<OutputSubstitutionError> {
            flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_decode(self.cst_decode())
        }
    }
    impl CstDecode<RustAutoOpaqueNom<PjNotSupported>> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> RustAutoOpaqueNom<PjNotSupported> {
            flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_decode(self.cst_decode())
        }
    }
    impl CstDecode<RustAutoOpaqueNom<PjParseError>> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> RustAutoOpaqueNom<PjParseError> {
            flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_decode(self.cst_decode())
        }
    }
    impl CstDecode<RustAutoOpaqueNom<PsbtInputError>> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> RustAutoOpaqueNom<PsbtInputError> {
            flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_decode(self.cst_decode())
        }
    }
    impl CstDecode<RustAutoOpaqueNom<ReplyableError>> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> RustAutoOpaqueNom<ReplyableError> {
            flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_decode(self.cst_decode())
        }
    }
    impl CstDecode<RustAutoOpaqueNom<ResponseError>> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> RustAutoOpaqueNom<ResponseError> {
            flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_decode(self.cst_decode())
        }
    }
    impl CstDecode<RustAutoOpaqueNom<SelectionError>> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> RustAutoOpaqueNom<SelectionError> {
            flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_decode(self.cst_decode())
        }
    }
    impl CstDecode<RustAutoOpaqueNom<SerdeJsonError>> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> RustAutoOpaqueNom<SerdeJsonError> {
            flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_decode(self.cst_decode())
        }
    }
    impl CstDecode<RustAutoOpaqueNom<SessionError>> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> RustAutoOpaqueNom<SessionError> {
            flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_decode(self.cst_decode())
        }
    }
    impl CstDecode<RustAutoOpaqueNom<UrlParseError>> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> RustAutoOpaqueNom<UrlParseError> {
            flutter_rust_bridge::for_generated::rust_auto_opaque_explicit_decode(self.cst_decode())
        }
    }
    impl CstDecode<DartReceiverPersister> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> DartReceiverPersister {
            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(CstDecode::<
                RustOpaqueNom<
                    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DartReceiverPersister>,
                >,
            >::cst_decode(
                self
            ))
        }
    }
    impl CstDecode<DartSenderPersister> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> DartSenderPersister {
            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(CstDecode::<
                RustOpaqueNom<
                    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DartSenderPersister>,
                >,
            >::cst_decode(
                self
            ))
        }
    }
    impl CstDecode<FfiJsonReply> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> FfiJsonReply {
            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(CstDecode::<
                RustOpaqueNom<
                    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FfiJsonReply>,
                >,
            >::cst_decode(
                self
            ))
        }
    }
    impl CstDecode<FfiPjUri> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> FfiPjUri {
            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(CstDecode::<
                RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FfiPjUri>>,
            >::cst_decode(
                self
            ))
        }
    }
    impl CstDecode<FfiReceiver> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> FfiReceiver {
            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(CstDecode::<
                RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FfiReceiver>>,
            >::cst_decode(
                self
            ))
        }
    }
    impl CstDecode<FfiSender> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> FfiSender {
            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(CstDecode::<
                RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FfiSender>>,
            >::cst_decode(
                self
            ))
        }
    }
    impl CstDecode<ImplementationError> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> ImplementationError {
            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(CstDecode::<
                RustOpaqueNom<
                    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ImplementationError>,
                >,
            >::cst_decode(
                self
            ))
        }
    }
    impl CstDecode<OutputSubstitution> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> OutputSubstitution {
            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(CstDecode::<
                RustOpaqueNom<
                    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OutputSubstitution>,
                >,
            >::cst_decode(
                self
            ))
        }
    }
    impl CstDecode<ReceiverToken> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> ReceiverToken {
            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(CstDecode::<
                RustOpaqueNom<
                    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ReceiverToken>,
                >,
            >::cst_decode(
                self
            ))
        }
    }
    impl CstDecode<SenderToken> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> SenderToken {
            flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(CstDecode::<
                RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SenderToken>>,
            >::cst_decode(
                self
            ))
        }
    }
    impl CstDecode<flutter_rust_bridge::DartOpaque> for *const std::ffi::c_void {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> flutter_rust_bridge::DartOpaque {
            unsafe { flutter_rust_bridge::for_generated::cst_decode_dart_opaque(self as _) }
        }
    }
    impl CstDecode<RustOpaqueNom<bitcoin_ffi::Script>> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> RustOpaqueNom<bitcoin_ffi::Script> {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DartReceiverPersister>,
            >,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DartReceiverPersister>,
        > {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DartSenderPersister>,
            >,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DartSenderPersister>,
        > {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl CstDecode<RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Error>>>
        for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Error>> {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FfiJsonReply>>,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FfiJsonReply>>
        {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl CstDecode<RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FfiPjUri>>>
        for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FfiPjUri>>
        {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FfiReceiver>>,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FfiReceiver>>
        {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl
        CstDecode<RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FfiSender>>>
        for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FfiSender>>
        {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ImplementationError>,
            >,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ImplementationError>,
        > {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<InputContributionError>,
            >,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<InputContributionError>,
        > {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<IntoUrlError>>,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<IntoUrlError>>
        {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl CstDecode<RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<IoError>>>
        for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<IoError>>
        {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OhttpError>>,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OhttpError>>
        {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OutputSubstitution>,
            >,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OutputSubstitution>,
        > {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OutputSubstitutionError>,
            >,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OutputSubstitutionError>,
        > {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PjNotSupported>>,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PjNotSupported>>
        {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PjParseError>>,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PjParseError>>
        {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PsbtInputError>>,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<PsbtInputError>>
        {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ReceiverToken>>,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ReceiverToken>>
        {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ReplyableError>>,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ReplyableError>>
        {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ResponseError>>,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ResponseError>>
        {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SelectionError>>,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SelectionError>>
        {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SenderToken>>,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SenderToken>>
        {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SerdeJsonError>>,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SerdeJsonError>>
        {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SessionError>>,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SessionError>>
        {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<UrlParseError>>,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<UrlParseError>>
        {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl CstDecode<RustOpaqueNom<payjoin_ffi::OhttpKeys>> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> RustOpaqueNom<payjoin_ffi::OhttpKeys> {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl CstDecode<RustOpaqueNom<payjoin_ffi::Url>> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> RustOpaqueNom<payjoin_ffi::Url> {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl CstDecode<RustOpaqueNom<payjoin_ffi::receive::InputPair>> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> RustOpaqueNom<payjoin_ffi::receive::InputPair> {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl CstDecode<RustOpaqueNom<payjoin_ffi::receive::MaybeInputsOwned>> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> RustOpaqueNom<payjoin_ffi::receive::MaybeInputsOwned> {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl CstDecode<RustOpaqueNom<payjoin_ffi::receive::MaybeInputsSeen>> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> RustOpaqueNom<payjoin_ffi::receive::MaybeInputsSeen> {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl CstDecode<RustOpaqueNom<payjoin_ffi::receive::NewReceiver>> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> RustOpaqueNom<payjoin_ffi::receive::NewReceiver> {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl CstDecode<RustOpaqueNom<payjoin_ffi::receive::OutputsUnknown>> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> RustOpaqueNom<payjoin_ffi::receive::OutputsUnknown> {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl CstDecode<RustOpaqueNom<payjoin_ffi::receive::PayjoinProposal>> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> RustOpaqueNom<payjoin_ffi::receive::PayjoinProposal> {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl CstDecode<RustOpaqueNom<payjoin_ffi::receive::ProvisionalProposal>> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> RustOpaqueNom<payjoin_ffi::receive::ProvisionalProposal> {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl CstDecode<RustOpaqueNom<payjoin_ffi::receive::UncheckedProposal>> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> RustOpaqueNom<payjoin_ffi::receive::UncheckedProposal> {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl CstDecode<RustOpaqueNom<payjoin_ffi::receive::WantsInputs>> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> RustOpaqueNom<payjoin_ffi::receive::WantsInputs> {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl CstDecode<RustOpaqueNom<payjoin_ffi::receive::WantsOutputs>> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> RustOpaqueNom<payjoin_ffi::receive::WantsOutputs> {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl CstDecode<RustOpaqueNom<payjoin_ffi::send::NewSender>> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> RustOpaqueNom<payjoin_ffi::send::NewSender> {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl CstDecode<RustOpaqueNom<payjoin_ffi::send::SenderBuilder>> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> RustOpaqueNom<payjoin_ffi::send::SenderBuilder> {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl CstDecode<RustOpaqueNom<payjoin_ffi::send::V1Context>> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> RustOpaqueNom<payjoin_ffi::send::V1Context> {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl CstDecode<RustOpaqueNom<payjoin_ffi::send::V2GetContext>> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> RustOpaqueNom<payjoin_ffi::send::V2GetContext> {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl CstDecode<RustOpaqueNom<payjoin_ffi::send::V2PostContext>> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> RustOpaqueNom<payjoin_ffi::send::V2PostContext> {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl CstDecode<RustOpaqueNom<payjoin_ffi::uri::Uri>> for usize {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> RustOpaqueNom<payjoin_ffi::uri::Uri> {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl
        CstDecode<
            RustOpaqueNom<std::sync::Mutex<core::option::Option<payjoin_ffi::ClientResponse>>>,
        > for usize
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(
            self,
        ) -> RustOpaqueNom<std::sync::Mutex<core::option::Option<payjoin_ffi::ClientResponse>>>
        {
            unsafe { decode_rust_opaque_nom(self as _) }
        }
    }
    impl CstDecode<String> for *mut wire_cst_list_prim_u_8_strict {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> String {
            let vec: Vec<u8> = self.cst_decode();
            String::from_utf8(vec).unwrap()
        }
    }
    impl CstDecode<crate::utils::types::ClientResponse> for *mut wire_cst_client_response {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::utils::types::ClientResponse {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<crate::utils::types::ClientResponse>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<crate::api::receive::FfiMaybeInputsOwned> for *mut wire_cst_ffi_maybe_inputs_owned {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::receive::FfiMaybeInputsOwned {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<crate::api::receive::FfiMaybeInputsOwned>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<crate::api::receive::FfiMaybeInputsSeen> for *mut wire_cst_ffi_maybe_inputs_seen {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::receive::FfiMaybeInputsSeen {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<crate::api::receive::FfiMaybeInputsSeen>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<crate::api::receive::FfiNewReceiver> for *mut wire_cst_ffi_new_receiver {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::receive::FfiNewReceiver {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<crate::api::receive::FfiNewReceiver>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<crate::api::send::FfiNewSender> for *mut wire_cst_ffi_new_sender {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::send::FfiNewSender {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<crate::api::send::FfiNewSender>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<crate::api::uri::FfiOhttpKeys> for *mut wire_cst_ffi_ohttp_keys {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::uri::FfiOhttpKeys {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<crate::api::uri::FfiOhttpKeys>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<crate::api::receive::FfiOutputsUnknown> for *mut wire_cst_ffi_outputs_unknown {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::receive::FfiOutputsUnknown {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<crate::api::receive::FfiOutputsUnknown>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<crate::api::receive::FfiPayjoinProposal> for *mut wire_cst_ffi_payjoin_proposal {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::receive::FfiPayjoinProposal {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<crate::api::receive::FfiPayjoinProposal>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<crate::api::receive::FfiProvisionalProposal>
        for *mut wire_cst_ffi_provisional_proposal
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::receive::FfiProvisionalProposal {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<crate::api::receive::FfiProvisionalProposal>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<crate::api::bitcoin_ffi::FfiScript> for *mut wire_cst_ffi_script {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::bitcoin_ffi::FfiScript {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<crate::api::bitcoin_ffi::FfiScript>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<crate::api::send::FfiSenderBuilder> for *mut wire_cst_ffi_sender_builder {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::send::FfiSenderBuilder {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<crate::api::send::FfiSenderBuilder>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<crate::api::receive::FfiUncheckedProposal> for *mut wire_cst_ffi_unchecked_proposal {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::receive::FfiUncheckedProposal {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<crate::api::receive::FfiUncheckedProposal>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<crate::api::uri::FfiUri> for *mut wire_cst_ffi_uri {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::uri::FfiUri {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<crate::api::uri::FfiUri>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<crate::api::uri::FfiUrl> for *mut wire_cst_ffi_url {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::uri::FfiUrl {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<crate::api::uri::FfiUrl>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<crate::api::send::FfiV1Context> for *mut wire_cst_ffi_v_1_context {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::send::FfiV1Context {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<crate::api::send::FfiV1Context>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<crate::api::send::FfiV2GetContext> for *mut wire_cst_ffi_v_2_get_context {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::send::FfiV2GetContext {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<crate::api::send::FfiV2GetContext>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<crate::api::send::FfiV2PostContext> for *mut wire_cst_ffi_v_2_post_context {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::send::FfiV2PostContext {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<crate::api::send::FfiV2PostContext>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<crate::api::receive::FfiWantsInputs> for *mut wire_cst_ffi_wants_inputs {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::receive::FfiWantsInputs {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<crate::api::receive::FfiWantsInputs>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<crate::api::receive::FfiWantsOutputs> for *mut wire_cst_ffi_wants_outputs {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::receive::FfiWantsOutputs {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<crate::api::receive::FfiWantsOutputs>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<crate::utils::types::PsbtInput> for *mut wire_cst_psbt_input {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::utils::types::PsbtInput {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<crate::utils::types::PsbtInput>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<crate::utils::types::TxIn> for *mut wire_cst_tx_in {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::utils::types::TxIn {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<crate::utils::types::TxIn>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<crate::utils::types::TxOut> for *mut wire_cst_tx_out {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::utils::types::TxOut {
            let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
            CstDecode::<crate::utils::types::TxOut>::cst_decode(*wrap).into()
        }
    }
    impl CstDecode<u64> for *mut u64 {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> u64 {
            unsafe { *flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
        }
    }
    impl CstDecode<u8> for *mut u8 {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> u8 {
            unsafe { *flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
        }
    }
    impl CstDecode<crate::utils::types::ClientResponse> for wire_cst_client_response {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::utils::types::ClientResponse {
            crate::utils::types::ClientResponse(self.field0.cst_decode())
        }
    }
    impl CstDecode<crate::api::send::error::FfiBuildSenderError> for wire_cst_ffi_build_sender_error {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::send::error::FfiBuildSenderError {
            crate::api::send::error::FfiBuildSenderError { msg: self.msg.cst_decode() }
        }
    }
    impl CstDecode<crate::api::send::error::FfiCreateRequestError>
        for wire_cst_ffi_create_request_error
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::send::error::FfiCreateRequestError {
            crate::api::send::error::FfiCreateRequestError { msg: self.msg.cst_decode() }
        }
    }
    impl CstDecode<crate::api::send::error::FfiEncapsulationError>
        for wire_cst_ffi_encapsulation_error
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::send::error::FfiEncapsulationError {
            crate::api::send::error::FfiEncapsulationError { msg: self.msg.cst_decode() }
        }
    }
    impl CstDecode<crate::api::receive::error::FfiError> for wire_cst_ffi_error {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::receive::error::FfiError {
            crate::api::receive::error::FfiError(self.field0.cst_decode())
        }
    }
    impl CstDecode<crate::api::receive::error::FfiImplementationError>
        for wire_cst_ffi_implementation_error
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::receive::error::FfiImplementationError {
            crate::api::receive::error::FfiImplementationError(self.field0.cst_decode())
        }
    }
    impl CstDecode<crate::api::receive::error::FfiInputContributionError>
        for wire_cst_ffi_input_contribution_error
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::receive::error::FfiInputContributionError {
            crate::api::receive::error::FfiInputContributionError(self.field0.cst_decode())
        }
    }
    impl CstDecode<crate::api::receive::FfiInputPair> for wire_cst_ffi_input_pair {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::receive::FfiInputPair {
            crate::api::receive::FfiInputPair(self.field0.cst_decode())
        }
    }
    impl CstDecode<crate::api::uri::error::FfiIntoUrlError> for wire_cst_ffi_into_url_error {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::uri::error::FfiIntoUrlError {
            crate::api::uri::error::FfiIntoUrlError(self.field0.cst_decode())
        }
    }
    impl CstDecode<crate::api::io::error::FfiIoError> for wire_cst_ffi_io_error {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::io::error::FfiIoError {
            crate::api::io::error::FfiIoError(self.field0.cst_decode())
        }
    }
    impl CstDecode<crate::api::receive::FfiMaybeInputsOwned> for wire_cst_ffi_maybe_inputs_owned {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::receive::FfiMaybeInputsOwned {
            crate::api::receive::FfiMaybeInputsOwned(self.field0.cst_decode())
        }
    }
    impl CstDecode<crate::api::receive::FfiMaybeInputsSeen> for wire_cst_ffi_maybe_inputs_seen {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::receive::FfiMaybeInputsSeen {
            crate::api::receive::FfiMaybeInputsSeen(self.field0.cst_decode())
        }
    }
    impl CstDecode<crate::api::receive::FfiNewReceiver> for wire_cst_ffi_new_receiver {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::receive::FfiNewReceiver {
            crate::api::receive::FfiNewReceiver(self.field0.cst_decode())
        }
    }
    impl CstDecode<crate::api::send::FfiNewSender> for wire_cst_ffi_new_sender {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::send::FfiNewSender {
            crate::api::send::FfiNewSender(self.field0.cst_decode())
        }
    }
    impl CstDecode<crate::api::ohttp::error::FfiOhttpError> for wire_cst_ffi_ohttp_error {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::ohttp::error::FfiOhttpError {
            crate::api::ohttp::error::FfiOhttpError(self.field0.cst_decode())
        }
    }
    impl CstDecode<crate::api::uri::FfiOhttpKeys> for wire_cst_ffi_ohttp_keys {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::uri::FfiOhttpKeys {
            crate::api::uri::FfiOhttpKeys(self.field0.cst_decode())
        }
    }
    impl CstDecode<crate::api::receive::error::FfiOutputSubstitutionError>
        for wire_cst_ffi_output_substitution_error
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::receive::error::FfiOutputSubstitutionError {
            crate::api::receive::error::FfiOutputSubstitutionError(self.field0.cst_decode())
        }
    }
    impl CstDecode<crate::api::receive::FfiOutputsUnknown> for wire_cst_ffi_outputs_unknown {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::receive::FfiOutputsUnknown {
            crate::api::receive::FfiOutputsUnknown(self.field0.cst_decode())
        }
    }
    impl CstDecode<crate::api::receive::FfiPayjoinProposal> for wire_cst_ffi_payjoin_proposal {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::receive::FfiPayjoinProposal {
            crate::api::receive::FfiPayjoinProposal(self.field0.cst_decode())
        }
    }
    impl CstDecode<crate::api::uri::error::FfiPjNotSupported> for wire_cst_ffi_pj_not_supported {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::uri::error::FfiPjNotSupported {
            crate::api::uri::error::FfiPjNotSupported(self.field0.cst_decode())
        }
    }
    impl CstDecode<crate::api::uri::error::FfiPjParseError> for wire_cst_ffi_pj_parse_error {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::uri::error::FfiPjParseError {
            crate::api::uri::error::FfiPjParseError(self.field0.cst_decode())
        }
    }
    impl CstDecode<crate::api::receive::FfiProvisionalProposal> for wire_cst_ffi_provisional_proposal {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::receive::FfiProvisionalProposal {
            crate::api::receive::FfiProvisionalProposal(self.field0.cst_decode())
        }
    }
    impl CstDecode<crate::api::receive::error::FfiPsbtInputError> for wire_cst_ffi_psbt_input_error {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::receive::error::FfiPsbtInputError {
            crate::api::receive::error::FfiPsbtInputError(self.field0.cst_decode())
        }
    }
    impl CstDecode<crate::api::receive::error::FfiReplyableError> for wire_cst_ffi_replyable_error {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::receive::error::FfiReplyableError {
            crate::api::receive::error::FfiReplyableError(self.field0.cst_decode())
        }
    }
    impl CstDecode<crate::api::send::error::FfiResponseError> for wire_cst_ffi_response_error {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::send::error::FfiResponseError {
            crate::api::send::error::FfiResponseError(self.field0.cst_decode())
        }
    }
    impl CstDecode<crate::api::bitcoin_ffi::FfiScript> for wire_cst_ffi_script {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::bitcoin_ffi::FfiScript {
            crate::api::bitcoin_ffi::FfiScript(self.field0.cst_decode())
        }
    }
    impl CstDecode<crate::api::receive::error::FfiSelectionError> for wire_cst_ffi_selection_error {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::receive::error::FfiSelectionError {
            crate::api::receive::error::FfiSelectionError(self.field0.cst_decode())
        }
    }
    impl CstDecode<crate::api::send::FfiSenderBuilder> for wire_cst_ffi_sender_builder {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::send::FfiSenderBuilder {
            crate::api::send::FfiSenderBuilder(self.field0.cst_decode())
        }
    }
    impl CstDecode<crate::api::FfiSerdeJsonError> for wire_cst_ffi_serde_json_error {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::FfiSerdeJsonError {
            crate::api::FfiSerdeJsonError(self.field0.cst_decode())
        }
    }
    impl CstDecode<crate::api::receive::error::FfiSessionError> for wire_cst_ffi_session_error {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::receive::error::FfiSessionError {
            crate::api::receive::error::FfiSessionError(self.field0.cst_decode())
        }
    }
    impl CstDecode<crate::api::receive::FfiUncheckedProposal> for wire_cst_ffi_unchecked_proposal {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::receive::FfiUncheckedProposal {
            crate::api::receive::FfiUncheckedProposal(self.field0.cst_decode())
        }
    }
    impl CstDecode<crate::api::uri::FfiUri> for wire_cst_ffi_uri {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::uri::FfiUri {
            crate::api::uri::FfiUri(self.field0.cst_decode())
        }
    }
    impl CstDecode<crate::api::uri::FfiUrl> for wire_cst_ffi_url {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::uri::FfiUrl {
            crate::api::uri::FfiUrl(self.field0.cst_decode())
        }
    }
    impl CstDecode<crate::api::uri::error::FfiUrlParseError> for wire_cst_ffi_url_parse_error {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::uri::error::FfiUrlParseError {
            crate::api::uri::error::FfiUrlParseError(self.field0.cst_decode())
        }
    }
    impl CstDecode<crate::api::send::FfiV1Context> for wire_cst_ffi_v_1_context {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::send::FfiV1Context {
            crate::api::send::FfiV1Context(self.field0.cst_decode())
        }
    }
    impl CstDecode<crate::api::send::FfiV2GetContext> for wire_cst_ffi_v_2_get_context {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::send::FfiV2GetContext {
            crate::api::send::FfiV2GetContext(self.field0.cst_decode())
        }
    }
    impl CstDecode<crate::api::send::FfiV2PostContext> for wire_cst_ffi_v_2_post_context {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::send::FfiV2PostContext {
            crate::api::send::FfiV2PostContext(self.field0.cst_decode())
        }
    }
    impl CstDecode<crate::api::receive::FfiWantsInputs> for wire_cst_ffi_wants_inputs {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::receive::FfiWantsInputs {
            crate::api::receive::FfiWantsInputs(self.field0.cst_decode())
        }
    }
    impl CstDecode<crate::api::receive::FfiWantsOutputs> for wire_cst_ffi_wants_outputs {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::api::receive::FfiWantsOutputs {
            crate::api::receive::FfiWantsOutputs(self.field0.cst_decode())
        }
    }
    impl CstDecode<Vec<crate::api::receive::FfiInputPair>> for *mut wire_cst_list_ffi_input_pair {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> Vec<crate::api::receive::FfiInputPair> {
            let vec = unsafe {
                let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
                flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
            };
            vec.into_iter().map(CstDecode::cst_decode).collect()
        }
    }
    impl CstDecode<Vec<Vec<u8>>> for *mut wire_cst_list_list_prim_u_8_strict {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> Vec<Vec<u8>> {
            let vec = unsafe {
                let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
                flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
            };
            vec.into_iter().map(CstDecode::cst_decode).collect()
        }
    }
    impl CstDecode<Vec<crate::utils::types::OutPoint>> for *mut wire_cst_list_out_point {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> Vec<crate::utils::types::OutPoint> {
            let vec = unsafe {
                let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
                flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
            };
            vec.into_iter().map(CstDecode::cst_decode).collect()
        }
    }
    impl CstDecode<Vec<u8>> for *mut wire_cst_list_prim_u_8_loose {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> Vec<u8> {
            unsafe {
                let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
                flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
            }
        }
    }
    impl CstDecode<Vec<u8>> for *mut wire_cst_list_prim_u_8_strict {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> Vec<u8> {
            unsafe {
                let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
                flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
            }
        }
    }
    impl CstDecode<Vec<crate::utils::types::TxOut>> for *mut wire_cst_list_tx_out {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> Vec<crate::utils::types::TxOut> {
            let vec = unsafe {
                let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
                flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
            };
            vec.into_iter().map(CstDecode::cst_decode).collect()
        }
    }
    impl CstDecode<crate::utils::types::OutPoint> for wire_cst_out_point {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::utils::types::OutPoint {
            crate::utils::types::OutPoint {
                txid: self.txid.cst_decode(),
                vout: self.vout.cst_decode(),
            }
        }
    }
    impl CstDecode<crate::utils::types::PsbtInput> for wire_cst_psbt_input {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::utils::types::PsbtInput {
            crate::utils::types::PsbtInput {
                witness_utxo: self.witness_utxo.cst_decode(),
                redeem_script: self.redeem_script.cst_decode(),
                witness_script: self.witness_script.cst_decode(),
            }
        }
    }
    impl CstDecode<(crate::utils::types::Request, crate::utils::types::ClientResponse)>
        for wire_cst_record_request_client_response
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> (crate::utils::types::Request, crate::utils::types::ClientResponse) {
            (self.field0.cst_decode(), self.field1.cst_decode())
        }
    }
    impl CstDecode<(crate::utils::types::Request, crate::api::send::FfiV1Context)>
        for wire_cst_record_request_ffi_v_1_context
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> (crate::utils::types::Request, crate::api::send::FfiV1Context) {
            (self.field0.cst_decode(), self.field1.cst_decode())
        }
    }
    impl CstDecode<(crate::utils::types::Request, crate::api::send::FfiV2PostContext)>
        for wire_cst_record_request_ffi_v_2_post_context
    {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> (crate::utils::types::Request, crate::api::send::FfiV2PostContext) {
            (self.field0.cst_decode(), self.field1.cst_decode())
        }
    }
    impl CstDecode<crate::utils::types::Request> for wire_cst_request {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::utils::types::Request {
            crate::utils::types::Request {
                url: self.url.cst_decode(),
                content_type: self.content_type.cst_decode(),
                body: self.body.cst_decode(),
            }
        }
    }
    impl CstDecode<crate::utils::types::TxIn> for wire_cst_tx_in {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::utils::types::TxIn {
            crate::utils::types::TxIn {
                previous_output: self.previous_output.cst_decode(),
                script_sig: self.script_sig.cst_decode(),
                sequence: self.sequence.cst_decode(),
                witness: self.witness.cst_decode(),
            }
        }
    }
    impl CstDecode<crate::utils::types::TxOut> for wire_cst_tx_out {
        // Codec=Cst (C-struct based), see doc to use other codecs
        fn cst_decode(self) -> crate::utils::types::TxOut {
            crate::utils::types::TxOut {
                value: self.value.cst_decode(),
                script_pubkey: self.script_pubkey.cst_decode(),
            }
        }
    }
    impl NewWithNullPtr for wire_cst_client_response {
        fn new_with_null_ptr() -> Self {
            Self { field0: Default::default() }
        }
    }
    impl Default for wire_cst_client_response {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_ffi_build_sender_error {
        fn new_with_null_ptr() -> Self {
            Self { msg: core::ptr::null_mut() }
        }
    }
    impl Default for wire_cst_ffi_build_sender_error {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_ffi_create_request_error {
        fn new_with_null_ptr() -> Self {
            Self { msg: core::ptr::null_mut() }
        }
    }
    impl Default for wire_cst_ffi_create_request_error {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_ffi_encapsulation_error {
        fn new_with_null_ptr() -> Self {
            Self { msg: core::ptr::null_mut() }
        }
    }
    impl Default for wire_cst_ffi_encapsulation_error {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_ffi_error {
        fn new_with_null_ptr() -> Self {
            Self { field0: Default::default() }
        }
    }
    impl Default for wire_cst_ffi_error {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_ffi_implementation_error {
        fn new_with_null_ptr() -> Self {
            Self { field0: Default::default() }
        }
    }
    impl Default for wire_cst_ffi_implementation_error {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_ffi_input_contribution_error {
        fn new_with_null_ptr() -> Self {
            Self { field0: Default::default() }
        }
    }
    impl Default for wire_cst_ffi_input_contribution_error {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_ffi_input_pair {
        fn new_with_null_ptr() -> Self {
            Self { field0: Default::default() }
        }
    }
    impl Default for wire_cst_ffi_input_pair {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_ffi_into_url_error {
        fn new_with_null_ptr() -> Self {
            Self { field0: Default::default() }
        }
    }
    impl Default for wire_cst_ffi_into_url_error {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_ffi_io_error {
        fn new_with_null_ptr() -> Self {
            Self { field0: Default::default() }
        }
    }
    impl Default for wire_cst_ffi_io_error {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_ffi_maybe_inputs_owned {
        fn new_with_null_ptr() -> Self {
            Self { field0: Default::default() }
        }
    }
    impl Default for wire_cst_ffi_maybe_inputs_owned {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_ffi_maybe_inputs_seen {
        fn new_with_null_ptr() -> Self {
            Self { field0: Default::default() }
        }
    }
    impl Default for wire_cst_ffi_maybe_inputs_seen {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_ffi_new_receiver {
        fn new_with_null_ptr() -> Self {
            Self { field0: Default::default() }
        }
    }
    impl Default for wire_cst_ffi_new_receiver {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_ffi_new_sender {
        fn new_with_null_ptr() -> Self {
            Self { field0: Default::default() }
        }
    }
    impl Default for wire_cst_ffi_new_sender {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_ffi_ohttp_error {
        fn new_with_null_ptr() -> Self {
            Self { field0: Default::default() }
        }
    }
    impl Default for wire_cst_ffi_ohttp_error {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_ffi_ohttp_keys {
        fn new_with_null_ptr() -> Self {
            Self { field0: Default::default() }
        }
    }
    impl Default for wire_cst_ffi_ohttp_keys {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_ffi_output_substitution_error {
        fn new_with_null_ptr() -> Self {
            Self { field0: Default::default() }
        }
    }
    impl Default for wire_cst_ffi_output_substitution_error {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_ffi_outputs_unknown {
        fn new_with_null_ptr() -> Self {
            Self { field0: Default::default() }
        }
    }
    impl Default for wire_cst_ffi_outputs_unknown {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_ffi_payjoin_proposal {
        fn new_with_null_ptr() -> Self {
            Self { field0: Default::default() }
        }
    }
    impl Default for wire_cst_ffi_payjoin_proposal {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_ffi_pj_not_supported {
        fn new_with_null_ptr() -> Self {
            Self { field0: Default::default() }
        }
    }
    impl Default for wire_cst_ffi_pj_not_supported {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_ffi_pj_parse_error {
        fn new_with_null_ptr() -> Self {
            Self { field0: Default::default() }
        }
    }
    impl Default for wire_cst_ffi_pj_parse_error {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_ffi_provisional_proposal {
        fn new_with_null_ptr() -> Self {
            Self { field0: Default::default() }
        }
    }
    impl Default for wire_cst_ffi_provisional_proposal {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_ffi_psbt_input_error {
        fn new_with_null_ptr() -> Self {
            Self { field0: Default::default() }
        }
    }
    impl Default for wire_cst_ffi_psbt_input_error {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_ffi_replyable_error {
        fn new_with_null_ptr() -> Self {
            Self { field0: Default::default() }
        }
    }
    impl Default for wire_cst_ffi_replyable_error {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_ffi_response_error {
        fn new_with_null_ptr() -> Self {
            Self { field0: Default::default() }
        }
    }
    impl Default for wire_cst_ffi_response_error {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_ffi_script {
        fn new_with_null_ptr() -> Self {
            Self { field0: Default::default() }
        }
    }
    impl Default for wire_cst_ffi_script {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_ffi_selection_error {
        fn new_with_null_ptr() -> Self {
            Self { field0: Default::default() }
        }
    }
    impl Default for wire_cst_ffi_selection_error {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_ffi_sender_builder {
        fn new_with_null_ptr() -> Self {
            Self { field0: Default::default() }
        }
    }
    impl Default for wire_cst_ffi_sender_builder {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_ffi_serde_json_error {
        fn new_with_null_ptr() -> Self {
            Self { field0: Default::default() }
        }
    }
    impl Default for wire_cst_ffi_serde_json_error {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_ffi_session_error {
        fn new_with_null_ptr() -> Self {
            Self { field0: Default::default() }
        }
    }
    impl Default for wire_cst_ffi_session_error {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_ffi_unchecked_proposal {
        fn new_with_null_ptr() -> Self {
            Self { field0: Default::default() }
        }
    }
    impl Default for wire_cst_ffi_unchecked_proposal {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_ffi_uri {
        fn new_with_null_ptr() -> Self {
            Self { field0: Default::default() }
        }
    }
    impl Default for wire_cst_ffi_uri {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_ffi_url {
        fn new_with_null_ptr() -> Self {
            Self { field0: Default::default() }
        }
    }
    impl Default for wire_cst_ffi_url {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_ffi_url_parse_error {
        fn new_with_null_ptr() -> Self {
            Self { field0: Default::default() }
        }
    }
    impl Default for wire_cst_ffi_url_parse_error {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_ffi_v_1_context {
        fn new_with_null_ptr() -> Self {
            Self { field0: Default::default() }
        }
    }
    impl Default for wire_cst_ffi_v_1_context {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_ffi_v_2_get_context {
        fn new_with_null_ptr() -> Self {
            Self { field0: Default::default() }
        }
    }
    impl Default for wire_cst_ffi_v_2_get_context {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_ffi_v_2_post_context {
        fn new_with_null_ptr() -> Self {
            Self { field0: Default::default() }
        }
    }
    impl Default for wire_cst_ffi_v_2_post_context {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_ffi_wants_inputs {
        fn new_with_null_ptr() -> Self {
            Self { field0: Default::default() }
        }
    }
    impl Default for wire_cst_ffi_wants_inputs {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_ffi_wants_outputs {
        fn new_with_null_ptr() -> Self {
            Self { field0: Default::default() }
        }
    }
    impl Default for wire_cst_ffi_wants_outputs {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_out_point {
        fn new_with_null_ptr() -> Self {
            Self { txid: core::ptr::null_mut(), vout: Default::default() }
        }
    }
    impl Default for wire_cst_out_point {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_psbt_input {
        fn new_with_null_ptr() -> Self {
            Self {
                witness_utxo: core::ptr::null_mut(),
                redeem_script: core::ptr::null_mut(),
                witness_script: core::ptr::null_mut(),
            }
        }
    }
    impl Default for wire_cst_psbt_input {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_record_request_client_response {
        fn new_with_null_ptr() -> Self {
            Self { field0: Default::default(), field1: Default::default() }
        }
    }
    impl Default for wire_cst_record_request_client_response {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_record_request_ffi_v_1_context {
        fn new_with_null_ptr() -> Self {
            Self { field0: Default::default(), field1: Default::default() }
        }
    }
    impl Default for wire_cst_record_request_ffi_v_1_context {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_record_request_ffi_v_2_post_context {
        fn new_with_null_ptr() -> Self {
            Self { field0: Default::default(), field1: Default::default() }
        }
    }
    impl Default for wire_cst_record_request_ffi_v_2_post_context {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_request {
        fn new_with_null_ptr() -> Self {
            Self {
                url: Default::default(),
                content_type: core::ptr::null_mut(),
                body: core::ptr::null_mut(),
            }
        }
    }
    impl Default for wire_cst_request {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_tx_in {
        fn new_with_null_ptr() -> Self {
            Self {
                previous_output: Default::default(),
                script_sig: Default::default(),
                sequence: Default::default(),
                witness: core::ptr::null_mut(),
            }
        }
    }
    impl Default for wire_cst_tx_in {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }
    impl NewWithNullPtr for wire_cst_tx_out {
        fn new_with_null_ptr() -> Self {
            Self { value: Default::default(), script_pubkey: core::ptr::null_mut() }
        }
    }
    impl Default for wire_cst_tx_out {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__receive__DartReceiverPersister_new(
        save: *const std::ffi::c_void,
        load: *const std::ffi::c_void,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__api__receive__DartReceiverPersister_new_impl(save, load)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__send__DartSenderPersister_new(
        save: *const std::ffi::c_void,
        load: *const std::ffi::c_void,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__api__send__DartSenderPersister_new_impl(save, load)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__uri__FfiPjUri_address(
        that: usize,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__api__uri__FfiPjUri_address_impl(that)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__uri__FfiPjUri_amount_sats(
        that: usize,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__api__uri__FfiPjUri_amount_sats_impl(that)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__uri__FfiPjUri_as_string(
        that: usize,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__api__uri__FfiPjUri_as_string_impl(that)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__uri__FfiPjUri_pj_endpoint(
        that: usize,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__api__uri__FfiPjUri_pj_endpoint_impl(that)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__uri__FfiPjUri_set_amount_sats(
        that: usize,
        amount: u64,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__api__uri__FfiPjUri_set_amount_sats_impl(that, amount)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__receive__FfiReceiver_extract_req(
        port_: i64,
        that: usize,
        ohttp_relay: *mut wire_cst_list_prim_u_8_strict,
    ) {
        wire__crate__api__receive__FfiReceiver_extract_req_impl(port_, that, ohttp_relay)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__receive__FfiReceiver_from_json(
        json: *mut wire_cst_list_prim_u_8_strict,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__api__receive__FfiReceiver_from_json_impl(json)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__receive__FfiReceiver_id(
        that: usize,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__api__receive__FfiReceiver_id_impl(that)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__receive__FfiReceiver_key(
        that: usize,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__api__receive__FfiReceiver_key_impl(that)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__receive__FfiReceiver_load(
        port_: i64,
        token: usize,
        persister: usize,
    ) {
        wire__crate__api__receive__FfiReceiver_load_impl(port_, token, persister)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__receive__FfiReceiver_pj_uri(
        port_: i64,
        that: usize,
    ) {
        wire__crate__api__receive__FfiReceiver_pj_uri_impl(port_, that)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__receive__FfiReceiver_process_res(
        port_: i64,
        that: usize,
        body: *mut wire_cst_list_prim_u_8_loose,
        ctx: *mut wire_cst_client_response,
    ) {
        wire__crate__api__receive__FfiReceiver_process_res_impl(port_, that, body, ctx)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__receive__FfiReceiver_to_json(
        that: usize,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__api__receive__FfiReceiver_to_json_impl(that)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__send__FfiSender_extract_v1(
        port_: i64,
        that: usize,
    ) {
        wire__crate__api__send__FfiSender_extract_v1_impl(port_, that)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__send__FfiSender_extract_v2(
        port_: i64,
        that: usize,
        ohttp_proxy_url: *mut wire_cst_ffi_url,
    ) {
        wire__crate__api__send__FfiSender_extract_v2_impl(port_, that, ohttp_proxy_url)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__send__FfiSender_from_json(
        json: *mut wire_cst_list_prim_u_8_strict,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__api__send__FfiSender_from_json_impl(json)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__send__FfiSender_key(
        that: usize,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__api__send__FfiSender_key_impl(that)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__send__FfiSender_load(
        port_: i64,
        token: usize,
        persister: usize,
    ) {
        wire__crate__api__send__FfiSender_load_impl(port_, token, persister)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__send__FfiSender_to_json(
        that: usize,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__api__send__FfiSender_to_json_impl(that)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__receive__ReceiverToken_to_bytes(
        that: usize,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__api__receive__ReceiverToken_to_bytes_impl(that)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__send__SenderToken_to_bytes(
        that: usize,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__api__send__SenderToken_to_bytes_impl(that)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__io__fetch_ohttp_keys(
        port_: i64,
        ohttp_relay: *mut wire_cst_list_prim_u_8_strict,
        payjoin_directory: *mut wire_cst_list_prim_u_8_strict,
    ) {
        wire__crate__api__io__fetch_ohttp_keys_impl(port_, ohttp_relay, payjoin_directory)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__receive__ffi_input_pair_new(
        port_: i64,
        txin: *mut wire_cst_tx_in,
        psbtin: *mut wire_cst_psbt_input,
    ) {
        wire__crate__api__receive__ffi_input_pair_new_impl(port_, txin, psbtin)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__receive__ffi_maybe_inputs_owned_check_inputs_not_owned(
        port_: i64,
        that: *mut wire_cst_ffi_maybe_inputs_owned,
        is_owned: *const std::ffi::c_void,
    ) {
        wire__crate__api__receive__ffi_maybe_inputs_owned_check_inputs_not_owned_impl(
            port_, that, is_owned,
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__receive__ffi_maybe_inputs_seen_check_no_inputs_seen_before(
        port_: i64,
        that: *mut wire_cst_ffi_maybe_inputs_seen,
        is_known: *const std::ffi::c_void,
    ) {
        wire__crate__api__receive__ffi_maybe_inputs_seen_check_no_inputs_seen_before_impl(
            port_, that, is_known,
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__receive__ffi_new_receiver_create(
        address: *mut wire_cst_list_prim_u_8_strict,
        network: i32,
        directory: *mut wire_cst_list_prim_u_8_strict,
        ohttp_keys: *mut wire_cst_ffi_ohttp_keys,
        expire_after: *mut u64,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__api__receive__ffi_new_receiver_create_impl(
            address,
            network,
            directory,
            ohttp_keys,
            expire_after,
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__receive__ffi_new_receiver_persist(
        port_: i64,
        that: *mut wire_cst_ffi_new_receiver,
        persister: usize,
    ) {
        wire__crate__api__receive__ffi_new_receiver_persist_impl(port_, that, persister)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__send__ffi_new_sender_persist(
        port_: i64,
        that: *mut wire_cst_ffi_new_sender,
        persister: usize,
    ) {
        wire__crate__api__send__ffi_new_sender_persist_impl(port_, that, persister)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__uri__ffi_ohttp_keys_decode(
        port_: i64,
        bytes: *mut wire_cst_list_prim_u_8_loose,
    ) {
        wire__crate__api__uri__ffi_ohttp_keys_decode_impl(port_, bytes)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__receive__ffi_outputs_unknown_identify_receiver_outputs(
        port_: i64,
        that: *mut wire_cst_ffi_outputs_unknown,
        is_receiver_output: *const std::ffi::c_void,
    ) {
        wire__crate__api__receive__ffi_outputs_unknown_identify_receiver_outputs_impl(
            port_,
            that,
            is_receiver_output,
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__receive__ffi_payjoin_proposal_extract_req(
        port_: i64,
        that: *mut wire_cst_ffi_payjoin_proposal,
        ohttp_relay: *mut wire_cst_list_prim_u_8_strict,
    ) {
        wire__crate__api__receive__ffi_payjoin_proposal_extract_req_impl(port_, that, ohttp_relay)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__receive__ffi_payjoin_proposal_process_res(
        port_: i64,
        that: *mut wire_cst_ffi_payjoin_proposal,
        res: *mut wire_cst_list_prim_u_8_loose,
        ohttp_context: *mut wire_cst_client_response,
    ) {
        wire__crate__api__receive__ffi_payjoin_proposal_process_res_impl(
            port_,
            that,
            res,
            ohttp_context,
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__receive__ffi_payjoin_proposal_psbt(
        port_: i64,
        that: *mut wire_cst_ffi_payjoin_proposal,
    ) {
        wire__crate__api__receive__ffi_payjoin_proposal_psbt_impl(port_, that)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__receive__ffi_payjoin_proposal_utxos_to_be_locked(
        port_: i64,
        that: *mut wire_cst_ffi_payjoin_proposal,
    ) {
        wire__crate__api__receive__ffi_payjoin_proposal_utxos_to_be_locked_impl(port_, that)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__receive__ffi_provisional_proposal_finalize_proposal(
        port_: i64,
        that: *mut wire_cst_ffi_provisional_proposal,
        process_psbt: *const std::ffi::c_void,
        min_fee_rate_sat_per_vb: *mut u64,
        max_fee_rate_sat_per_vb: *mut u64,
    ) {
        wire__crate__api__receive__ffi_provisional_proposal_finalize_proposal_impl(
            port_,
            that,
            process_psbt,
            min_fee_rate_sat_per_vb,
            max_fee_rate_sat_per_vb,
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__bitcoin_ffi__ffi_script_new(
        port_: i64,
        raw_output_script: *mut wire_cst_list_prim_u_8_loose,
    ) {
        wire__crate__api__bitcoin_ffi__ffi_script_new_impl(port_, raw_output_script)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__bitcoin_ffi__ffi_script_to_bytes(
        port_: i64,
        that: *mut wire_cst_ffi_script,
    ) {
        wire__crate__api__bitcoin_ffi__ffi_script_to_bytes_impl(port_, that)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__send__ffi_sender_builder_always_disable_output_substitution(
        port_: i64,
        that: *mut wire_cst_ffi_sender_builder,
    ) {
        wire__crate__api__send__ffi_sender_builder_always_disable_output_substitution_impl(
            port_, that,
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__send__ffi_sender_builder_build_non_incentivizing(
        port_: i64,
        that: *mut wire_cst_ffi_sender_builder,
        min_fee_rate: u64,
    ) {
        wire__crate__api__send__ffi_sender_builder_build_non_incentivizing_impl(
            port_,
            that,
            min_fee_rate,
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__send__ffi_sender_builder_build_recommended(
        port_: i64,
        that: *mut wire_cst_ffi_sender_builder,
        min_fee_rate: u64,
    ) {
        wire__crate__api__send__ffi_sender_builder_build_recommended_impl(port_, that, min_fee_rate)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__send__ffi_sender_builder_build_with_additional_fee(
        port_: i64,
        that: *mut wire_cst_ffi_sender_builder,
        max_fee_contribution: u64,
        change_index: *mut u8,
        min_fee_rate: u64,
        clamp_fee_contribution: bool,
    ) {
        wire__crate__api__send__ffi_sender_builder_build_with_additional_fee_impl(
            port_,
            that,
            max_fee_contribution,
            change_index,
            min_fee_rate,
            clamp_fee_contribution,
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__send__ffi_sender_builder_from_psbt_and_uri(
        port_: i64,
        psbt_base64: *mut wire_cst_list_prim_u_8_strict,
        pj_uri: usize,
    ) {
        wire__crate__api__send__ffi_sender_builder_from_psbt_and_uri_impl(
            port_,
            psbt_base64,
            pj_uri,
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__receive__ffi_unchecked_proposal_assume_interactive_receiver(
        port_: i64,
        that: *mut wire_cst_ffi_unchecked_proposal,
    ) {
        wire__crate__api__receive__ffi_unchecked_proposal_assume_interactive_receiver_impl(
            port_, that,
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__receive__ffi_unchecked_proposal_check_broadcast_suitability(
        port_: i64,
        that: *mut wire_cst_ffi_unchecked_proposal,
        min_fee_rate: *mut u64,
        can_broadcast: *const std::ffi::c_void,
    ) {
        wire__crate__api__receive__ffi_unchecked_proposal_check_broadcast_suitability_impl(
            port_,
            that,
            min_fee_rate,
            can_broadcast,
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__receive__ffi_unchecked_proposal_extract_err_req(
        port_: i64,
        that: *mut wire_cst_ffi_unchecked_proposal,
        err: usize,
        ohttp_relay: *mut wire_cst_list_prim_u_8_strict,
    ) {
        wire__crate__api__receive__ffi_unchecked_proposal_extract_err_req_impl(
            port_,
            that,
            err,
            ohttp_relay,
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__receive__ffi_unchecked_proposal_extract_tx_to_schedule_broadcast(
        port_: i64,
        that: *mut wire_cst_ffi_unchecked_proposal,
    ) {
        wire__crate__api__receive__ffi_unchecked_proposal_extract_tx_to_schedule_broadcast_impl(
            port_, that,
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__receive__ffi_unchecked_proposal_process_err_res(
        port_: i64,
        that: *mut wire_cst_ffi_unchecked_proposal,
        body: *mut wire_cst_list_prim_u_8_loose,
        context: *mut wire_cst_client_response,
    ) {
        wire__crate__api__receive__ffi_unchecked_proposal_process_err_res_impl(
            port_, that, body, context,
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__uri__ffi_uri_address(
        that: *mut wire_cst_ffi_uri,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__api__uri__ffi_uri_address_impl(that)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__uri__ffi_uri_amount_sats(
        that: *mut wire_cst_ffi_uri,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__api__uri__ffi_uri_amount_sats_impl(that)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__uri__ffi_uri_as_string(
        that: *mut wire_cst_ffi_uri,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__api__uri__ffi_uri_as_string_impl(that)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__uri__ffi_uri_check_pj_supported(
        that: *mut wire_cst_ffi_uri,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__api__uri__ffi_uri_check_pj_supported_impl(that)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__uri__ffi_uri_parse(
        uri: *mut wire_cst_list_prim_u_8_strict,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__api__uri__ffi_uri_parse_impl(uri)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__uri__ffi_url_as_string(
        that: *mut wire_cst_ffi_url,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__api__uri__ffi_url_as_string_impl(that)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__uri__ffi_url_parse(
        url: *mut wire_cst_list_prim_u_8_strict,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__api__uri__ffi_url_parse_impl(url)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__uri__ffi_url_query(
        that: *mut wire_cst_ffi_url,
    ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
        wire__crate__api__uri__ffi_url_query_impl(that)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__send__ffi_v_1_context_process_response(
        port_: i64,
        that: *mut wire_cst_ffi_v_1_context,
        response: *mut wire_cst_list_prim_u_8_loose,
    ) {
        wire__crate__api__send__ffi_v_1_context_process_response_impl(port_, that, response)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__send__ffi_v_2_get_context_extract_req(
        port_: i64,
        that: *mut wire_cst_ffi_v_2_get_context,
        ohttp_relay: *mut wire_cst_list_prim_u_8_strict,
    ) {
        wire__crate__api__send__ffi_v_2_get_context_extract_req_impl(port_, that, ohttp_relay)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__send__ffi_v_2_get_context_process_response(
        port_: i64,
        that: *mut wire_cst_ffi_v_2_get_context,
        response: *mut wire_cst_list_prim_u_8_loose,
        ohttp_ctx: *mut wire_cst_client_response,
    ) {
        wire__crate__api__send__ffi_v_2_get_context_process_response_impl(
            port_, that, response, ohttp_ctx,
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__send__ffi_v_2_post_context_process_response(
        port_: i64,
        that: *mut wire_cst_ffi_v_2_post_context,
        response: *mut wire_cst_list_prim_u_8_loose,
    ) {
        wire__crate__api__send__ffi_v_2_post_context_process_response_impl(port_, that, response)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__receive__ffi_wants_inputs_commit_inputs(
        port_: i64,
        that: *mut wire_cst_ffi_wants_inputs,
    ) {
        wire__crate__api__receive__ffi_wants_inputs_commit_inputs_impl(port_, that)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__receive__ffi_wants_inputs_contribute_inputs(
        port_: i64,
        that: *mut wire_cst_ffi_wants_inputs,
        replacement_inputs: *mut wire_cst_list_ffi_input_pair,
    ) {
        wire__crate__api__receive__ffi_wants_inputs_contribute_inputs_impl(
            port_,
            that,
            replacement_inputs,
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__receive__ffi_wants_inputs_try_preserving_privacy(
        port_: i64,
        that: *mut wire_cst_ffi_wants_inputs,
        candidate_inputs: *mut wire_cst_list_ffi_input_pair,
    ) {
        wire__crate__api__receive__ffi_wants_inputs_try_preserving_privacy_impl(
            port_,
            that,
            candidate_inputs,
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__receive__ffi_wants_outputs_commit_outputs(
        port_: i64,
        that: *mut wire_cst_ffi_wants_outputs,
    ) {
        wire__crate__api__receive__ffi_wants_outputs_commit_outputs_impl(port_, that)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__receive__ffi_wants_outputs_output_substitution(
        port_: i64,
        that: *mut wire_cst_ffi_wants_outputs,
    ) {
        wire__crate__api__receive__ffi_wants_outputs_output_substitution_impl(port_, that)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__receive__ffi_wants_outputs_replace_receiver_outputs(
        port_: i64,
        that: *mut wire_cst_ffi_wants_outputs,
        replacement_outputs: *mut wire_cst_list_tx_out,
        drain_script: *mut wire_cst_ffi_script,
    ) {
        wire__crate__api__receive__ffi_wants_outputs_replace_receiver_outputs_impl(
            port_,
            that,
            replacement_outputs,
            drain_script,
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_wire__crate__api__receive__ffi_wants_outputs_substitute_receiver_script(
        port_: i64,
        that: *mut wire_cst_ffi_wants_outputs,
        output_script: *mut wire_cst_ffi_script,
    ) {
        wire__crate__api__receive__ffi_wants_outputs_substitute_receiver_script_impl(
            port_,
            that,
            output_script,
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_bitcoin_ffiScript(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<bitcoin_ffi::Script>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_bitcoin_ffiScript(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<bitcoin_ffi::Script>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartReceiverPersister(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DartReceiverPersister>>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartReceiverPersister(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DartReceiverPersister>>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartSenderPersister(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DartSenderPersister>>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartSenderPersister(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DartSenderPersister>>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerError(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< Error>>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerError(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< Error>>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiJsonReply(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FfiJsonReply>>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiJsonReply(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FfiJsonReply>>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiPjUri(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FfiPjUri>>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiPjUri(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FfiPjUri>>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiReceiver(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FfiReceiver>>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiReceiver(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FfiReceiver>>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiSender(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FfiSender>>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiSender(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FfiSender>>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerImplementationError(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< ImplementationError>>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerImplementationError(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< ImplementationError>>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInputContributionError(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< InputContributionError>>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInputContributionError(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< InputContributionError>>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIntoUrlError(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< IntoUrlError>>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIntoUrlError(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< IntoUrlError>>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIoError(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< IoError>>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIoError(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< IoError>>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOhttpError(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< OhttpError>>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOhttpError(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< OhttpError>>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOutputSubstitution(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OutputSubstitution>>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOutputSubstitution(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OutputSubstitution>>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOutputSubstitutionError(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OutputSubstitutionError>,
            >::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOutputSubstitutionError(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OutputSubstitutionError>,
            >::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPjNotSupported(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< PjNotSupported>>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPjNotSupported(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< PjNotSupported>>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPjParseError(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< PjParseError>>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPjParseError(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< PjParseError>>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPsbtInputError(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< PsbtInputError>>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPsbtInputError(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< PsbtInputError>>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReceiverToken(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ReceiverToken>>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReceiverToken(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ReceiverToken>>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReplyableError(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< ReplyableError>>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReplyableError(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< ReplyableError>>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerResponseError(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< ResponseError>>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerResponseError(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< ResponseError>>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSelectionError(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< SelectionError>>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSelectionError(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< SelectionError>>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSenderToken(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SenderToken>>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSenderToken(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SenderToken>>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSerdeJsonError(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< SerdeJsonError>>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSerdeJsonError(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< SerdeJsonError>>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSessionError(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< SessionError>>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSessionError(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< SessionError>>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUrlParseError(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< UrlParseError>>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUrlParseError(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< UrlParseError>>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_payjoin_ffiOhttpKeys(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<payjoin_ffi::OhttpKeys>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_payjoin_ffiOhttpKeys(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<payjoin_ffi::OhttpKeys>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_payjoin_ffiUrl(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<payjoin_ffi::Url>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_payjoin_ffiUrl(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<payjoin_ffi::Url>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_payjoin_ffireceiveInputPair(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<payjoin_ffi::receive::InputPair>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_payjoin_ffireceiveInputPair(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<payjoin_ffi::receive::InputPair>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_payjoin_ffireceiveMaybeInputsOwned(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<payjoin_ffi::receive::MaybeInputsOwned>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_payjoin_ffireceiveMaybeInputsOwned(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<payjoin_ffi::receive::MaybeInputsOwned>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_payjoin_ffireceiveMaybeInputsSeen(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<payjoin_ffi::receive::MaybeInputsSeen>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_payjoin_ffireceiveMaybeInputsSeen(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<payjoin_ffi::receive::MaybeInputsSeen>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_payjoin_ffireceiveNewReceiver(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<payjoin_ffi::receive::NewReceiver>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_payjoin_ffireceiveNewReceiver(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<payjoin_ffi::receive::NewReceiver>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_payjoin_ffireceiveOutputsUnknown(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<payjoin_ffi::receive::OutputsUnknown>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_payjoin_ffireceiveOutputsUnknown(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<payjoin_ffi::receive::OutputsUnknown>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_payjoin_ffireceivePayjoinProposal(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<payjoin_ffi::receive::PayjoinProposal>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_payjoin_ffireceivePayjoinProposal(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<payjoin_ffi::receive::PayjoinProposal>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_payjoin_ffireceiveProvisionalProposal(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<payjoin_ffi::receive::ProvisionalProposal>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_payjoin_ffireceiveProvisionalProposal(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<payjoin_ffi::receive::ProvisionalProposal>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_payjoin_ffireceiveUncheckedProposal(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<payjoin_ffi::receive::UncheckedProposal>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_payjoin_ffireceiveUncheckedProposal(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<payjoin_ffi::receive::UncheckedProposal>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_payjoin_ffireceiveWantsInputs(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<payjoin_ffi::receive::WantsInputs>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_payjoin_ffireceiveWantsInputs(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<payjoin_ffi::receive::WantsInputs>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_payjoin_ffireceiveWantsOutputs(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<payjoin_ffi::receive::WantsOutputs>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_payjoin_ffireceiveWantsOutputs(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<payjoin_ffi::receive::WantsOutputs>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_payjoin_ffisendNewSender(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<payjoin_ffi::send::NewSender>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_payjoin_ffisendNewSender(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<payjoin_ffi::send::NewSender>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_payjoin_ffisendSenderBuilder(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<payjoin_ffi::send::SenderBuilder>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_payjoin_ffisendSenderBuilder(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<payjoin_ffi::send::SenderBuilder>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_payjoin_ffisendV1Context(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<payjoin_ffi::send::V1Context>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_payjoin_ffisendV1Context(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<payjoin_ffi::send::V1Context>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_payjoin_ffisendV2GetContext(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<payjoin_ffi::send::V2GetContext>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_payjoin_ffisendV2GetContext(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<payjoin_ffi::send::V2GetContext>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_payjoin_ffisendV2PostContext(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<payjoin_ffi::send::V2PostContext>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_payjoin_ffisendV2PostContext(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<payjoin_ffi::send::V2PostContext>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_payjoin_ffiuriUri(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<payjoin_ffi::uri::Uri>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_payjoin_ffiuriUri(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<payjoin_ffi::uri::Uri>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_increment_strong_count_RustOpaque_stdsyncMutexcoreoptionOptionpayjoin_ffiClientResponse(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<std :: sync :: Mutex < core :: option :: Option < payjoin_ffi :: ClientResponse > >>::increment_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_rust_arc_decrement_strong_count_RustOpaque_stdsyncMutexcoreoptionOptionpayjoin_ffiClientResponse(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<std :: sync :: Mutex < core :: option :: Option < payjoin_ffi :: ClientResponse > >>::decrement_strong_count(ptr as _);
        }
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_cst_new_box_autoadd_client_response(
    ) -> *mut wire_cst_client_response {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_client_response::new_with_null_ptr(),
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_cst_new_box_autoadd_ffi_maybe_inputs_owned(
    ) -> *mut wire_cst_ffi_maybe_inputs_owned {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_ffi_maybe_inputs_owned::new_with_null_ptr(),
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_cst_new_box_autoadd_ffi_maybe_inputs_seen(
    ) -> *mut wire_cst_ffi_maybe_inputs_seen {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_ffi_maybe_inputs_seen::new_with_null_ptr(),
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_cst_new_box_autoadd_ffi_new_receiver(
    ) -> *mut wire_cst_ffi_new_receiver {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_ffi_new_receiver::new_with_null_ptr(),
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_cst_new_box_autoadd_ffi_new_sender(
    ) -> *mut wire_cst_ffi_new_sender {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_ffi_new_sender::new_with_null_ptr(),
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_cst_new_box_autoadd_ffi_ohttp_keys(
    ) -> *mut wire_cst_ffi_ohttp_keys {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_ffi_ohttp_keys::new_with_null_ptr(),
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_cst_new_box_autoadd_ffi_outputs_unknown(
    ) -> *mut wire_cst_ffi_outputs_unknown {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_ffi_outputs_unknown::new_with_null_ptr(),
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_cst_new_box_autoadd_ffi_payjoin_proposal(
    ) -> *mut wire_cst_ffi_payjoin_proposal {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_ffi_payjoin_proposal::new_with_null_ptr(),
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_cst_new_box_autoadd_ffi_provisional_proposal(
    ) -> *mut wire_cst_ffi_provisional_proposal {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_ffi_provisional_proposal::new_with_null_ptr(),
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_cst_new_box_autoadd_ffi_script(
    ) -> *mut wire_cst_ffi_script {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_ffi_script::new_with_null_ptr(),
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_cst_new_box_autoadd_ffi_sender_builder(
    ) -> *mut wire_cst_ffi_sender_builder {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_ffi_sender_builder::new_with_null_ptr(),
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_cst_new_box_autoadd_ffi_unchecked_proposal(
    ) -> *mut wire_cst_ffi_unchecked_proposal {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_ffi_unchecked_proposal::new_with_null_ptr(),
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_cst_new_box_autoadd_ffi_uri() -> *mut wire_cst_ffi_uri
    {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_ffi_uri::new_with_null_ptr())
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_cst_new_box_autoadd_ffi_url() -> *mut wire_cst_ffi_url
    {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_ffi_url::new_with_null_ptr())
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_cst_new_box_autoadd_ffi_v_1_context(
    ) -> *mut wire_cst_ffi_v_1_context {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_ffi_v_1_context::new_with_null_ptr(),
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_cst_new_box_autoadd_ffi_v_2_get_context(
    ) -> *mut wire_cst_ffi_v_2_get_context {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_ffi_v_2_get_context::new_with_null_ptr(),
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_cst_new_box_autoadd_ffi_v_2_post_context(
    ) -> *mut wire_cst_ffi_v_2_post_context {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_ffi_v_2_post_context::new_with_null_ptr(),
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_cst_new_box_autoadd_ffi_wants_inputs(
    ) -> *mut wire_cst_ffi_wants_inputs {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_ffi_wants_inputs::new_with_null_ptr(),
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_cst_new_box_autoadd_ffi_wants_outputs(
    ) -> *mut wire_cst_ffi_wants_outputs {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_ffi_wants_outputs::new_with_null_ptr(),
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_cst_new_box_autoadd_psbt_input(
    ) -> *mut wire_cst_psbt_input {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_psbt_input::new_with_null_ptr(),
        )
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_cst_new_box_autoadd_tx_in() -> *mut wire_cst_tx_in {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_tx_in::new_with_null_ptr())
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_cst_new_box_autoadd_tx_out() -> *mut wire_cst_tx_out {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_tx_out::new_with_null_ptr())
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_cst_new_box_autoadd_u_64(value: u64) -> *mut u64 {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_cst_new_box_autoadd_u_8(value: u8) -> *mut u8 {
        flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_cst_new_list_ffi_input_pair(
        len: i32,
    ) -> *mut wire_cst_list_ffi_input_pair {
        let wrap = wire_cst_list_ffi_input_pair {
            ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
                <wire_cst_ffi_input_pair>::new_with_null_ptr(),
                len,
            ),
            len,
        };
        flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_cst_new_list_list_prim_u_8_strict(
        len: i32,
    ) -> *mut wire_cst_list_list_prim_u_8_strict {
        let wrap = wire_cst_list_list_prim_u_8_strict {
            ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
                <*mut wire_cst_list_prim_u_8_strict>::new_with_null_ptr(),
                len,
            ),
            len,
        };
        flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_cst_new_list_out_point(
        len: i32,
    ) -> *mut wire_cst_list_out_point {
        let wrap = wire_cst_list_out_point {
            ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
                <wire_cst_out_point>::new_with_null_ptr(),
                len,
            ),
            len,
        };
        flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_cst_new_list_prim_u_8_loose(
        len: i32,
    ) -> *mut wire_cst_list_prim_u_8_loose {
        let ans = wire_cst_list_prim_u_8_loose {
            ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
            len,
        };
        flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_cst_new_list_prim_u_8_strict(
        len: i32,
    ) -> *mut wire_cst_list_prim_u_8_strict {
        let ans = wire_cst_list_prim_u_8_strict {
            ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
            len,
        };
        flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_payjoin_flutter_cst_new_list_tx_out(
        len: i32,
    ) -> *mut wire_cst_list_tx_out {
        let wrap = wire_cst_list_tx_out {
            ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
                <wire_cst_tx_out>::new_with_null_ptr(),
                len,
            ),
            len,
        };
        flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
    }

    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_client_response {
        field0: usize,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_ffi_build_sender_error {
        msg: *mut wire_cst_list_prim_u_8_strict,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_ffi_create_request_error {
        msg: *mut wire_cst_list_prim_u_8_strict,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_ffi_encapsulation_error {
        msg: *mut wire_cst_list_prim_u_8_strict,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_ffi_error {
        field0: usize,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_ffi_implementation_error {
        field0: usize,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_ffi_input_contribution_error {
        field0: usize,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_ffi_input_pair {
        field0: usize,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_ffi_into_url_error {
        field0: usize,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_ffi_io_error {
        field0: usize,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_ffi_maybe_inputs_owned {
        field0: usize,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_ffi_maybe_inputs_seen {
        field0: usize,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_ffi_new_receiver {
        field0: usize,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_ffi_new_sender {
        field0: usize,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_ffi_ohttp_error {
        field0: usize,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_ffi_ohttp_keys {
        field0: usize,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_ffi_output_substitution_error {
        field0: usize,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_ffi_outputs_unknown {
        field0: usize,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_ffi_payjoin_proposal {
        field0: usize,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_ffi_pj_not_supported {
        field0: usize,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_ffi_pj_parse_error {
        field0: usize,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_ffi_provisional_proposal {
        field0: usize,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_ffi_psbt_input_error {
        field0: usize,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_ffi_replyable_error {
        field0: usize,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_ffi_response_error {
        field0: usize,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_ffi_script {
        field0: usize,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_ffi_selection_error {
        field0: usize,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_ffi_sender_builder {
        field0: usize,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_ffi_serde_json_error {
        field0: usize,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_ffi_session_error {
        field0: usize,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_ffi_unchecked_proposal {
        field0: usize,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_ffi_uri {
        field0: usize,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_ffi_url {
        field0: usize,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_ffi_url_parse_error {
        field0: usize,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_ffi_v_1_context {
        field0: usize,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_ffi_v_2_get_context {
        field0: usize,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_ffi_v_2_post_context {
        field0: usize,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_ffi_wants_inputs {
        field0: usize,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_ffi_wants_outputs {
        field0: usize,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_list_ffi_input_pair {
        ptr: *mut wire_cst_ffi_input_pair,
        len: i32,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_list_list_prim_u_8_strict {
        ptr: *mut *mut wire_cst_list_prim_u_8_strict,
        len: i32,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_list_out_point {
        ptr: *mut wire_cst_out_point,
        len: i32,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_list_prim_u_8_loose {
        ptr: *mut u8,
        len: i32,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_list_prim_u_8_strict {
        ptr: *mut u8,
        len: i32,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_list_tx_out {
        ptr: *mut wire_cst_tx_out,
        len: i32,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_out_point {
        txid: *mut wire_cst_list_prim_u_8_strict,
        vout: u32,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_psbt_input {
        witness_utxo: *mut wire_cst_tx_out,
        redeem_script: *mut wire_cst_ffi_script,
        witness_script: *mut wire_cst_ffi_script,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_record_request_client_response {
        field0: wire_cst_request,
        field1: wire_cst_client_response,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_record_request_ffi_v_1_context {
        field0: wire_cst_request,
        field1: wire_cst_ffi_v_1_context,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_record_request_ffi_v_2_post_context {
        field0: wire_cst_request,
        field1: wire_cst_ffi_v_2_post_context,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_request {
        url: wire_cst_ffi_url,
        content_type: *mut wire_cst_list_prim_u_8_strict,
        body: *mut wire_cst_list_prim_u_8_strict,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_tx_in {
        previous_output: wire_cst_out_point,
        script_sig: wire_cst_ffi_script,
        sequence: u32,
        witness: *mut wire_cst_list_list_prim_u_8_strict,
    }
    #[repr(C)]
    #[derive(Clone, Copy)]
    pub struct wire_cst_tx_out {
        value: u64,
        script_pubkey: *mut wire_cst_list_prim_u_8_strict,
    }
}
#[cfg(not(target_family = "wasm"))]
pub use io::*;
