// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0.

#![allow(
    non_camel_case_types,
    unused,
    non_snake_case,
    clippy::needless_return,
    clippy::redundant_closure_call,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::unused_unit,
    clippy::double_parens,
    clippy::let_and_return,
    clippy::too_many_arguments,
    clippy::match_single_binding,
    clippy::clone_on_copy,
    clippy::let_unit_value,
    clippy::deref_addrof,
    clippy::explicit_auto_deref,
    clippy::borrow_deref_ref,
    clippy::needless_borrow
)]

// Section: imports

use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
use flutter_rust_bridge::{Handler, IntoIntoDart};

use crate::*;

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate!(
    default_stream_sink_codec = DcoCodec,
    default_rust_opaque = RustOpaqueNom,
    default_rust_auto_opaque = RustAutoOpaqueNom,
);
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str = "2.0.0";
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 = -1997949636;

// Section: executor

flutter_rust_bridge::frb_generated_default_handler!();

// Section: wire_funcs

fn wire__crate__api__bitcoin_ffi__ffi_script_new_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    raw_output_script: impl CstDecode<Vec<u8>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_script_new",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_raw_output_script = raw_output_script.cst_decode();
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(crate::api::bitcoin_ffi::FfiScript::new(
                        api_raw_output_script,
                    ))?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__bitcoin_ffi__ffi_script_to_bytes_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::bitcoin_ffi::FfiScript>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_script_to_bytes",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(
                        crate::api::bitcoin_ffi::FfiScript::to_bytes(&api_that),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__io__fetch_ohttp_keys_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ohttp_relay: impl CstDecode<crate::api::uri::FfiUrl>,
    payjoin_directory: impl CstDecode<crate::api::uri::FfiUrl>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "fetch_ohttp_keys",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_ohttp_relay = ohttp_relay.cst_decode();
            let api_payjoin_directory = payjoin_directory.cst_decode();
            move |context| {
                async move {
                    transform_result_dco::<_, _, crate::utils::error::PayjoinError>(
                        (move || {
                            async move {
                                let output_ok = crate::api::io::fetch_ohttp_keys(
                                    api_ohttp_relay,
                                    api_payjoin_directory,
                                )
                                .await?;
                                Ok(output_ok)
                            }
                        })()
                        .await,
                    )
                }
            }
        },
    )
}
fn wire__crate__api__receive__ffi_input_pair_new_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    txin: impl CstDecode<crate::utils::types::TxIn>,
    psbtin: impl CstDecode<crate::utils::types::PsbtInput>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_input_pair_new",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_txin = txin.cst_decode();
            let api_psbtin = psbtin.cst_decode();
            move |context| {
                transform_result_dco::<_, _, crate::utils::error::PayjoinError>((move || {
                    let output_ok = crate::api::receive::FfiInputPair::new(api_txin, api_psbtin)?;
                    Ok(output_ok)
                })(
                ))
            }
        },
    )
}
fn wire__crate__api__receive__ffi_maybe_inputs_owned_check_inputs_not_owned_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::receive::FfiMaybeInputsOwned>,
    is_owned: impl CstDecode<flutter_rust_bridge::DartOpaque>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_maybe_inputs_owned_check_inputs_not_owned",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_is_owned =
                decode_DartFn_Inputs_list_prim_u_8_strict_Output_bool_AnyhowException(
                    is_owned.cst_decode(),
                );
            move |context| {
                transform_result_dco::<_, _, crate::utils::error::PayjoinError>((move || {
                    let output_ok =
                        crate::api::receive::FfiMaybeInputsOwned::check_inputs_not_owned(
                            &api_that,
                            api_is_owned,
                        )?;
                    Ok(output_ok)
                })(
                ))
            }
        },
    )
}
fn wire__crate__api__receive__ffi_maybe_inputs_seen_check_no_inputs_seen_before_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::receive::FfiMaybeInputsSeen>,
    is_known: impl CstDecode<flutter_rust_bridge::DartOpaque>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_maybe_inputs_seen_check_no_inputs_seen_before",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_is_known =
                decode_DartFn_Inputs_out_point_Output_bool_AnyhowException(is_known.cst_decode());
            move |context| {
                transform_result_dco::<_, _, crate::utils::error::PayjoinError>((move || {
                    let output_ok =
                        crate::api::receive::FfiMaybeInputsSeen::check_no_inputs_seen_before(
                            &api_that,
                            api_is_known,
                        )?;
                    Ok(output_ok)
                })(
                ))
            }
        },
    )
}
fn wire__crate__api__receive__ffi_outputs_unknown_identify_receiver_outputs_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::receive::FfiOutputsUnknown>,
    is_receiver_output: impl CstDecode<flutter_rust_bridge::DartOpaque>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_outputs_unknown_identify_receiver_outputs",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_is_receiver_output =
                decode_DartFn_Inputs_list_prim_u_8_strict_Output_bool_AnyhowException(
                    is_receiver_output.cst_decode(),
                );
            move |context| {
                transform_result_dco::<_, _, crate::utils::error::PayjoinError>((move || {
                    let output_ok =
                        crate::api::receive::FfiOutputsUnknown::identify_receiver_outputs(
                            &api_that,
                            api_is_receiver_output,
                        )?;
                    Ok(output_ok)
                })(
                ))
            }
        },
    )
}
fn wire__crate__api__receive__ffi_payjoin_proposal_extract_v1_req_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::receive::FfiPayjoinProposal>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_payjoin_proposal_extract_v1_req",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(
                        crate::api::receive::FfiPayjoinProposal::extract_v1_req(&api_that),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__receive__ffi_payjoin_proposal_extract_v2_req_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::receive::FfiPayjoinProposal>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_payjoin_proposal_extract_v2_req",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| {
                transform_result_dco::<_, _, crate::utils::error::PayjoinError>((move || {
                    let output_ok =
                        crate::api::receive::FfiPayjoinProposal::extract_v2_req(&api_that)?;
                    Ok(output_ok)
                })(
                ))
            }
        },
    )
}
fn wire__crate__api__receive__ffi_payjoin_proposal_is_output_substitution_disabled_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::receive::FfiPayjoinProposal>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_payjoin_proposal_is_output_substitution_disabled",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(
                        crate::api::receive::FfiPayjoinProposal::is_output_substitution_disabled(
                            &api_that,
                        ),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__receive__ffi_payjoin_proposal_process_res_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::receive::FfiPayjoinProposal>,
    res: impl CstDecode<Vec<u8>>,
    ohttp_context: impl CstDecode<crate::utils::types::ClientResponse>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_payjoin_proposal_process_res",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_res = res.cst_decode();
            let api_ohttp_context = ohttp_context.cst_decode();
            move |context| {
                transform_result_dco::<_, _, crate::utils::error::PayjoinError>((move || {
                    let output_ok = crate::api::receive::FfiPayjoinProposal::process_res(
                        &api_that,
                        &api_res,
                        &api_ohttp_context,
                    )?;
                    Ok(output_ok)
                })(
                ))
            }
        },
    )
}
fn wire__crate__api__receive__ffi_payjoin_proposal_psbt_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::receive::FfiPayjoinProposal>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_payjoin_proposal_psbt",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(
                        crate::api::receive::FfiPayjoinProposal::psbt(&api_that),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__receive__ffi_payjoin_proposal_utxos_to_be_locked_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::receive::FfiPayjoinProposal>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_payjoin_proposal_utxos_to_be_locked",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(
                        crate::api::receive::FfiPayjoinProposal::utxos_to_be_locked(&api_that),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__receive__ffi_provisional_proposal_finalize_proposal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::receive::FfiProvisionalProposal>,
    process_psbt: impl CstDecode<flutter_rust_bridge::DartOpaque>,
    min_fee_rate_sat_per_vb: impl CstDecode<Option<u64>>,
    max_fee_rate_sat_per_vb: impl CstDecode<u64>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_provisional_proposal_finalize_proposal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_process_psbt = decode_DartFn_Inputs_String_Output_String_AnyhowException(
                process_psbt.cst_decode(),
            );
            let api_min_fee_rate_sat_per_vb = min_fee_rate_sat_per_vb.cst_decode();
            let api_max_fee_rate_sat_per_vb = max_fee_rate_sat_per_vb.cst_decode();
            move |context| {
                transform_result_dco::<_, _, crate::utils::error::PayjoinError>((move || {
                    let output_ok = crate::api::receive::FfiProvisionalProposal::finalize_proposal(
                        &api_that,
                        api_process_psbt,
                        api_min_fee_rate_sat_per_vb,
                        api_max_fee_rate_sat_per_vb,
                    )?;
                    Ok(output_ok)
                })(
                ))
            }
        },
    )
}
fn wire__crate__api__receive__ffi_receiver_create_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    address: impl CstDecode<String>,
    network: impl CstDecode<crate::utils::types::Network>,
    directory: impl CstDecode<crate::api::uri::FfiUrl>,
    ohttp_keys: impl CstDecode<crate::api::uri::FfiOhttpKeys>,
    ohttp_relay: impl CstDecode<crate::api::uri::FfiUrl>,
    expire_after: impl CstDecode<Option<u64>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_receiver_create",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_address = address.cst_decode();
            let api_network = network.cst_decode();
            let api_directory = directory.cst_decode();
            let api_ohttp_keys = ohttp_keys.cst_decode();
            let api_ohttp_relay = ohttp_relay.cst_decode();
            let api_expire_after = expire_after.cst_decode();
            move |context| {
                transform_result_dco::<_, _, crate::utils::error::PayjoinError>((move || {
                    let output_ok = crate::api::receive::FfiReceiver::create(
                        api_address,
                        api_network,
                        api_directory,
                        api_ohttp_keys,
                        api_ohttp_relay,
                        api_expire_after,
                    )?;
                    Ok(output_ok)
                })(
                ))
            }
        },
    )
}
fn wire__crate__api__receive__ffi_receiver_extract_req_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::receive::FfiReceiver>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_receiver_extract_req",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| {
                transform_result_dco::<_, _, crate::utils::error::PayjoinError>((move || {
                    let output_ok = crate::api::receive::FfiReceiver::extract_req(&api_that)?;
                    Ok(output_ok)
                })(
                ))
            }
        },
    )
}
fn wire__crate__api__receive__ffi_receiver_from_json_impl(
    json: impl CstDecode<String>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_receiver_from_json",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_json = json.cst_decode();
            transform_result_dco::<_, _, crate::utils::error::PayjoinError>((move || {
                let output_ok = crate::api::receive::FfiReceiver::from_json(api_json)?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__receive__ffi_receiver_id_impl(
    that: impl CstDecode<crate::api::receive::FfiReceiver>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_receiver_id",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok =
                    Result::<_, ()>::Ok(crate::api::receive::FfiReceiver::id(&api_that))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__receive__ffi_receiver_pj_uri_builder_impl(
    that: impl CstDecode<crate::api::receive::FfiReceiver>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_receiver_pj_uri_builder",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::api::receive::FfiReceiver::pj_uri_builder(&api_that),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__receive__ffi_receiver_pj_url_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::receive::FfiReceiver>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_receiver_pj_url",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(crate::api::receive::FfiReceiver::pj_url(&api_that))?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__receive__ffi_receiver_process_res_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::receive::FfiReceiver>,
    body: impl CstDecode<Vec<u8>>,
    ctx: impl CstDecode<crate::utils::types::ClientResponse>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_receiver_process_res",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_body = body.cst_decode();
            let api_ctx = ctx.cst_decode();
            move |context| {
                transform_result_dco::<_, _, crate::utils::error::PayjoinError>((move || {
                    let output_ok = crate::api::receive::FfiReceiver::process_res(
                        &api_that, &api_body, &api_ctx,
                    )?;
                    Ok(output_ok)
                })(
                ))
            }
        },
    )
}
fn wire__crate__api__receive__ffi_receiver_to_json_impl(
    that: impl CstDecode<crate::api::receive::FfiReceiver>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_receiver_to_json",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, crate::utils::error::PayjoinError>((move || {
                let output_ok = crate::api::receive::FfiReceiver::to_json(&api_that)?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__receive__ffi_unchecked_proposal_assume_interactive_receiver_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::receive::FfiUncheckedProposal>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_unchecked_proposal_assume_interactive_receiver",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(
                        crate::api::receive::FfiUncheckedProposal::assume_interactive_receiver(
                            &api_that,
                        ),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__receive__ffi_unchecked_proposal_check_broadcast_suitability_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::receive::FfiUncheckedProposal>,
    min_fee_rate: impl CstDecode<Option<u64>>,
    can_broadcast: impl CstDecode<flutter_rust_bridge::DartOpaque>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_unchecked_proposal_check_broadcast_suitability",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_min_fee_rate = min_fee_rate.cst_decode();
            let api_can_broadcast =
                decode_DartFn_Inputs_list_prim_u_8_strict_Output_bool_AnyhowException(
                    can_broadcast.cst_decode(),
                );
            move |context| {
                transform_result_dco::<_, _, crate::utils::error::PayjoinError>((move || {
                    let output_ok =
                        crate::api::receive::FfiUncheckedProposal::check_broadcast_suitability(
                            &api_that,
                            api_min_fee_rate,
                            api_can_broadcast,
                        )?;
                    Ok(output_ok)
                })(
                ))
            }
        },
    )
}
fn wire__crate__api__receive__ffi_unchecked_proposal_extract_tx_to_schedule_broadcast_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::receive::FfiUncheckedProposal>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_unchecked_proposal_extract_tx_to_schedule_broadcast",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(
                        crate::api::receive::FfiUncheckedProposal::extract_tx_to_schedule_broadcast(
                            &api_that,
                        ),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__receive__ffi_wants_inputs_commit_inputs_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::receive::FfiWantsInputs>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_wants_inputs_commit_inputs",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(
                        crate::api::receive::FfiWantsInputs::commit_inputs(&api_that),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__receive__ffi_wants_inputs_contribute_inputs_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::receive::FfiWantsInputs>,
    replacement_inputs: impl CstDecode<Vec<crate::api::receive::FfiInputPair>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_wants_inputs_contribute_inputs",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_replacement_inputs = replacement_inputs.cst_decode();
            move |context| {
                transform_result_dco::<_, _, crate::utils::error::PayjoinError>((move || {
                    let output_ok = crate::api::receive::FfiWantsInputs::contribute_inputs(
                        &api_that,
                        api_replacement_inputs,
                    )?;
                    Ok(output_ok)
                })(
                ))
            }
        },
    )
}
fn wire__crate__api__receive__ffi_wants_inputs_try_preserving_privacy_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::receive::FfiWantsInputs>,
    candidate_inputs: impl CstDecode<Vec<crate::api::receive::FfiInputPair>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_wants_inputs_try_preserving_privacy",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_candidate_inputs = candidate_inputs.cst_decode();
            move |context| {
                transform_result_dco::<_, _, crate::utils::error::PayjoinError>((move || {
                    let output_ok = crate::api::receive::FfiWantsInputs::try_preserving_privacy(
                        &api_that,
                        api_candidate_inputs,
                    )?;
                    Ok(output_ok)
                })(
                ))
            }
        },
    )
}
fn wire__crate__api__receive__ffi_wants_outputs_commit_outputs_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::receive::FfiWantsOutputs>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_wants_outputs_commit_outputs",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(
                        crate::api::receive::FfiWantsOutputs::commit_outputs(&api_that),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__receive__ffi_wants_outputs_is_output_substitution_disabled_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::receive::FfiWantsOutputs>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_wants_outputs_is_output_substitution_disabled",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(
                        crate::api::receive::FfiWantsOutputs::is_output_substitution_disabled(
                            &api_that,
                        ),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__receive__ffi_wants_outputs_replace_receiver_outputs_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::receive::FfiWantsOutputs>,
    replacement_outputs: impl CstDecode<Vec<crate::utils::types::TxOut>>,
    drain_script: impl CstDecode<crate::api::bitcoin_ffi::FfiScript>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_wants_outputs_replace_receiver_outputs",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_replacement_outputs = replacement_outputs.cst_decode();
            let api_drain_script = drain_script.cst_decode();
            move |context| {
                transform_result_dco::<_, _, crate::utils::error::PayjoinError>((move || {
                    let output_ok = crate::api::receive::FfiWantsOutputs::replace_receiver_outputs(
                        &api_that,
                        api_replacement_outputs,
                        &api_drain_script,
                    )?;
                    Ok(output_ok)
                })(
                ))
            }
        },
    )
}
fn wire__crate__api__receive__ffi_wants_outputs_substitute_receiver_script_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::receive::FfiWantsOutputs>,
    output_script: impl CstDecode<crate::api::bitcoin_ffi::FfiScript>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_wants_outputs_substitute_receiver_script",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_output_script = output_script.cst_decode();
            move |context| {
                transform_result_dco::<_, _, crate::utils::error::PayjoinError>((move || {
                    let output_ok =
                        crate::api::receive::FfiWantsOutputs::substitute_receiver_script(
                            &api_that,
                            &api_output_script,
                        )?;
                    Ok(output_ok)
                })(
                ))
            }
        },
    )
}
fn wire__crate__api__send__ffi_sender_builder_always_disable_output_substitution_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::send::FfiSenderBuilder>,
    disable: impl CstDecode<bool>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_sender_builder_always_disable_output_substitution",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_disable = disable.cst_decode();
            move |context| {
                transform_result_dco::<_, _, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(
                        crate::api::send::FfiSenderBuilder::always_disable_output_substitution(
                            &api_that,
                            api_disable,
                        ),
                    )?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__send__ffi_sender_builder_build_non_incentivizing_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::send::FfiSenderBuilder>,
    min_fee_rate: impl CstDecode<u64>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_sender_builder_build_non_incentivizing",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_min_fee_rate = min_fee_rate.cst_decode();
            move |context| {
                transform_result_dco::<_, _, crate::utils::error::PayjoinError>((move || {
                    let output_ok = crate::api::send::FfiSenderBuilder::build_non_incentivizing(
                        &api_that,
                        api_min_fee_rate,
                    )?;
                    Ok(output_ok)
                })(
                ))
            }
        },
    )
}
fn wire__crate__api__send__ffi_sender_builder_build_recommended_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::send::FfiSenderBuilder>,
    min_fee_rate: impl CstDecode<u64>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_sender_builder_build_recommended",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_min_fee_rate = min_fee_rate.cst_decode();
            move |context| {
                transform_result_dco::<_, _, crate::utils::error::PayjoinError>((move || {
                    let output_ok = crate::api::send::FfiSenderBuilder::build_recommended(
                        &api_that,
                        api_min_fee_rate,
                    )?;
                    Ok(output_ok)
                })(
                ))
            }
        },
    )
}
fn wire__crate__api__send__ffi_sender_builder_build_with_additional_fee_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::send::FfiSenderBuilder>,
    max_fee_contribution: impl CstDecode<u64>,
    change_index: impl CstDecode<Option<u8>>,
    min_fee_rate: impl CstDecode<u64>,
    clamp_fee_contribution: impl CstDecode<bool>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_sender_builder_build_with_additional_fee",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_max_fee_contribution = max_fee_contribution.cst_decode();
            let api_change_index = change_index.cst_decode();
            let api_min_fee_rate = min_fee_rate.cst_decode();
            let api_clamp_fee_contribution = clamp_fee_contribution.cst_decode();
            move |context| {
                transform_result_dco::<_, _, crate::utils::error::PayjoinError>((move || {
                    let output_ok = crate::api::send::FfiSenderBuilder::build_with_additional_fee(
                        &api_that,
                        api_max_fee_contribution,
                        api_change_index,
                        api_min_fee_rate,
                        api_clamp_fee_contribution,
                    )?;
                    Ok(output_ok)
                })(
                ))
            }
        },
    )
}
fn wire__crate__api__send__ffi_sender_builder_from_psbt_and_uri_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    psbt_base64: impl CstDecode<String>,
    pj_uri: impl CstDecode<crate::api::uri::FfiPjUri>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_sender_builder_from_psbt_and_uri",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_psbt_base64 = psbt_base64.cst_decode();
            let api_pj_uri = pj_uri.cst_decode();
            move |context| {
                transform_result_dco::<_, _, crate::utils::error::PayjoinError>((move || {
                    let output_ok = crate::api::send::FfiSenderBuilder::from_psbt_and_uri(
                        api_psbt_base64,
                        api_pj_uri,
                    )?;
                    Ok(output_ok)
                })(
                ))
            }
        },
    )
}
fn wire__crate__api__send__ffi_sender_extract_v1_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::send::FfiSender>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_sender_extract_v1",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| {
                transform_result_dco::<_, _, crate::utils::error::PayjoinError>((move || {
                    let output_ok = crate::api::send::FfiSender::extract_v1(&api_that)?;
                    Ok(output_ok)
                })(
                ))
            }
        },
    )
}
fn wire__crate__api__send__ffi_sender_extract_v2_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::send::FfiSender>,
    ohttp_proxy_url: impl CstDecode<crate::api::uri::FfiUrl>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_sender_extract_v2",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_ohttp_proxy_url = ohttp_proxy_url.cst_decode();
            move |context| {
                transform_result_dco::<_, _, crate::utils::error::PayjoinError>((move || {
                    let output_ok =
                        crate::api::send::FfiSender::extract_v2(&api_that, api_ohttp_proxy_url)?;
                    Ok(output_ok)
                })(
                ))
            }
        },
    )
}
fn wire__crate__api__send__ffi_sender_from_json_impl(
    json: impl CstDecode<String>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_sender_from_json",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_json = json.cst_decode();
            transform_result_dco::<_, _, crate::utils::error::PayjoinError>((move || {
                let output_ok = crate::api::send::FfiSender::from_json(api_json)?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__send__ffi_sender_to_json_impl(
    that: impl CstDecode<crate::api::send::FfiSender>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_sender_to_json",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, crate::utils::error::PayjoinError>((move || {
                let output_ok = crate::api::send::FfiSender::to_json(&api_that)?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__send__ffi_v_1_context_process_response_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::send::FfiV1Context>,
    response: impl CstDecode<Vec<u8>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_v_1_context_process_response",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_response = response.cst_decode();
            move |context| {
                transform_result_dco::<_, _, crate::utils::error::PayjoinError>((move || {
                    let output_ok =
                        crate::api::send::FfiV1Context::process_response(&api_that, api_response)?;
                    Ok(output_ok)
                })(
                ))
            }
        },
    )
}
fn wire__crate__api__send__ffi_v_2_get_context_extract_req_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::send::FfiV2GetContext>,
    ohttp_relay: impl CstDecode<crate::api::uri::FfiUrl>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_v_2_get_context_extract_req",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_ohttp_relay = ohttp_relay.cst_decode();
            move |context| {
                transform_result_dco::<_, _, crate::utils::error::PayjoinError>((move || {
                    let output_ok =
                        crate::api::send::FfiV2GetContext::extract_req(&api_that, api_ohttp_relay)?;
                    Ok(output_ok)
                })(
                ))
            }
        },
    )
}
fn wire__crate__api__send__ffi_v_2_get_context_process_response_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::send::FfiV2GetContext>,
    response: impl CstDecode<Vec<u8>>,
    ohttp_ctx: impl CstDecode<crate::utils::types::ClientResponse>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_v_2_get_context_process_response",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_response = response.cst_decode();
            let api_ohttp_ctx = ohttp_ctx.cst_decode();
            move |context| {
                transform_result_dco::<_, _, crate::utils::error::PayjoinError>((move || {
                    let output_ok = crate::api::send::FfiV2GetContext::process_response(
                        &api_that,
                        &api_response,
                        &api_ohttp_ctx,
                    )?;
                    Ok(output_ok)
                })(
                ))
            }
        },
    )
}
fn wire__crate__api__send__ffi_v_2_post_context_process_response_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::send::FfiV2PostContext>,
    response: impl CstDecode<Vec<u8>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_v_2_post_context_process_response",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_response = response.cst_decode();
            move |context| {
                transform_result_dco::<_, _, crate::utils::error::PayjoinError>((move || {
                    let output_ok = crate::api::send::FfiV2PostContext::process_response(
                        &api_that,
                        &api_response,
                    )?;
                    Ok(output_ok)
                })(
                ))
            }
        },
    )
}
fn wire__crate__api__uri__ffi_ohttp_keys_decode_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    bytes: impl CstDecode<Vec<u8>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_ohttp_keys_decode",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_bytes = bytes.cst_decode();
            move |context| {
                transform_result_dco::<_, _, crate::utils::error::PayjoinError>((move || {
                    let output_ok = crate::api::uri::FfiOhttpKeys::decode(api_bytes)?;
                    Ok(output_ok)
                })(
                ))
            }
        },
    )
}
fn wire__crate__api__uri__ffi_pj_uri_address_impl(
    that: impl CstDecode<crate::api::uri::FfiPjUri>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_pj_uri_address",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(crate::api::uri::FfiPjUri::address(&api_that))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__uri__ffi_pj_uri_amount_sats_impl(
    that: impl CstDecode<crate::api::uri::FfiPjUri>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_pj_uri_amount_sats",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok =
                    Result::<_, ()>::Ok(crate::api::uri::FfiPjUri::amount_sats(&api_that))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__uri__ffi_pj_uri_as_string_impl(
    that: impl CstDecode<crate::api::uri::FfiPjUri>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_pj_uri_as_string",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok =
                    Result::<_, ()>::Ok(crate::api::uri::FfiPjUri::as_string(&api_that))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__uri__ffi_pj_uri_builder_amount_sats_impl(
    that: impl CstDecode<crate::api::uri::FfiPjUriBuilder>,
    amount: impl CstDecode<u64>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_pj_uri_builder_amount_sats",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_amount = amount.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::api::uri::FfiPjUriBuilder::amount_sats(&api_that, api_amount),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__uri__ffi_pj_uri_builder_build_impl(
    that: impl CstDecode<crate::api::uri::FfiPjUriBuilder>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_pj_uri_builder_build",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok =
                    Result::<_, ()>::Ok(crate::api::uri::FfiPjUriBuilder::build(&api_that))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__uri__ffi_pj_uri_builder_label_impl(
    that: impl CstDecode<crate::api::uri::FfiPjUriBuilder>,
    label: impl CstDecode<String>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_pj_uri_builder_label",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_label = label.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(crate::api::uri::FfiPjUriBuilder::label(
                    &api_that, api_label,
                ))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__uri__ffi_pj_uri_builder_message_impl(
    that: impl CstDecode<crate::api::uri::FfiPjUriBuilder>,
    message: impl CstDecode<String>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_pj_uri_builder_message",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_message = message.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(crate::api::uri::FfiPjUriBuilder::message(
                    &api_that,
                    api_message,
                ))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__uri__ffi_pj_uri_builder_pjos_impl(
    that: impl CstDecode<crate::api::uri::FfiPjUriBuilder>,
    pjos: impl CstDecode<bool>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_pj_uri_builder_pjos",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_pjos = pjos.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(crate::api::uri::FfiPjUriBuilder::pjos(
                    &api_that, api_pjos,
                ))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__uri__ffi_pj_uri_pj_endpoint_impl(
    that: impl CstDecode<crate::api::uri::FfiPjUri>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_pj_uri_pj_endpoint",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok =
                    Result::<_, ()>::Ok(crate::api::uri::FfiPjUri::pj_endpoint(&api_that))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__uri__ffi_uri_address_impl(
    that: impl CstDecode<crate::api::uri::FfiUri>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_uri_address",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(crate::api::uri::FfiUri::address(&api_that))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__uri__ffi_uri_amount_sats_impl(
    that: impl CstDecode<crate::api::uri::FfiUri>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_uri_amount_sats",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok =
                    Result::<_, ()>::Ok(crate::api::uri::FfiUri::amount_sats(&api_that))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__uri__ffi_uri_as_string_impl(
    that: impl CstDecode<crate::api::uri::FfiUri>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_uri_as_string",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(crate::api::uri::FfiUri::as_string(&api_that))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__uri__ffi_uri_check_pj_supported_impl(
    that: impl CstDecode<crate::api::uri::FfiUri>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_uri_check_pj_supported",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, crate::utils::error::PayjoinError>((move || {
                let output_ok = crate::api::uri::FfiUri::check_pj_supported(&api_that)?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__uri__ffi_uri_label_impl(
    that: impl CstDecode<crate::api::uri::FfiUri>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_uri_label",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(crate::api::uri::FfiUri::label(&api_that))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__uri__ffi_uri_message_impl(
    that: impl CstDecode<crate::api::uri::FfiUri>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_uri_message",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(crate::api::uri::FfiUri::message(&api_that))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__uri__ffi_uri_parse_impl(
    uri: impl CstDecode<String>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_uri_parse",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_uri = uri.cst_decode();
            transform_result_dco::<_, _, crate::utils::error::PayjoinError>((move || {
                let output_ok = crate::api::uri::FfiUri::parse(api_uri)?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__uri__ffi_url_as_string_impl(
    that: impl CstDecode<crate::api::uri::FfiUrl>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_url_as_string",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(crate::api::uri::FfiUrl::as_string(&api_that))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__uri__ffi_url_parse_impl(
    url: impl CstDecode<String>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_url_parse",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_url = url.cst_decode();
            transform_result_dco::<_, _, crate::utils::error::PayjoinError>((move || {
                let output_ok = crate::api::uri::FfiUrl::parse(api_url)?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__uri__ffi_url_query_impl(
    that: impl CstDecode<crate::api::uri::FfiUrl>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ffi_url_query",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco::<_, _, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(crate::api::uri::FfiUrl::query(&api_that))?;
                Ok(output_ok)
            })())
        },
    )
}

// Section: related_funcs

fn decode_DartFn_Inputs_String_Output_String_AnyhowException(
    dart_opaque: flutter_rust_bridge::DartOpaque,
) -> impl Fn(String) -> flutter_rust_bridge::DartFnFuture<String> {
    use flutter_rust_bridge::IntoDart;

    async fn body(dart_opaque: flutter_rust_bridge::DartOpaque, arg0: String) -> String {
        let args = vec![arg0.into_into_dart().into_dart()];
        let message = FLUTTER_RUST_BRIDGE_HANDLER.dart_fn_invoke(dart_opaque, args).await;

        let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
        let action = deserializer.cursor.read_u8().unwrap();
        let ans = match action {
            0 => std::result::Result::Ok(<String>::sse_decode(&mut deserializer)),
            1 => {
                std::result::Result::Err(
                    <flutter_rust_bridge::for_generated::anyhow::Error>::sse_decode(
                        &mut deserializer,
                    ),
                )
            }
            _ => unreachable!(),
        };
        deserializer.end();
        let ans = ans.expect("Dart throws exception but Rust side assume it is not failable");
        ans
    }

    move |arg0: String| {
        flutter_rust_bridge::for_generated::convert_into_dart_fn_future(body(
            dart_opaque.clone(),
            arg0,
        ))
    }
}
fn decode_DartFn_Inputs_list_prim_u_8_strict_Output_bool_AnyhowException(
    dart_opaque: flutter_rust_bridge::DartOpaque,
) -> impl Fn(Vec<u8>) -> flutter_rust_bridge::DartFnFuture<bool> {
    use flutter_rust_bridge::IntoDart;

    async fn body(dart_opaque: flutter_rust_bridge::DartOpaque, arg0: Vec<u8>) -> bool {
        let args = vec![arg0.into_into_dart().into_dart()];
        let message = FLUTTER_RUST_BRIDGE_HANDLER.dart_fn_invoke(dart_opaque, args).await;

        let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
        let action = deserializer.cursor.read_u8().unwrap();
        let ans = match action {
            0 => std::result::Result::Ok(<bool>::sse_decode(&mut deserializer)),
            1 => {
                std::result::Result::Err(
                    <flutter_rust_bridge::for_generated::anyhow::Error>::sse_decode(
                        &mut deserializer,
                    ),
                )
            }
            _ => unreachable!(),
        };
        deserializer.end();
        let ans = ans.expect("Dart throws exception but Rust side assume it is not failable");
        ans
    }

    move |arg0: Vec<u8>| {
        flutter_rust_bridge::for_generated::convert_into_dart_fn_future(body(
            dart_opaque.clone(),
            arg0,
        ))
    }
}
fn decode_DartFn_Inputs_out_point_Output_bool_AnyhowException(
    dart_opaque: flutter_rust_bridge::DartOpaque,
) -> impl Fn(crate::utils::types::OutPoint) -> flutter_rust_bridge::DartFnFuture<bool> {
    use flutter_rust_bridge::IntoDart;

    async fn body(
        dart_opaque: flutter_rust_bridge::DartOpaque,
        arg0: crate::utils::types::OutPoint,
    ) -> bool {
        let args = vec![arg0.into_into_dart().into_dart()];
        let message = FLUTTER_RUST_BRIDGE_HANDLER.dart_fn_invoke(dart_opaque, args).await;

        let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
        let action = deserializer.cursor.read_u8().unwrap();
        let ans = match action {
            0 => std::result::Result::Ok(<bool>::sse_decode(&mut deserializer)),
            1 => {
                std::result::Result::Err(
                    <flutter_rust_bridge::for_generated::anyhow::Error>::sse_decode(
                        &mut deserializer,
                    ),
                )
            }
            _ => unreachable!(),
        };
        deserializer.end();
        let ans = ans.expect("Dart throws exception but Rust side assume it is not failable");
        ans
    }

    move |arg0: crate::utils::types::OutPoint| {
        flutter_rust_bridge::for_generated::convert_into_dart_fn_future(body(
            dart_opaque.clone(),
            arg0,
        ))
    }
}

// Section: dart2rust

impl CstDecode<bool> for bool {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> bool {
        self
    }
}
impl CstDecode<i32> for i32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> i32 {
        self
    }
}
impl CstDecode<crate::utils::types::Network> for i32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::utils::types::Network {
        match self {
            0 => crate::utils::types::Network::Testnet,
            1 => crate::utils::types::Network::Regtest,
            2 => crate::utils::types::Network::Bitcoin,
            3 => crate::utils::types::Network::Signet,
            _ => unreachable!("Invalid variant for Network: {}", self),
        }
    }
}
impl CstDecode<u32> for u32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> u32 {
        self
    }
}
impl CstDecode<u64> for u64 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> u64 {
        self
    }
}
impl CstDecode<u8> for u8 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> u8 {
        self
    }
}
impl CstDecode<usize> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> usize {
        self
    }
}
impl SseDecode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <String>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::anyhow::anyhow!("{}", inner);
    }
}

impl SseDecode for flutter_rust_bridge::DartOpaque {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { flutter_rust_bridge::for_generated::sse_decode_dart_opaque(inner) };
    }
}

impl SseDecode for RustOpaqueNom<bitcoin_ffi::Script> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<payjoin_ffi::OhttpKeys> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<payjoin_ffi::Url> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<payjoin_ffi::receive::InputPair> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<payjoin_ffi::receive::MaybeInputsOwned> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<payjoin_ffi::receive::MaybeInputsSeen> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<payjoin_ffi::receive::OutputsUnknown> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<payjoin_ffi::receive::PayjoinProposal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<payjoin_ffi::receive::ProvisionalProposal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<payjoin_ffi::receive::Receiver> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<payjoin_ffi::receive::UncheckedProposal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<payjoin_ffi::receive::WantsInputs> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<payjoin_ffi::receive::WantsOutputs> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<payjoin_ffi::send::Sender> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<payjoin_ffi::send::SenderBuilder> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<payjoin_ffi::send::V1Context> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<payjoin_ffi::send::V2GetContext> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<payjoin_ffi::send::V2PostContext> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<payjoin_ffi::uri::PjUri> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<payjoin_ffi::uri::PjUriBuilder> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<payjoin_ffi::uri::Uri> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<std::sync::Mutex<core::option::Option<payjoin_ffi::ClientResponse>>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return String::from_utf8(inner).unwrap();
    }
}

impl SseDecode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap() != 0
    }
}

impl SseDecode for crate::utils::types::ClientResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <RustOpaqueNom<
            std::sync::Mutex<core::option::Option<payjoin_ffi::ClientResponse>>,
        >>::sse_decode(deserializer);
        return crate::utils::types::ClientResponse(var_field0);
    }
}

impl SseDecode for crate::api::receive::FfiInputPair {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 =
            <RustOpaqueNom<payjoin_ffi::receive::InputPair>>::sse_decode(deserializer);
        return crate::api::receive::FfiInputPair(var_field0);
    }
}

impl SseDecode for crate::api::receive::FfiMaybeInputsOwned {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 =
            <RustOpaqueNom<payjoin_ffi::receive::MaybeInputsOwned>>::sse_decode(deserializer);
        return crate::api::receive::FfiMaybeInputsOwned(var_field0);
    }
}

impl SseDecode for crate::api::receive::FfiMaybeInputsSeen {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 =
            <RustOpaqueNom<payjoin_ffi::receive::MaybeInputsSeen>>::sse_decode(deserializer);
        return crate::api::receive::FfiMaybeInputsSeen(var_field0);
    }
}

impl SseDecode for crate::api::uri::FfiOhttpKeys {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <RustOpaqueNom<payjoin_ffi::OhttpKeys>>::sse_decode(deserializer);
        return crate::api::uri::FfiOhttpKeys(var_field0);
    }
}

impl SseDecode for crate::api::receive::FfiOutputsUnknown {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 =
            <RustOpaqueNom<payjoin_ffi::receive::OutputsUnknown>>::sse_decode(deserializer);
        return crate::api::receive::FfiOutputsUnknown(var_field0);
    }
}

impl SseDecode for crate::api::receive::FfiPayjoinProposal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 =
            <RustOpaqueNom<payjoin_ffi::receive::PayjoinProposal>>::sse_decode(deserializer);
        return crate::api::receive::FfiPayjoinProposal(var_field0);
    }
}

impl SseDecode for crate::api::uri::FfiPjUri {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <RustOpaqueNom<payjoin_ffi::uri::PjUri>>::sse_decode(deserializer);
        return crate::api::uri::FfiPjUri(var_field0);
    }
}

impl SseDecode for crate::api::uri::FfiPjUriBuilder {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_internal =
            <RustOpaqueNom<payjoin_ffi::uri::PjUriBuilder>>::sse_decode(deserializer);
        return crate::api::uri::FfiPjUriBuilder { internal: var_internal };
    }
}

impl SseDecode for crate::api::receive::FfiProvisionalProposal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 =
            <RustOpaqueNom<payjoin_ffi::receive::ProvisionalProposal>>::sse_decode(deserializer);
        return crate::api::receive::FfiProvisionalProposal(var_field0);
    }
}

impl SseDecode for crate::api::receive::FfiReceiver {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 =
            <RustOpaqueNom<payjoin_ffi::receive::Receiver>>::sse_decode(deserializer);
        return crate::api::receive::FfiReceiver(var_field0);
    }
}

impl SseDecode for crate::api::bitcoin_ffi::FfiScript {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <RustOpaqueNom<bitcoin_ffi::Script>>::sse_decode(deserializer);
        return crate::api::bitcoin_ffi::FfiScript(var_field0);
    }
}

impl SseDecode for crate::api::send::FfiSender {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <RustOpaqueNom<payjoin_ffi::send::Sender>>::sse_decode(deserializer);
        return crate::api::send::FfiSender(var_field0);
    }
}

impl SseDecode for crate::api::send::FfiSenderBuilder {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 =
            <RustOpaqueNom<payjoin_ffi::send::SenderBuilder>>::sse_decode(deserializer);
        return crate::api::send::FfiSenderBuilder(var_field0);
    }
}

impl SseDecode for crate::api::receive::FfiUncheckedProposal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 =
            <RustOpaqueNom<payjoin_ffi::receive::UncheckedProposal>>::sse_decode(deserializer);
        return crate::api::receive::FfiUncheckedProposal(var_field0);
    }
}

impl SseDecode for crate::api::uri::FfiUri {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <RustOpaqueNom<payjoin_ffi::uri::Uri>>::sse_decode(deserializer);
        return crate::api::uri::FfiUri(var_field0);
    }
}

impl SseDecode for crate::api::uri::FfiUrl {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <RustOpaqueNom<payjoin_ffi::Url>>::sse_decode(deserializer);
        return crate::api::uri::FfiUrl(var_field0);
    }
}

impl SseDecode for crate::api::send::FfiV1Context {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 =
            <RustOpaqueNom<payjoin_ffi::send::V1Context>>::sse_decode(deserializer);
        return crate::api::send::FfiV1Context(var_field0);
    }
}

impl SseDecode for crate::api::send::FfiV2GetContext {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 =
            <RustOpaqueNom<payjoin_ffi::send::V2GetContext>>::sse_decode(deserializer);
        return crate::api::send::FfiV2GetContext(var_field0);
    }
}

impl SseDecode for crate::api::send::FfiV2PostContext {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 =
            <RustOpaqueNom<payjoin_ffi::send::V2PostContext>>::sse_decode(deserializer);
        return crate::api::send::FfiV2PostContext(var_field0);
    }
}

impl SseDecode for crate::api::receive::FfiWantsInputs {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 =
            <RustOpaqueNom<payjoin_ffi::receive::WantsInputs>>::sse_decode(deserializer);
        return crate::api::receive::FfiWantsInputs(var_field0);
    }
}

impl SseDecode for crate::api::receive::FfiWantsOutputs {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 =
            <RustOpaqueNom<payjoin_ffi::receive::WantsOutputs>>::sse_decode(deserializer);
        return crate::api::receive::FfiWantsOutputs(var_field0);
    }
}

impl SseDecode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for Vec<crate::api::receive::FfiInputPair> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::receive::FfiInputPair>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<Vec<u8>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<Vec<u8>>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::utils::types::OutPoint> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::utils::types::OutPoint>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u8>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::utils::types::TxOut> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::utils::types::TxOut>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for crate::utils::types::Network {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::utils::types::Network::Testnet,
            1 => crate::utils::types::Network::Regtest,
            2 => crate::utils::types::Network::Bitcoin,
            3 => crate::utils::types::Network::Signet,
            _ => unreachable!("Invalid variant for Network: {}", inner),
        };
    }
}

impl SseDecode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<String>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::bitcoin_ffi::FfiScript> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::bitcoin_ffi::FfiScript>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::receive::FfiUncheckedProposal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::receive::FfiUncheckedProposal>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::utils::types::TxOut> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::utils::types::TxOut>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<u64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<u64>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<u8>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for crate::utils::types::OutPoint {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_txid = <String>::sse_decode(deserializer);
        let mut var_vout = <u32>::sse_decode(deserializer);
        return crate::utils::types::OutPoint { txid: var_txid, vout: var_vout };
    }
}

impl SseDecode for crate::utils::error::PayjoinError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_message = <String>::sse_decode(deserializer);
                return crate::utils::error::PayjoinError::InvalidAddress { message: var_message };
            }
            1 => {
                let mut var_message = <String>::sse_decode(deserializer);
                return crate::utils::error::PayjoinError::InvalidScript { message: var_message };
            }
            2 => {
                let mut var_message = <String>::sse_decode(deserializer);
                return crate::utils::error::PayjoinError::NetworkValidation {
                    message: var_message,
                };
            }
            3 => {
                let mut var_message = <String>::sse_decode(deserializer);
                return crate::utils::error::PayjoinError::PsbtParseError { message: var_message };
            }
            4 => {
                let mut var_message = <String>::sse_decode(deserializer);
                return crate::utils::error::PayjoinError::ResponseError { message: var_message };
            }
            5 => {
                let mut var_message = <String>::sse_decode(deserializer);
                return crate::utils::error::PayjoinError::RequestError { message: var_message };
            }
            6 => {
                let mut var_message = <String>::sse_decode(deserializer);
                return crate::utils::error::PayjoinError::TransactionError {
                    message: var_message,
                };
            }
            7 => {
                let mut var_message = <String>::sse_decode(deserializer);
                return crate::utils::error::PayjoinError::ServerError { message: var_message };
            }
            8 => {
                let mut var_message = <String>::sse_decode(deserializer);
                return crate::utils::error::PayjoinError::SelectionError { message: var_message };
            }
            9 => {
                let mut var_message = <String>::sse_decode(deserializer);
                return crate::utils::error::PayjoinError::CreateRequestError {
                    message: var_message,
                };
            }
            10 => {
                let mut var_message = <String>::sse_decode(deserializer);
                return crate::utils::error::PayjoinError::PjParseError { message: var_message };
            }
            11 => {
                let mut var_message = <String>::sse_decode(deserializer);
                return crate::utils::error::PayjoinError::PjNotSupported { message: var_message };
            }
            12 => {
                let mut var_message = <String>::sse_decode(deserializer);
                return crate::utils::error::PayjoinError::ValidationError { message: var_message };
            }
            13 => {
                let mut var_message = <String>::sse_decode(deserializer);
                return crate::utils::error::PayjoinError::V2Error { message: var_message };
            }
            14 => {
                let mut var_message = <String>::sse_decode(deserializer);
                return crate::utils::error::PayjoinError::UnexpectedError { message: var_message };
            }
            15 => {
                let mut var_message = <String>::sse_decode(deserializer);
                return crate::utils::error::PayjoinError::OhttpError { message: var_message };
            }
            16 => {
                let mut var_message = <String>::sse_decode(deserializer);
                return crate::utils::error::PayjoinError::UrlError { message: var_message };
            }
            17 => {
                let mut var_message = <String>::sse_decode(deserializer);
                return crate::utils::error::PayjoinError::IoError { message: var_message };
            }
            18 => {
                let mut var_message = <String>::sse_decode(deserializer);
                return crate::utils::error::PayjoinError::OutputSubstitutionError {
                    message: var_message,
                };
            }
            19 => {
                let mut var_message = <String>::sse_decode(deserializer);
                return crate::utils::error::PayjoinError::InputContributionError {
                    message: var_message,
                };
            }
            20 => {
                let mut var_message = <String>::sse_decode(deserializer);
                return crate::utils::error::PayjoinError::InputPairError { message: var_message };
            }
            21 => {
                let mut var_message = <String>::sse_decode(deserializer);
                return crate::utils::error::PayjoinError::SerdeJsonError { message: var_message };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::utils::types::PsbtInput {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_witnessUtxo = <Option<crate::utils::types::TxOut>>::sse_decode(deserializer);
        let mut var_redeemScript =
            <Option<crate::api::bitcoin_ffi::FfiScript>>::sse_decode(deserializer);
        let mut var_witnessScript =
            <Option<crate::api::bitcoin_ffi::FfiScript>>::sse_decode(deserializer);
        return crate::utils::types::PsbtInput {
            witness_utxo: var_witnessUtxo,
            redeem_script: var_redeemScript,
            witness_script: var_witnessScript,
        };
    }
}

impl SseDecode for (crate::utils::types::Request, crate::utils::types::ClientResponse) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <crate::utils::types::Request>::sse_decode(deserializer);
        let mut var_field1 = <crate::utils::types::ClientResponse>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for (crate::utils::types::Request, crate::api::send::FfiV1Context) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <crate::utils::types::Request>::sse_decode(deserializer);
        let mut var_field1 = <crate::api::send::FfiV1Context>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for (crate::utils::types::Request, crate::api::send::FfiV2PostContext) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <crate::utils::types::Request>::sse_decode(deserializer);
        let mut var_field1 = <crate::api::send::FfiV2PostContext>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for crate::utils::types::Request {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_url = <crate::api::uri::FfiUrl>::sse_decode(deserializer);
        let mut var_contentType = <String>::sse_decode(deserializer);
        let mut var_body = <Vec<u8>>::sse_decode(deserializer);
        return crate::utils::types::Request {
            url: var_url,
            content_type: var_contentType,
            body: var_body,
        };
    }
}

impl SseDecode for crate::utils::types::TxIn {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_previousOutput = <crate::utils::types::OutPoint>::sse_decode(deserializer);
        let mut var_scriptSig = <crate::api::bitcoin_ffi::FfiScript>::sse_decode(deserializer);
        let mut var_sequence = <u32>::sse_decode(deserializer);
        let mut var_witness = <Vec<Vec<u8>>>::sse_decode(deserializer);
        return crate::utils::types::TxIn {
            previous_output: var_previousOutput,
            script_sig: var_scriptSig,
            sequence: var_sequence,
            witness: var_witness,
        };
    }
}

impl SseDecode for crate::utils::types::TxOut {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_value = <u64>::sse_decode(deserializer);
        let mut var_scriptPubkey = <Vec<u8>>::sse_decode(deserializer);
        return crate::utils::types::TxOut { value: var_value, script_pubkey: var_scriptPubkey };
    }
}

impl SseDecode for u32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap()
    }
}

impl SseDecode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {}
}

impl SseDecode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
    }
}

fn pde_ffi_dispatcher_primary_impl(
    func_id: i32,
    port: flutter_rust_bridge::for_generated::MessagePort,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        _ => unreachable!(),
    }
}

fn pde_ffi_dispatcher_sync_impl(
    func_id: i32,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        _ => unreachable!(),
    }
}

// Section: rust2dart

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::utils::types::ClientResponse {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::utils::types::ClientResponse
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::utils::types::ClientResponse>
    for crate::utils::types::ClientResponse
{
    fn into_into_dart(self) -> crate::utils::types::ClientResponse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::receive::FfiInputPair {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::receive::FfiInputPair
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::receive::FfiInputPair>
    for crate::api::receive::FfiInputPair
{
    fn into_into_dart(self) -> crate::api::receive::FfiInputPair {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::receive::FfiMaybeInputsOwned {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::receive::FfiMaybeInputsOwned
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::receive::FfiMaybeInputsOwned>
    for crate::api::receive::FfiMaybeInputsOwned
{
    fn into_into_dart(self) -> crate::api::receive::FfiMaybeInputsOwned {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::receive::FfiMaybeInputsSeen {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::receive::FfiMaybeInputsSeen
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::receive::FfiMaybeInputsSeen>
    for crate::api::receive::FfiMaybeInputsSeen
{
    fn into_into_dart(self) -> crate::api::receive::FfiMaybeInputsSeen {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::uri::FfiOhttpKeys {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::uri::FfiOhttpKeys {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::uri::FfiOhttpKeys>
    for crate::api::uri::FfiOhttpKeys
{
    fn into_into_dart(self) -> crate::api::uri::FfiOhttpKeys {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::receive::FfiOutputsUnknown {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::receive::FfiOutputsUnknown
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::receive::FfiOutputsUnknown>
    for crate::api::receive::FfiOutputsUnknown
{
    fn into_into_dart(self) -> crate::api::receive::FfiOutputsUnknown {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::receive::FfiPayjoinProposal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::receive::FfiPayjoinProposal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::receive::FfiPayjoinProposal>
    for crate::api::receive::FfiPayjoinProposal
{
    fn into_into_dart(self) -> crate::api::receive::FfiPayjoinProposal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::uri::FfiPjUri {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::uri::FfiPjUri {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::uri::FfiPjUri> for crate::api::uri::FfiPjUri {
    fn into_into_dart(self) -> crate::api::uri::FfiPjUri {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::uri::FfiPjUriBuilder {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.internal.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::uri::FfiPjUriBuilder
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::uri::FfiPjUriBuilder>
    for crate::api::uri::FfiPjUriBuilder
{
    fn into_into_dart(self) -> crate::api::uri::FfiPjUriBuilder {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::receive::FfiProvisionalProposal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::receive::FfiProvisionalProposal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::receive::FfiProvisionalProposal>
    for crate::api::receive::FfiProvisionalProposal
{
    fn into_into_dart(self) -> crate::api::receive::FfiProvisionalProposal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::receive::FfiReceiver {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::receive::FfiReceiver
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::receive::FfiReceiver>
    for crate::api::receive::FfiReceiver
{
    fn into_into_dart(self) -> crate::api::receive::FfiReceiver {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::bitcoin_ffi::FfiScript {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::bitcoin_ffi::FfiScript
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::bitcoin_ffi::FfiScript>
    for crate::api::bitcoin_ffi::FfiScript
{
    fn into_into_dart(self) -> crate::api::bitcoin_ffi::FfiScript {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::send::FfiSender {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::send::FfiSender {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::send::FfiSender>
    for crate::api::send::FfiSender
{
    fn into_into_dart(self) -> crate::api::send::FfiSender {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::send::FfiSenderBuilder {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::send::FfiSenderBuilder
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::send::FfiSenderBuilder>
    for crate::api::send::FfiSenderBuilder
{
    fn into_into_dart(self) -> crate::api::send::FfiSenderBuilder {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::receive::FfiUncheckedProposal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::receive::FfiUncheckedProposal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::receive::FfiUncheckedProposal>
    for crate::api::receive::FfiUncheckedProposal
{
    fn into_into_dart(self) -> crate::api::receive::FfiUncheckedProposal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::uri::FfiUri {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::uri::FfiUri {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::uri::FfiUri> for crate::api::uri::FfiUri {
    fn into_into_dart(self) -> crate::api::uri::FfiUri {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::uri::FfiUrl {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::uri::FfiUrl {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::uri::FfiUrl> for crate::api::uri::FfiUrl {
    fn into_into_dart(self) -> crate::api::uri::FfiUrl {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::send::FfiV1Context {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::send::FfiV1Context
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::send::FfiV1Context>
    for crate::api::send::FfiV1Context
{
    fn into_into_dart(self) -> crate::api::send::FfiV1Context {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::send::FfiV2GetContext {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::send::FfiV2GetContext
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::send::FfiV2GetContext>
    for crate::api::send::FfiV2GetContext
{
    fn into_into_dart(self) -> crate::api::send::FfiV2GetContext {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::send::FfiV2PostContext {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::send::FfiV2PostContext
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::send::FfiV2PostContext>
    for crate::api::send::FfiV2PostContext
{
    fn into_into_dart(self) -> crate::api::send::FfiV2PostContext {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::receive::FfiWantsInputs {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::receive::FfiWantsInputs
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::receive::FfiWantsInputs>
    for crate::api::receive::FfiWantsInputs
{
    fn into_into_dart(self) -> crate::api::receive::FfiWantsInputs {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::receive::FfiWantsOutputs {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::receive::FfiWantsOutputs
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::receive::FfiWantsOutputs>
    for crate::api::receive::FfiWantsOutputs
{
    fn into_into_dart(self) -> crate::api::receive::FfiWantsOutputs {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::utils::types::Network {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Testnet => 0.into_dart(),
            Self::Regtest => 1.into_dart(),
            Self::Bitcoin => 2.into_dart(),
            Self::Signet => 3.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::utils::types::Network {}
impl flutter_rust_bridge::IntoIntoDart<crate::utils::types::Network>
    for crate::utils::types::Network
{
    fn into_into_dart(self) -> crate::utils::types::Network {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::utils::types::OutPoint {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.txid.into_into_dart().into_dart(), self.vout.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::utils::types::OutPoint {}
impl flutter_rust_bridge::IntoIntoDart<crate::utils::types::OutPoint>
    for crate::utils::types::OutPoint
{
    fn into_into_dart(self) -> crate::utils::types::OutPoint {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::utils::error::PayjoinError {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::utils::error::PayjoinError::InvalidAddress { message } => {
                [0.into_dart(), message.into_into_dart().into_dart()].into_dart()
            }
            crate::utils::error::PayjoinError::InvalidScript { message } => {
                [1.into_dart(), message.into_into_dart().into_dart()].into_dart()
            }
            crate::utils::error::PayjoinError::NetworkValidation { message } => {
                [2.into_dart(), message.into_into_dart().into_dart()].into_dart()
            }
            crate::utils::error::PayjoinError::PsbtParseError { message } => {
                [3.into_dart(), message.into_into_dart().into_dart()].into_dart()
            }
            crate::utils::error::PayjoinError::ResponseError { message } => {
                [4.into_dart(), message.into_into_dart().into_dart()].into_dart()
            }
            crate::utils::error::PayjoinError::RequestError { message } => {
                [5.into_dart(), message.into_into_dart().into_dart()].into_dart()
            }
            crate::utils::error::PayjoinError::TransactionError { message } => {
                [6.into_dart(), message.into_into_dart().into_dart()].into_dart()
            }
            crate::utils::error::PayjoinError::ServerError { message } => {
                [7.into_dart(), message.into_into_dart().into_dart()].into_dart()
            }
            crate::utils::error::PayjoinError::SelectionError { message } => {
                [8.into_dart(), message.into_into_dart().into_dart()].into_dart()
            }
            crate::utils::error::PayjoinError::CreateRequestError { message } => {
                [9.into_dart(), message.into_into_dart().into_dart()].into_dart()
            }
            crate::utils::error::PayjoinError::PjParseError { message } => {
                [10.into_dart(), message.into_into_dart().into_dart()].into_dart()
            }
            crate::utils::error::PayjoinError::PjNotSupported { message } => {
                [11.into_dart(), message.into_into_dart().into_dart()].into_dart()
            }
            crate::utils::error::PayjoinError::ValidationError { message } => {
                [12.into_dart(), message.into_into_dart().into_dart()].into_dart()
            }
            crate::utils::error::PayjoinError::V2Error { message } => {
                [13.into_dart(), message.into_into_dart().into_dart()].into_dart()
            }
            crate::utils::error::PayjoinError::UnexpectedError { message } => {
                [14.into_dart(), message.into_into_dart().into_dart()].into_dart()
            }
            crate::utils::error::PayjoinError::OhttpError { message } => {
                [15.into_dart(), message.into_into_dart().into_dart()].into_dart()
            }
            crate::utils::error::PayjoinError::UrlError { message } => {
                [16.into_dart(), message.into_into_dart().into_dart()].into_dart()
            }
            crate::utils::error::PayjoinError::IoError { message } => {
                [17.into_dart(), message.into_into_dart().into_dart()].into_dart()
            }
            crate::utils::error::PayjoinError::OutputSubstitutionError { message } => {
                [18.into_dart(), message.into_into_dart().into_dart()].into_dart()
            }
            crate::utils::error::PayjoinError::InputContributionError { message } => {
                [19.into_dart(), message.into_into_dart().into_dart()].into_dart()
            }
            crate::utils::error::PayjoinError::InputPairError { message } => {
                [20.into_dart(), message.into_into_dart().into_dart()].into_dart()
            }
            crate::utils::error::PayjoinError::SerdeJsonError { message } => {
                [21.into_dart(), message.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::utils::error::PayjoinError
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::utils::error::PayjoinError>
    for crate::utils::error::PayjoinError
{
    fn into_into_dart(self) -> crate::utils::error::PayjoinError {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::utils::types::PsbtInput {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.witness_utxo.into_into_dart().into_dart(),
            self.redeem_script.into_into_dart().into_dart(),
            self.witness_script.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::utils::types::PsbtInput
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::utils::types::PsbtInput>
    for crate::utils::types::PsbtInput
{
    fn into_into_dart(self) -> crate::utils::types::PsbtInput {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::utils::types::Request {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.url.into_into_dart().into_dart(),
            self.content_type.into_into_dart().into_dart(),
            self.body.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::utils::types::Request {}
impl flutter_rust_bridge::IntoIntoDart<crate::utils::types::Request>
    for crate::utils::types::Request
{
    fn into_into_dart(self) -> crate::utils::types::Request {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::utils::types::TxIn {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.previous_output.into_into_dart().into_dart(),
            self.script_sig.into_into_dart().into_dart(),
            self.sequence.into_into_dart().into_dart(),
            self.witness.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::utils::types::TxIn {}
impl flutter_rust_bridge::IntoIntoDart<crate::utils::types::TxIn> for crate::utils::types::TxIn {
    fn into_into_dart(self) -> crate::utils::types::TxIn {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::utils::types::TxOut {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.value.into_into_dart().into_dart(), self.script_pubkey.into_into_dart().into_dart()]
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::utils::types::TxOut {}
impl flutter_rust_bridge::IntoIntoDart<crate::utils::types::TxOut> for crate::utils::types::TxOut {
    fn into_into_dart(self) -> crate::utils::types::TxOut {
        self
    }
}

impl SseEncode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(format!("{:?}", self), serializer);
    }
}

impl SseEncode for flutter_rust_bridge::DartOpaque {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <usize>::sse_encode(self.encode(), serializer);
    }
}

impl SseEncode for RustOpaqueNom<bitcoin_ffi::Script> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<payjoin_ffi::OhttpKeys> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<payjoin_ffi::Url> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<payjoin_ffi::receive::InputPair> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<payjoin_ffi::receive::MaybeInputsOwned> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<payjoin_ffi::receive::MaybeInputsSeen> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<payjoin_ffi::receive::OutputsUnknown> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<payjoin_ffi::receive::PayjoinProposal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<payjoin_ffi::receive::ProvisionalProposal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<payjoin_ffi::receive::Receiver> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<payjoin_ffi::receive::UncheckedProposal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<payjoin_ffi::receive::WantsInputs> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<payjoin_ffi::receive::WantsOutputs> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<payjoin_ffi::send::Sender> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<payjoin_ffi::send::SenderBuilder> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<payjoin_ffi::send::V1Context> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<payjoin_ffi::send::V2GetContext> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<payjoin_ffi::send::V2PostContext> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<payjoin_ffi::uri::PjUri> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<payjoin_ffi::uri::PjUriBuilder> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<payjoin_ffi::uri::Uri> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<std::sync::Mutex<core::option::Option<payjoin_ffi::ClientResponse>>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
    }
}

impl SseEncode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self as _).unwrap();
    }
}

impl SseEncode for crate::utils::types::ClientResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<std :: sync :: Mutex < core :: option :: Option < payjoin_ffi :: ClientResponse > >>>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::receive::FfiInputPair {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<payjoin_ffi::receive::InputPair>>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::receive::FfiMaybeInputsOwned {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<payjoin_ffi::receive::MaybeInputsOwned>>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::receive::FfiMaybeInputsSeen {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<payjoin_ffi::receive::MaybeInputsSeen>>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::uri::FfiOhttpKeys {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<payjoin_ffi::OhttpKeys>>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::receive::FfiOutputsUnknown {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<payjoin_ffi::receive::OutputsUnknown>>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::receive::FfiPayjoinProposal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<payjoin_ffi::receive::PayjoinProposal>>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::uri::FfiPjUri {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<payjoin_ffi::uri::PjUri>>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::uri::FfiPjUriBuilder {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<payjoin_ffi::uri::PjUriBuilder>>::sse_encode(self.internal, serializer);
    }
}

impl SseEncode for crate::api::receive::FfiProvisionalProposal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<payjoin_ffi::receive::ProvisionalProposal>>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::receive::FfiReceiver {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<payjoin_ffi::receive::Receiver>>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::bitcoin_ffi::FfiScript {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<bitcoin_ffi::Script>>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::send::FfiSender {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<payjoin_ffi::send::Sender>>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::send::FfiSenderBuilder {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<payjoin_ffi::send::SenderBuilder>>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::receive::FfiUncheckedProposal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<payjoin_ffi::receive::UncheckedProposal>>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::uri::FfiUri {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<payjoin_ffi::uri::Uri>>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::uri::FfiUrl {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<payjoin_ffi::Url>>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::send::FfiV1Context {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<payjoin_ffi::send::V1Context>>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::send::FfiV2GetContext {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<payjoin_ffi::send::V2GetContext>>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::send::FfiV2PostContext {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<payjoin_ffi::send::V2PostContext>>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::receive::FfiWantsInputs {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<payjoin_ffi::receive::WantsInputs>>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::receive::FfiWantsOutputs {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<payjoin_ffi::receive::WantsOutputs>>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for Vec<crate::api::receive::FfiInputPair> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::receive::FfiInputPair>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<Vec<u8>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <Vec<u8>>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::utils::types::OutPoint> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::utils::types::OutPoint>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <u8>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::utils::types::TxOut> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::utils::types::TxOut>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for crate::utils::types::Network {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::utils::types::Network::Testnet => 0,
                crate::utils::types::Network::Regtest => 1,
                crate::utils::types::Network::Bitcoin => 2,
                crate::utils::types::Network::Signet => 3,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <String>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::bitcoin_ffi::FfiScript> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::bitcoin_ffi::FfiScript>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::receive::FfiUncheckedProposal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::receive::FfiUncheckedProposal>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::utils::types::TxOut> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::utils::types::TxOut>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<u64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <u64>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <u8>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for crate::utils::types::OutPoint {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.txid, serializer);
        <u32>::sse_encode(self.vout, serializer);
    }
}

impl SseEncode for crate::utils::error::PayjoinError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::utils::error::PayjoinError::InvalidAddress { message } => {
                <i32>::sse_encode(0, serializer);
                <String>::sse_encode(message, serializer);
            }
            crate::utils::error::PayjoinError::InvalidScript { message } => {
                <i32>::sse_encode(1, serializer);
                <String>::sse_encode(message, serializer);
            }
            crate::utils::error::PayjoinError::NetworkValidation { message } => {
                <i32>::sse_encode(2, serializer);
                <String>::sse_encode(message, serializer);
            }
            crate::utils::error::PayjoinError::PsbtParseError { message } => {
                <i32>::sse_encode(3, serializer);
                <String>::sse_encode(message, serializer);
            }
            crate::utils::error::PayjoinError::ResponseError { message } => {
                <i32>::sse_encode(4, serializer);
                <String>::sse_encode(message, serializer);
            }
            crate::utils::error::PayjoinError::RequestError { message } => {
                <i32>::sse_encode(5, serializer);
                <String>::sse_encode(message, serializer);
            }
            crate::utils::error::PayjoinError::TransactionError { message } => {
                <i32>::sse_encode(6, serializer);
                <String>::sse_encode(message, serializer);
            }
            crate::utils::error::PayjoinError::ServerError { message } => {
                <i32>::sse_encode(7, serializer);
                <String>::sse_encode(message, serializer);
            }
            crate::utils::error::PayjoinError::SelectionError { message } => {
                <i32>::sse_encode(8, serializer);
                <String>::sse_encode(message, serializer);
            }
            crate::utils::error::PayjoinError::CreateRequestError { message } => {
                <i32>::sse_encode(9, serializer);
                <String>::sse_encode(message, serializer);
            }
            crate::utils::error::PayjoinError::PjParseError { message } => {
                <i32>::sse_encode(10, serializer);
                <String>::sse_encode(message, serializer);
            }
            crate::utils::error::PayjoinError::PjNotSupported { message } => {
                <i32>::sse_encode(11, serializer);
                <String>::sse_encode(message, serializer);
            }
            crate::utils::error::PayjoinError::ValidationError { message } => {
                <i32>::sse_encode(12, serializer);
                <String>::sse_encode(message, serializer);
            }
            crate::utils::error::PayjoinError::V2Error { message } => {
                <i32>::sse_encode(13, serializer);
                <String>::sse_encode(message, serializer);
            }
            crate::utils::error::PayjoinError::UnexpectedError { message } => {
                <i32>::sse_encode(14, serializer);
                <String>::sse_encode(message, serializer);
            }
            crate::utils::error::PayjoinError::OhttpError { message } => {
                <i32>::sse_encode(15, serializer);
                <String>::sse_encode(message, serializer);
            }
            crate::utils::error::PayjoinError::UrlError { message } => {
                <i32>::sse_encode(16, serializer);
                <String>::sse_encode(message, serializer);
            }
            crate::utils::error::PayjoinError::IoError { message } => {
                <i32>::sse_encode(17, serializer);
                <String>::sse_encode(message, serializer);
            }
            crate::utils::error::PayjoinError::OutputSubstitutionError { message } => {
                <i32>::sse_encode(18, serializer);
                <String>::sse_encode(message, serializer);
            }
            crate::utils::error::PayjoinError::InputContributionError { message } => {
                <i32>::sse_encode(19, serializer);
                <String>::sse_encode(message, serializer);
            }
            crate::utils::error::PayjoinError::InputPairError { message } => {
                <i32>::sse_encode(20, serializer);
                <String>::sse_encode(message, serializer);
            }
            crate::utils::error::PayjoinError::SerdeJsonError { message } => {
                <i32>::sse_encode(21, serializer);
                <String>::sse_encode(message, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::utils::types::PsbtInput {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<crate::utils::types::TxOut>>::sse_encode(self.witness_utxo, serializer);
        <Option<crate::api::bitcoin_ffi::FfiScript>>::sse_encode(self.redeem_script, serializer);
        <Option<crate::api::bitcoin_ffi::FfiScript>>::sse_encode(self.witness_script, serializer);
    }
}

impl SseEncode for (crate::utils::types::Request, crate::utils::types::ClientResponse) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::utils::types::Request>::sse_encode(self.0, serializer);
        <crate::utils::types::ClientResponse>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for (crate::utils::types::Request, crate::api::send::FfiV1Context) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::utils::types::Request>::sse_encode(self.0, serializer);
        <crate::api::send::FfiV1Context>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for (crate::utils::types::Request, crate::api::send::FfiV2PostContext) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::utils::types::Request>::sse_encode(self.0, serializer);
        <crate::api::send::FfiV2PostContext>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for crate::utils::types::Request {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::uri::FfiUrl>::sse_encode(self.url, serializer);
        <String>::sse_encode(self.content_type, serializer);
        <Vec<u8>>::sse_encode(self.body, serializer);
    }
}

impl SseEncode for crate::utils::types::TxIn {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::utils::types::OutPoint>::sse_encode(self.previous_output, serializer);
        <crate::api::bitcoin_ffi::FfiScript>::sse_encode(self.script_sig, serializer);
        <u32>::sse_encode(self.sequence, serializer);
        <Vec<Vec<u8>>>::sse_encode(self.witness, serializer);
    }
}

impl SseEncode for crate::utils::types::TxOut {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u64>::sse_encode(self.value, serializer);
        <Vec<u8>>::sse_encode(self.script_pubkey, serializer);
    }
}

impl SseEncode for u32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self).unwrap();
    }
}

impl SseEncode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u64::<NativeEndian>(self as _).unwrap();
    }
}

#[cfg(not(target_family = "wasm"))]
#[path = "frb_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;
