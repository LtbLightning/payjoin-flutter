// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api.dart';
import 'api/bitcoin_ffi.dart';
import 'api/io.dart';
import 'api/io/error.dart';
import 'api/ohttp/error.dart';
import 'api/receive.dart';
import 'api/receive/error.dart';
import 'api/send.dart';
import 'api/send/error.dart';
import 'api/uri.dart';
import 'api/uri/error.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'lib.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'utils/types.dart';

/// Main entrypoint of the Rust API
class core extends BaseEntrypoint<coreApi, coreApiImpl, coreWire> {
  @internal
  static final instance = core._();

  core._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    coreApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<coreApiImpl, coreWire> get apiImplConstructor =>
      coreApiImpl.new;

  @override
  WireConstructor<coreWire> get wireConstructor => coreWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.0.0';

  @override
  int get rustContentHash => -1383824922;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'payjoin_flutter',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class coreApi extends BaseApi {
  Future<FfiScript> crateApiBitcoinFfiFfiScriptNew(
      {required List<int> rawOutputScript});

  Future<Uint8List> crateApiBitcoinFfiFfiScriptToBytes(
      {required FfiScript that});

  Future<FfiOhttpKeys> crateApiIoFetchOhttpKeys(
      {required String ohttpRelay, required String payjoinDirectory});

  DartReceiverPersister crateApiReceiveDartReceiverPersisterNew(
      {required FutureOr<ReceiverToken> Function(FfiReceiver) save,
      required FutureOr<FfiReceiver> Function(ReceiverToken) load});

  Future<(Request, ClientResponse)> crateApiReceiveFfiReceiverExtractReq(
      {required FfiReceiver that, required String ohttpRelay});

  FfiReceiver crateApiReceiveFfiReceiverFromJson({required String json});

  String crateApiReceiveFfiReceiverId({required FfiReceiver that});

  Future<ReceiverToken> crateApiReceiveFfiReceiverKey(
      {required FfiReceiver that});

  Future<FfiReceiver> crateApiReceiveFfiReceiverLoad(
      {required ReceiverToken token, required DartReceiverPersister persister});

  Future<FfiPjUri> crateApiReceiveFfiReceiverPjUri({required FfiReceiver that});

  Future<FfiUncheckedProposal?> crateApiReceiveFfiReceiverProcessRes(
      {required FfiReceiver that,
      required List<int> body,
      required ClientResponse ctx});

  String crateApiReceiveFfiReceiverToJson({required FfiReceiver that});

  Future<FfiInputPair> crateApiReceiveFfiInputPairNew(
      {required TxIn txin, required PsbtInput psbtin});

  Future<FfiMaybeInputsSeen>
      crateApiReceiveFfiMaybeInputsOwnedCheckInputsNotOwned(
          {required FfiMaybeInputsOwned that,
          required FutureOr<bool> Function(Uint8List) isOwned});

  Future<FfiOutputsUnknown>
      crateApiReceiveFfiMaybeInputsSeenCheckNoInputsSeenBefore(
          {required FfiMaybeInputsSeen that,
          required FutureOr<bool> Function(OutPoint) isKnown});

  Future<FfiNewReceiver> crateApiReceiveFfiNewReceiverCreate(
      {required String address,
      required Network network,
      required String directory,
      required FfiOhttpKeys ohttpKeys,
      BigInt? expireAfter});

  Future<ReceiverToken> crateApiReceiveFfiNewReceiverPersist(
      {required FfiNewReceiver that, required DartReceiverPersister persister});

  Future<FfiWantsOutputs>
      crateApiReceiveFfiOutputsUnknownIdentifyReceiverOutputs(
          {required FfiOutputsUnknown that,
          required FutureOr<bool> Function(Uint8List) isReceiverOutput});

  Future<(Request, ClientResponse)> crateApiReceiveFfiPayjoinProposalExtractReq(
      {required FfiPayjoinProposal that, required String ohttpRelay});

  Future<void> crateApiReceiveFfiPayjoinProposalProcessRes(
      {required FfiPayjoinProposal that,
      required List<int> res,
      required ClientResponse ohttpContext});

  Future<String> crateApiReceiveFfiPayjoinProposalPsbt(
      {required FfiPayjoinProposal that});

  Future<List<OutPoint>> crateApiReceiveFfiPayjoinProposalUtxosToBeLocked(
      {required FfiPayjoinProposal that});

  Future<FfiPayjoinProposal>
      crateApiReceiveFfiProvisionalProposalFinalizeProposal(
          {required FfiProvisionalProposal that,
          required FutureOr<String> Function(String) processPsbt,
          BigInt? minFeeRateSatPerVb,
          BigInt? maxFeeRateSatPerVb});

  Future<FfiMaybeInputsOwned>
      crateApiReceiveFfiUncheckedProposalAssumeInteractiveReceiver(
          {required FfiUncheckedProposal that});

  Future<FfiMaybeInputsOwned>
      crateApiReceiveFfiUncheckedProposalCheckBroadcastSuitability(
          {required FfiUncheckedProposal that,
          BigInt? minFeeRate,
          required FutureOr<bool> Function(Uint8List) canBroadcast});

  Future<(Request, ClientResponse)>
      crateApiReceiveFfiUncheckedProposalExtractErrReq(
          {required FfiUncheckedProposal that,
          required FfiJsonReply err,
          required String ohttpRelay});

  Future<Uint8List>
      crateApiReceiveFfiUncheckedProposalExtractTxToScheduleBroadcast(
          {required FfiUncheckedProposal that});

  Future<void> crateApiReceiveFfiUncheckedProposalProcessErrRes(
      {required FfiUncheckedProposal that,
      required List<int> body,
      required ClientResponse context});

  Future<FfiProvisionalProposal> crateApiReceiveFfiWantsInputsCommitInputs(
      {required FfiWantsInputs that});

  Future<FfiWantsInputs> crateApiReceiveFfiWantsInputsContributeInputs(
      {required FfiWantsInputs that,
      required List<FfiInputPair> replacementInputs});

  Future<FfiInputPair> crateApiReceiveFfiWantsInputsTryPreservingPrivacy(
      {required FfiWantsInputs that,
      required List<FfiInputPair> candidateInputs});

  Future<FfiWantsInputs> crateApiReceiveFfiWantsOutputsCommitOutputs(
      {required FfiWantsOutputs that});

  Future<bool> crateApiReceiveFfiWantsOutputsIsOutputSubstitutionDisabled(
      {required FfiWantsOutputs that});

  Future<FfiWantsOutputs> crateApiReceiveFfiWantsOutputsReplaceReceiverOutputs(
      {required FfiWantsOutputs that,
      required List<TxOut> replacementOutputs,
      required FfiScript drainScript});

  Future<FfiWantsOutputs>
      crateApiReceiveFfiWantsOutputsSubstituteReceiverScript(
          {required FfiWantsOutputs that, required FfiScript outputScript});

  Future<(Request, FfiV1Context)> crateApiSendFfiSenderExtractV1(
      {required FfiSender that});

  Future<(Request, FfiV2PostContext)> crateApiSendFfiSenderExtractV2(
      {required FfiSender that, required FfiUrl ohttpProxyUrl});

  FfiSender crateApiSendFfiSenderFromJson({required String json});

  Future<SenderToken> crateApiSendFfiSenderKey({required FfiSender that});

  Future<FfiSender> crateApiSendFfiSenderLoad(
      {required SenderToken token, required DartSenderPersister persister});

  String crateApiSendFfiSenderToJson({required FfiSender that});

  Future<SenderToken> crateApiSendFfiNewSenderPersist(
      {required FfiNewSender that, required DartSenderPersister persister});

  Future<FfiSenderBuilder>
      crateApiSendFfiSenderBuilderAlwaysDisableOutputSubstitution(
          {required FfiSenderBuilder that});

  Future<FfiNewSender> crateApiSendFfiSenderBuilderBuildNonIncentivizing(
      {required FfiSenderBuilder that, required BigInt minFeeRate});

  Future<FfiNewSender> crateApiSendFfiSenderBuilderBuildRecommended(
      {required FfiSenderBuilder that, required BigInt minFeeRate});

  Future<FfiNewSender> crateApiSendFfiSenderBuilderBuildWithAdditionalFee(
      {required FfiSenderBuilder that,
      required BigInt maxFeeContribution,
      int? changeIndex,
      required BigInt minFeeRate,
      required bool clampFeeContribution});

  Future<FfiSenderBuilder> crateApiSendFfiSenderBuilderFromPsbtAndUri(
      {required String psbtBase64, required FfiPjUri pjUri});

  Future<String> crateApiSendFfiV1ContextProcessResponse(
      {required FfiV1Context that, required List<int> response});

  Future<(Request, ClientResponse)> crateApiSendFfiV2GetContextExtractReq(
      {required FfiV2GetContext that, required String ohttpRelay});

  Future<String?> crateApiSendFfiV2GetContextProcessResponse(
      {required FfiV2GetContext that,
      required List<int> response,
      required ClientResponse ohttpCtx});

  Future<FfiV2GetContext> crateApiSendFfiV2PostContextProcessResponse(
      {required FfiV2PostContext that, required List<int> response});

  DartSenderPersister crateApiSendMakePersister(
      {required FutureOr<SenderToken> Function(FfiSender) save,
      required FutureOr<FfiSender> Function(SenderToken) load});

  Future<FfiOhttpKeys> crateApiUriFfiOhttpKeysDecode(
      {required List<int> bytes});

  String crateApiUriFfiPjUriAddress({required FfiPjUri that});

  BigInt? crateApiUriFfiPjUriAmountSats({required FfiPjUri that});

  String crateApiUriFfiPjUriAsString({required FfiPjUri that});

  String crateApiUriFfiPjUriPjEndpoint({required FfiPjUri that});

  String crateApiUriFfiUriAddress({required FfiUri that});

  BigInt? crateApiUriFfiUriAmountSats({required FfiUri that});

  String crateApiUriFfiUriAsString({required FfiUri that});

  FfiPjUri crateApiUriFfiUriCheckPjSupported({required FfiUri that});

  FfiUri crateApiUriFfiUriParse({required String uri});

  String crateApiUriFfiUrlAsString({required FfiUrl that});

  FfiUrl crateApiUriFfiUrlParse({required String url});

  String? crateApiUriFfiUrlQuery({required FfiUrl that});

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Script;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Script;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ScriptPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_DartReceiverPersister;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_DartReceiverPersister;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_DartReceiverPersisterPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_DartSenderPersister;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_DartSenderPersister;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_DartSenderPersisterPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Error;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Error;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ErrorPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FfiJsonReply;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FfiJsonReply;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_FfiJsonReplyPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FfiReceiver;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FfiReceiver;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_FfiReceiverPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FfiSender;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FfiSender;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_FfiSenderPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ImplementationError;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ImplementationError;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ImplementationErrorPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_InputContributionError;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_InputContributionError;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_InputContributionErrorPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_IntoUrlError;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_IntoUrlError;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_IntoUrlErrorPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_IoError;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_IoError;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_IoErrorPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OhttpError;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OhttpError;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_OhttpErrorPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OutputSubstitutionError;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OutputSubstitutionError;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_OutputSubstitutionErrorPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_PjNotSupported;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_PjNotSupported;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_PjNotSupportedPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_PjParseError;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_PjParseError;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_PjParseErrorPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_PsbtInputError;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_PsbtInputError;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_PsbtInputErrorPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ReceiverToken;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ReceiverToken;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ReceiverTokenPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ReplyableError;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ReplyableError;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ReplyableErrorPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ResponseError;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ResponseError;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ResponseErrorPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SelectionError;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SelectionError;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_SelectionErrorPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SenderToken;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SenderToken;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_SenderTokenPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SerdeJsonError;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SerdeJsonError;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_SerdeJsonErrorPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SessionError;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SessionError;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_SessionErrorPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_UrlParseError;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_UrlParseError;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_UrlParseErrorPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OhttpKeys;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OhttpKeys;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_OhttpKeysPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Url;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Url;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_UrlPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_InputPair;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_InputPair;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_InputPairPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MaybeInputsOwned;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MaybeInputsOwned;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_MaybeInputsOwnedPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MaybeInputsSeen;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MaybeInputsSeen;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_MaybeInputsSeenPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NewReceiver;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NewReceiver;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_NewReceiverPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OutputsUnknown;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OutputsUnknown;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_OutputsUnknownPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_PayjoinProposal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_PayjoinProposal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_PayjoinProposalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ProvisionalProposal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ProvisionalProposal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ProvisionalProposalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_UncheckedProposal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_UncheckedProposal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_UncheckedProposalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_WantsInputs;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_WantsInputs;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_WantsInputsPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_WantsOutputs;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_WantsOutputs;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_WantsOutputsPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NewSender;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NewSender;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_NewSenderPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SenderBuilder;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SenderBuilder;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_SenderBuilderPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_V1Context;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_V1Context;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_V1ContextPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_V2GetContext;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_V2GetContext;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_V2GetContextPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_V2PostContext;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_V2PostContext;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_V2PostContextPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_PjUri;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_PjUri;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_PjUriPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Uri;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Uri;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_UriPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MutexOptionClientResponse;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MutexOptionClientResponse;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_MutexOptionClientResponsePtr;
}

class coreApiImpl extends coreApiImplPlatform implements coreApi {
  coreApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<FfiScript> crateApiBitcoinFfiFfiScriptNew(
      {required List<int> rawOutputScript}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_list_prim_u_8_loose(rawOutputScript);
        return wire.wire__crate__api__bitcoin_ffi__ffi_script_new(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_ffi_script,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiBitcoinFfiFfiScriptNewConstMeta,
      argValues: [rawOutputScript],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBitcoinFfiFfiScriptNewConstMeta =>
      const TaskConstMeta(
        debugName: "ffi_script_new",
        argNames: ["rawOutputScript"],
      );

  @override
  Future<Uint8List> crateApiBitcoinFfiFfiScriptToBytes(
      {required FfiScript that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_ffi_script(that);
        return wire.wire__crate__api__bitcoin_ffi__ffi_script_to_bytes(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiBitcoinFfiFfiScriptToBytesConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBitcoinFfiFfiScriptToBytesConstMeta =>
      const TaskConstMeta(
        debugName: "ffi_script_to_bytes",
        argNames: ["that"],
      );

  @override
  Future<FfiOhttpKeys> crateApiIoFetchOhttpKeys(
      {required String ohttpRelay, required String payjoinDirectory}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_String(ohttpRelay);
        var arg1 = cst_encode_String(payjoinDirectory);
        return wire.wire__crate__api__io__fetch_ohttp_keys(port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_ffi_ohttp_keys,
        decodeErrorData: dco_decode_ffi_io_error,
      ),
      constMeta: kCrateApiIoFetchOhttpKeysConstMeta,
      argValues: [ohttpRelay, payjoinDirectory],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiIoFetchOhttpKeysConstMeta => const TaskConstMeta(
        debugName: "fetch_ohttp_keys",
        argNames: ["ohttpRelay", "payjoinDirectory"],
      );

  @override
  DartReceiverPersister crateApiReceiveDartReceiverPersisterNew(
      {required FutureOr<ReceiverToken> Function(FfiReceiver) save,
      required FutureOr<FfiReceiver> Function(ReceiverToken) load}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiReceiver_Output_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReceiverToken_AnyhowException(
                save);
        var arg1 =
            cst_encode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReceiverToken_Output_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiReceiver_AnyhowException(
                load);
        return wire.wire__crate__api__receive__DartReceiverPersister_new(
            arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartReceiverPersister,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiReceiveDartReceiverPersisterNewConstMeta,
      argValues: [save, load],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiReceiveDartReceiverPersisterNewConstMeta =>
      const TaskConstMeta(
        debugName: "DartReceiverPersister_new",
        argNames: ["save", "load"],
      );

  @override
  Future<(Request, ClientResponse)> crateApiReceiveFfiReceiverExtractReq(
      {required FfiReceiver that, required String ohttpRelay}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiReceiver(
                that);
        var arg1 = cst_encode_String(ohttpRelay);
        return wire.wire__crate__api__receive__FfiReceiver_extract_req(
            port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_record_request_client_response,
        decodeErrorData: dco_decode_ffi_error,
      ),
      constMeta: kCrateApiReceiveFfiReceiverExtractReqConstMeta,
      argValues: [that, ohttpRelay],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiReceiveFfiReceiverExtractReqConstMeta =>
      const TaskConstMeta(
        debugName: "FfiReceiver_extract_req",
        argNames: ["that", "ohttpRelay"],
      );

  @override
  FfiReceiver crateApiReceiveFfiReceiverFromJson({required String json}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_String(json);
        return wire.wire__crate__api__receive__FfiReceiver_from_json(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiReceiver,
        decodeErrorData: dco_decode_ffi_serde_json_error,
      ),
      constMeta: kCrateApiReceiveFfiReceiverFromJsonConstMeta,
      argValues: [json],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiReceiveFfiReceiverFromJsonConstMeta =>
      const TaskConstMeta(
        debugName: "FfiReceiver_from_json",
        argNames: ["json"],
      );

  @override
  String crateApiReceiveFfiReceiverId({required FfiReceiver that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiReceiver(
                that);
        return wire.wire__crate__api__receive__FfiReceiver_id(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiReceiveFfiReceiverIdConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiReceiveFfiReceiverIdConstMeta =>
      const TaskConstMeta(
        debugName: "FfiReceiver_id",
        argNames: ["that"],
      );

  @override
  Future<ReceiverToken> crateApiReceiveFfiReceiverKey(
      {required FfiReceiver that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiReceiver(
                that);
        return wire.wire__crate__api__receive__FfiReceiver_key(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReceiverToken,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiReceiveFfiReceiverKeyConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiReceiveFfiReceiverKeyConstMeta =>
      const TaskConstMeta(
        debugName: "FfiReceiver_key",
        argNames: ["that"],
      );

  @override
  Future<FfiReceiver> crateApiReceiveFfiReceiverLoad(
      {required ReceiverToken token,
      required DartReceiverPersister persister}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReceiverToken(
                token);
        var arg1 =
            cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartReceiverPersister(
                persister);
        return wire.wire__crate__api__receive__FfiReceiver_load(
            port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiReceiver,
        decodeErrorData: dco_decode_ffi_implementation_error,
      ),
      constMeta: kCrateApiReceiveFfiReceiverLoadConstMeta,
      argValues: [token, persister],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiReceiveFfiReceiverLoadConstMeta =>
      const TaskConstMeta(
        debugName: "FfiReceiver_load",
        argNames: ["token", "persister"],
      );

  @override
  Future<FfiPjUri> crateApiReceiveFfiReceiverPjUri(
      {required FfiReceiver that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiReceiver(
                that);
        return wire.wire__crate__api__receive__FfiReceiver_pj_uri(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_ffi_pj_uri,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiReceiveFfiReceiverPjUriConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiReceiveFfiReceiverPjUriConstMeta =>
      const TaskConstMeta(
        debugName: "FfiReceiver_pj_uri",
        argNames: ["that"],
      );

  @override
  Future<FfiUncheckedProposal?> crateApiReceiveFfiReceiverProcessRes(
      {required FfiReceiver that,
      required List<int> body,
      required ClientResponse ctx}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiReceiver(
                that);
        var arg1 = cst_encode_list_prim_u_8_loose(body);
        var arg2 = cst_encode_box_autoadd_client_response(ctx);
        return wire.wire__crate__api__receive__FfiReceiver_process_res(
            port_, arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_opt_box_autoadd_ffi_unchecked_proposal,
        decodeErrorData: dco_decode_ffi_error,
      ),
      constMeta: kCrateApiReceiveFfiReceiverProcessResConstMeta,
      argValues: [that, body, ctx],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiReceiveFfiReceiverProcessResConstMeta =>
      const TaskConstMeta(
        debugName: "FfiReceiver_process_res",
        argNames: ["that", "body", "ctx"],
      );

  @override
  String crateApiReceiveFfiReceiverToJson({required FfiReceiver that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiReceiver(
                that);
        return wire.wire__crate__api__receive__FfiReceiver_to_json(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_ffi_serde_json_error,
      ),
      constMeta: kCrateApiReceiveFfiReceiverToJsonConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiReceiveFfiReceiverToJsonConstMeta =>
      const TaskConstMeta(
        debugName: "FfiReceiver_to_json",
        argNames: ["that"],
      );

  @override
  Future<FfiInputPair> crateApiReceiveFfiInputPairNew(
      {required TxIn txin, required PsbtInput psbtin}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_tx_in(txin);
        var arg1 = cst_encode_box_autoadd_psbt_input(psbtin);
        return wire.wire__crate__api__receive__ffi_input_pair_new(
            port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_ffi_input_pair,
        decodeErrorData: dco_decode_ffi_psbt_input_error,
      ),
      constMeta: kCrateApiReceiveFfiInputPairNewConstMeta,
      argValues: [txin, psbtin],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiReceiveFfiInputPairNewConstMeta =>
      const TaskConstMeta(
        debugName: "ffi_input_pair_new",
        argNames: ["txin", "psbtin"],
      );

  @override
  Future<FfiMaybeInputsSeen>
      crateApiReceiveFfiMaybeInputsOwnedCheckInputsNotOwned(
          {required FfiMaybeInputsOwned that,
          required FutureOr<bool> Function(Uint8List) isOwned}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_ffi_maybe_inputs_owned(that);
        var arg1 =
            cst_encode_DartFn_Inputs_list_prim_u_8_strict_Output_bool_AnyhowException(
                isOwned);
        return wire
            .wire__crate__api__receive__ffi_maybe_inputs_owned_check_inputs_not_owned(
                port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_ffi_maybe_inputs_seen,
        decodeErrorData: dco_decode_ffi_replyable_error,
      ),
      constMeta:
          kCrateApiReceiveFfiMaybeInputsOwnedCheckInputsNotOwnedConstMeta,
      argValues: [that, isOwned],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiReceiveFfiMaybeInputsOwnedCheckInputsNotOwnedConstMeta =>
          const TaskConstMeta(
            debugName: "ffi_maybe_inputs_owned_check_inputs_not_owned",
            argNames: ["that", "isOwned"],
          );

  @override
  Future<FfiOutputsUnknown>
      crateApiReceiveFfiMaybeInputsSeenCheckNoInputsSeenBefore(
          {required FfiMaybeInputsSeen that,
          required FutureOr<bool> Function(OutPoint) isKnown}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_ffi_maybe_inputs_seen(that);
        var arg1 =
            cst_encode_DartFn_Inputs_out_point_Output_bool_AnyhowException(
                isKnown);
        return wire
            .wire__crate__api__receive__ffi_maybe_inputs_seen_check_no_inputs_seen_before(
                port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_ffi_outputs_unknown,
        decodeErrorData: dco_decode_ffi_replyable_error,
      ),
      constMeta:
          kCrateApiReceiveFfiMaybeInputsSeenCheckNoInputsSeenBeforeConstMeta,
      argValues: [that, isKnown],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiReceiveFfiMaybeInputsSeenCheckNoInputsSeenBeforeConstMeta =>
          const TaskConstMeta(
            debugName: "ffi_maybe_inputs_seen_check_no_inputs_seen_before",
            argNames: ["that", "isKnown"],
          );

  @override
  Future<FfiNewReceiver> crateApiReceiveFfiNewReceiverCreate(
      {required String address,
      required Network network,
      required String directory,
      required FfiOhttpKeys ohttpKeys,
      BigInt? expireAfter}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_String(address);
        var arg1 = cst_encode_network(network);
        var arg2 = cst_encode_String(directory);
        var arg3 = cst_encode_box_autoadd_ffi_ohttp_keys(ohttpKeys);
        var arg4 = cst_encode_opt_box_autoadd_u_64(expireAfter);
        return wire.wire__crate__api__receive__ffi_new_receiver_create(
            port_, arg0, arg1, arg2, arg3, arg4);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_ffi_new_receiver,
        decodeErrorData: dco_decode_ffi_into_url_error,
      ),
      constMeta: kCrateApiReceiveFfiNewReceiverCreateConstMeta,
      argValues: [address, network, directory, ohttpKeys, expireAfter],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiReceiveFfiNewReceiverCreateConstMeta =>
      const TaskConstMeta(
        debugName: "ffi_new_receiver_create",
        argNames: [
          "address",
          "network",
          "directory",
          "ohttpKeys",
          "expireAfter"
        ],
      );

  @override
  Future<ReceiverToken> crateApiReceiveFfiNewReceiverPersist(
      {required FfiNewReceiver that,
      required DartReceiverPersister persister}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_ffi_new_receiver(that);
        var arg1 =
            cst_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartReceiverPersister(
                persister);
        return wire.wire__crate__api__receive__ffi_new_receiver_persist(
            port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReceiverToken,
        decodeErrorData: dco_decode_ffi_implementation_error,
      ),
      constMeta: kCrateApiReceiveFfiNewReceiverPersistConstMeta,
      argValues: [that, persister],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiReceiveFfiNewReceiverPersistConstMeta =>
      const TaskConstMeta(
        debugName: "ffi_new_receiver_persist",
        argNames: ["that", "persister"],
      );

  @override
  Future<FfiWantsOutputs>
      crateApiReceiveFfiOutputsUnknownIdentifyReceiverOutputs(
          {required FfiOutputsUnknown that,
          required FutureOr<bool> Function(Uint8List) isReceiverOutput}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_ffi_outputs_unknown(that);
        var arg1 =
            cst_encode_DartFn_Inputs_list_prim_u_8_strict_Output_bool_AnyhowException(
                isReceiverOutput);
        return wire
            .wire__crate__api__receive__ffi_outputs_unknown_identify_receiver_outputs(
                port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_ffi_wants_outputs,
        decodeErrorData: dco_decode_ffi_replyable_error,
      ),
      constMeta:
          kCrateApiReceiveFfiOutputsUnknownIdentifyReceiverOutputsConstMeta,
      argValues: [that, isReceiverOutput],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiReceiveFfiOutputsUnknownIdentifyReceiverOutputsConstMeta =>
          const TaskConstMeta(
            debugName: "ffi_outputs_unknown_identify_receiver_outputs",
            argNames: ["that", "isReceiverOutput"],
          );

  @override
  Future<(Request, ClientResponse)> crateApiReceiveFfiPayjoinProposalExtractReq(
      {required FfiPayjoinProposal that, required String ohttpRelay}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_ffi_payjoin_proposal(that);
        var arg1 = cst_encode_String(ohttpRelay);
        return wire.wire__crate__api__receive__ffi_payjoin_proposal_extract_req(
            port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_record_request_client_response,
        decodeErrorData: dco_decode_ffi_error,
      ),
      constMeta: kCrateApiReceiveFfiPayjoinProposalExtractReqConstMeta,
      argValues: [that, ohttpRelay],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiReceiveFfiPayjoinProposalExtractReqConstMeta =>
      const TaskConstMeta(
        debugName: "ffi_payjoin_proposal_extract_req",
        argNames: ["that", "ohttpRelay"],
      );

  @override
  Future<void> crateApiReceiveFfiPayjoinProposalProcessRes(
      {required FfiPayjoinProposal that,
      required List<int> res,
      required ClientResponse ohttpContext}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_ffi_payjoin_proposal(that);
        var arg1 = cst_encode_list_prim_u_8_loose(res);
        var arg2 = cst_encode_box_autoadd_client_response(ohttpContext);
        return wire.wire__crate__api__receive__ffi_payjoin_proposal_process_res(
            port_, arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: dco_decode_ffi_error,
      ),
      constMeta: kCrateApiReceiveFfiPayjoinProposalProcessResConstMeta,
      argValues: [that, res, ohttpContext],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiReceiveFfiPayjoinProposalProcessResConstMeta =>
      const TaskConstMeta(
        debugName: "ffi_payjoin_proposal_process_res",
        argNames: ["that", "res", "ohttpContext"],
      );

  @override
  Future<String> crateApiReceiveFfiPayjoinProposalPsbt(
      {required FfiPayjoinProposal that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_ffi_payjoin_proposal(that);
        return wire.wire__crate__api__receive__ffi_payjoin_proposal_psbt(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiReceiveFfiPayjoinProposalPsbtConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiReceiveFfiPayjoinProposalPsbtConstMeta =>
      const TaskConstMeta(
        debugName: "ffi_payjoin_proposal_psbt",
        argNames: ["that"],
      );

  @override
  Future<List<OutPoint>> crateApiReceiveFfiPayjoinProposalUtxosToBeLocked(
      {required FfiPayjoinProposal that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_ffi_payjoin_proposal(that);
        return wire
            .wire__crate__api__receive__ffi_payjoin_proposal_utxos_to_be_locked(
                port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_list_out_point,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiReceiveFfiPayjoinProposalUtxosToBeLockedConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiReceiveFfiPayjoinProposalUtxosToBeLockedConstMeta =>
          const TaskConstMeta(
            debugName: "ffi_payjoin_proposal_utxos_to_be_locked",
            argNames: ["that"],
          );

  @override
  Future<FfiPayjoinProposal>
      crateApiReceiveFfiProvisionalProposalFinalizeProposal(
          {required FfiProvisionalProposal that,
          required FutureOr<String> Function(String) processPsbt,
          BigInt? minFeeRateSatPerVb,
          BigInt? maxFeeRateSatPerVb}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_ffi_provisional_proposal(that);
        var arg1 =
            cst_encode_DartFn_Inputs_String_Output_String_AnyhowException(
                processPsbt);
        var arg2 = cst_encode_opt_box_autoadd_u_64(minFeeRateSatPerVb);
        var arg3 = cst_encode_opt_box_autoadd_u_64(maxFeeRateSatPerVb);
        return wire
            .wire__crate__api__receive__ffi_provisional_proposal_finalize_proposal(
                port_, arg0, arg1, arg2, arg3);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_ffi_payjoin_proposal,
        decodeErrorData: dco_decode_ffi_replyable_error,
      ),
      constMeta:
          kCrateApiReceiveFfiProvisionalProposalFinalizeProposalConstMeta,
      argValues: [that, processPsbt, minFeeRateSatPerVb, maxFeeRateSatPerVb],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiReceiveFfiProvisionalProposalFinalizeProposalConstMeta =>
          const TaskConstMeta(
            debugName: "ffi_provisional_proposal_finalize_proposal",
            argNames: [
              "that",
              "processPsbt",
              "minFeeRateSatPerVb",
              "maxFeeRateSatPerVb"
            ],
          );

  @override
  Future<FfiMaybeInputsOwned>
      crateApiReceiveFfiUncheckedProposalAssumeInteractiveReceiver(
          {required FfiUncheckedProposal that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_ffi_unchecked_proposal(that);
        return wire
            .wire__crate__api__receive__ffi_unchecked_proposal_assume_interactive_receiver(
                port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_ffi_maybe_inputs_owned,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiReceiveFfiUncheckedProposalAssumeInteractiveReceiverConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiReceiveFfiUncheckedProposalAssumeInteractiveReceiverConstMeta =>
          const TaskConstMeta(
            debugName: "ffi_unchecked_proposal_assume_interactive_receiver",
            argNames: ["that"],
          );

  @override
  Future<FfiMaybeInputsOwned>
      crateApiReceiveFfiUncheckedProposalCheckBroadcastSuitability(
          {required FfiUncheckedProposal that,
          BigInt? minFeeRate,
          required FutureOr<bool> Function(Uint8List) canBroadcast}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_ffi_unchecked_proposal(that);
        var arg1 = cst_encode_opt_box_autoadd_u_64(minFeeRate);
        var arg2 =
            cst_encode_DartFn_Inputs_list_prim_u_8_strict_Output_bool_AnyhowException(
                canBroadcast);
        return wire
            .wire__crate__api__receive__ffi_unchecked_proposal_check_broadcast_suitability(
                port_, arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_ffi_maybe_inputs_owned,
        decodeErrorData: dco_decode_ffi_replyable_error,
      ),
      constMeta:
          kCrateApiReceiveFfiUncheckedProposalCheckBroadcastSuitabilityConstMeta,
      argValues: [that, minFeeRate, canBroadcast],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiReceiveFfiUncheckedProposalCheckBroadcastSuitabilityConstMeta =>
          const TaskConstMeta(
            debugName: "ffi_unchecked_proposal_check_broadcast_suitability",
            argNames: ["that", "minFeeRate", "canBroadcast"],
          );

  @override
  Future<(Request, ClientResponse)>
      crateApiReceiveFfiUncheckedProposalExtractErrReq(
          {required FfiUncheckedProposal that,
          required FfiJsonReply err,
          required String ohttpRelay}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_ffi_unchecked_proposal(that);
        var arg1 =
            cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiJsonReply(
                err);
        var arg2 = cst_encode_String(ohttpRelay);
        return wire
            .wire__crate__api__receive__ffi_unchecked_proposal_extract_err_req(
                port_, arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_record_request_client_response,
        decodeErrorData: dco_decode_ffi_session_error,
      ),
      constMeta: kCrateApiReceiveFfiUncheckedProposalExtractErrReqConstMeta,
      argValues: [that, err, ohttpRelay],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiReceiveFfiUncheckedProposalExtractErrReqConstMeta =>
          const TaskConstMeta(
            debugName: "ffi_unchecked_proposal_extract_err_req",
            argNames: ["that", "err", "ohttpRelay"],
          );

  @override
  Future<Uint8List>
      crateApiReceiveFfiUncheckedProposalExtractTxToScheduleBroadcast(
          {required FfiUncheckedProposal that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_ffi_unchecked_proposal(that);
        return wire
            .wire__crate__api__receive__ffi_unchecked_proposal_extract_tx_to_schedule_broadcast(
                port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiReceiveFfiUncheckedProposalExtractTxToScheduleBroadcastConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiReceiveFfiUncheckedProposalExtractTxToScheduleBroadcastConstMeta =>
          const TaskConstMeta(
            debugName:
                "ffi_unchecked_proposal_extract_tx_to_schedule_broadcast",
            argNames: ["that"],
          );

  @override
  Future<void> crateApiReceiveFfiUncheckedProposalProcessErrRes(
      {required FfiUncheckedProposal that,
      required List<int> body,
      required ClientResponse context}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_ffi_unchecked_proposal(that);
        var arg1 = cst_encode_list_prim_u_8_loose(body);
        var arg2 = cst_encode_box_autoadd_client_response(context);
        return wire
            .wire__crate__api__receive__ffi_unchecked_proposal_process_err_res(
                port_, arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: dco_decode_ffi_session_error,
      ),
      constMeta: kCrateApiReceiveFfiUncheckedProposalProcessErrResConstMeta,
      argValues: [that, body, context],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiReceiveFfiUncheckedProposalProcessErrResConstMeta =>
          const TaskConstMeta(
            debugName: "ffi_unchecked_proposal_process_err_res",
            argNames: ["that", "body", "context"],
          );

  @override
  Future<FfiProvisionalProposal> crateApiReceiveFfiWantsInputsCommitInputs(
      {required FfiWantsInputs that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_ffi_wants_inputs(that);
        return wire.wire__crate__api__receive__ffi_wants_inputs_commit_inputs(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_ffi_provisional_proposal,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiReceiveFfiWantsInputsCommitInputsConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiReceiveFfiWantsInputsCommitInputsConstMeta =>
      const TaskConstMeta(
        debugName: "ffi_wants_inputs_commit_inputs",
        argNames: ["that"],
      );

  @override
  Future<FfiWantsInputs> crateApiReceiveFfiWantsInputsContributeInputs(
      {required FfiWantsInputs that,
      required List<FfiInputPair> replacementInputs}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_ffi_wants_inputs(that);
        var arg1 = cst_encode_list_ffi_input_pair(replacementInputs);
        return wire
            .wire__crate__api__receive__ffi_wants_inputs_contribute_inputs(
                port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_ffi_wants_inputs,
        decodeErrorData: dco_decode_ffi_input_contribution_error,
      ),
      constMeta: kCrateApiReceiveFfiWantsInputsContributeInputsConstMeta,
      argValues: [that, replacementInputs],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiReceiveFfiWantsInputsContributeInputsConstMeta =>
      const TaskConstMeta(
        debugName: "ffi_wants_inputs_contribute_inputs",
        argNames: ["that", "replacementInputs"],
      );

  @override
  Future<FfiInputPair> crateApiReceiveFfiWantsInputsTryPreservingPrivacy(
      {required FfiWantsInputs that,
      required List<FfiInputPair> candidateInputs}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_ffi_wants_inputs(that);
        var arg1 = cst_encode_list_ffi_input_pair(candidateInputs);
        return wire
            .wire__crate__api__receive__ffi_wants_inputs_try_preserving_privacy(
                port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_ffi_input_pair,
        decodeErrorData: dco_decode_ffi_selection_error,
      ),
      constMeta: kCrateApiReceiveFfiWantsInputsTryPreservingPrivacyConstMeta,
      argValues: [that, candidateInputs],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiReceiveFfiWantsInputsTryPreservingPrivacyConstMeta =>
          const TaskConstMeta(
            debugName: "ffi_wants_inputs_try_preserving_privacy",
            argNames: ["that", "candidateInputs"],
          );

  @override
  Future<FfiWantsInputs> crateApiReceiveFfiWantsOutputsCommitOutputs(
      {required FfiWantsOutputs that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_ffi_wants_outputs(that);
        return wire.wire__crate__api__receive__ffi_wants_outputs_commit_outputs(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_ffi_wants_inputs,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiReceiveFfiWantsOutputsCommitOutputsConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiReceiveFfiWantsOutputsCommitOutputsConstMeta =>
      const TaskConstMeta(
        debugName: "ffi_wants_outputs_commit_outputs",
        argNames: ["that"],
      );

  @override
  Future<bool> crateApiReceiveFfiWantsOutputsIsOutputSubstitutionDisabled(
      {required FfiWantsOutputs that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_ffi_wants_outputs(that);
        return wire
            .wire__crate__api__receive__ffi_wants_outputs_is_output_substitution_disabled(
                port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_bool,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiReceiveFfiWantsOutputsIsOutputSubstitutionDisabledConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiReceiveFfiWantsOutputsIsOutputSubstitutionDisabledConstMeta =>
          const TaskConstMeta(
            debugName: "ffi_wants_outputs_is_output_substitution_disabled",
            argNames: ["that"],
          );

  @override
  Future<FfiWantsOutputs> crateApiReceiveFfiWantsOutputsReplaceReceiverOutputs(
      {required FfiWantsOutputs that,
      required List<TxOut> replacementOutputs,
      required FfiScript drainScript}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_ffi_wants_outputs(that);
        var arg1 = cst_encode_list_tx_out(replacementOutputs);
        var arg2 = cst_encode_box_autoadd_ffi_script(drainScript);
        return wire
            .wire__crate__api__receive__ffi_wants_outputs_replace_receiver_outputs(
                port_, arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_ffi_wants_outputs,
        decodeErrorData: dco_decode_ffi_output_substitution_error,
      ),
      constMeta: kCrateApiReceiveFfiWantsOutputsReplaceReceiverOutputsConstMeta,
      argValues: [that, replacementOutputs, drainScript],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiReceiveFfiWantsOutputsReplaceReceiverOutputsConstMeta =>
          const TaskConstMeta(
            debugName: "ffi_wants_outputs_replace_receiver_outputs",
            argNames: ["that", "replacementOutputs", "drainScript"],
          );

  @override
  Future<FfiWantsOutputs>
      crateApiReceiveFfiWantsOutputsSubstituteReceiverScript(
          {required FfiWantsOutputs that, required FfiScript outputScript}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_ffi_wants_outputs(that);
        var arg1 = cst_encode_box_autoadd_ffi_script(outputScript);
        return wire
            .wire__crate__api__receive__ffi_wants_outputs_substitute_receiver_script(
                port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_ffi_wants_outputs,
        decodeErrorData: dco_decode_ffi_output_substitution_error,
      ),
      constMeta:
          kCrateApiReceiveFfiWantsOutputsSubstituteReceiverScriptConstMeta,
      argValues: [that, outputScript],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiReceiveFfiWantsOutputsSubstituteReceiverScriptConstMeta =>
          const TaskConstMeta(
            debugName: "ffi_wants_outputs_substitute_receiver_script",
            argNames: ["that", "outputScript"],
          );

  @override
  Future<(Request, FfiV1Context)> crateApiSendFfiSenderExtractV1(
      {required FfiSender that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiSender(
                that);
        return wire.wire__crate__api__send__FfiSender_extract_v1(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_record_request_ffi_v_1_context,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSendFfiSenderExtractV1ConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSendFfiSenderExtractV1ConstMeta =>
      const TaskConstMeta(
        debugName: "FfiSender_extract_v1",
        argNames: ["that"],
      );

  @override
  Future<(Request, FfiV2PostContext)> crateApiSendFfiSenderExtractV2(
      {required FfiSender that, required FfiUrl ohttpProxyUrl}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiSender(
                that);
        var arg1 = cst_encode_box_autoadd_ffi_url(ohttpProxyUrl);
        return wire.wire__crate__api__send__FfiSender_extract_v2(
            port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_record_request_ffi_v_2_post_context,
        decodeErrorData: dco_decode_ffi_create_request_error,
      ),
      constMeta: kCrateApiSendFfiSenderExtractV2ConstMeta,
      argValues: [that, ohttpProxyUrl],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSendFfiSenderExtractV2ConstMeta =>
      const TaskConstMeta(
        debugName: "FfiSender_extract_v2",
        argNames: ["that", "ohttpProxyUrl"],
      );

  @override
  FfiSender crateApiSendFfiSenderFromJson({required String json}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_String(json);
        return wire.wire__crate__api__send__FfiSender_from_json(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiSender,
        decodeErrorData: dco_decode_ffi_serde_json_error,
      ),
      constMeta: kCrateApiSendFfiSenderFromJsonConstMeta,
      argValues: [json],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSendFfiSenderFromJsonConstMeta =>
      const TaskConstMeta(
        debugName: "FfiSender_from_json",
        argNames: ["json"],
      );

  @override
  Future<SenderToken> crateApiSendFfiSenderKey({required FfiSender that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiSender(
                that);
        return wire.wire__crate__api__send__FfiSender_key(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSenderToken,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSendFfiSenderKeyConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSendFfiSenderKeyConstMeta => const TaskConstMeta(
        debugName: "FfiSender_key",
        argNames: ["that"],
      );

  @override
  Future<FfiSender> crateApiSendFfiSenderLoad(
      {required SenderToken token, required DartSenderPersister persister}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSenderToken(
                token);
        var arg1 =
            cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartSenderPersister(
                persister);
        return wire.wire__crate__api__send__FfiSender_load(port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiSender,
        decodeErrorData: dco_decode_ffi_implementation_error,
      ),
      constMeta: kCrateApiSendFfiSenderLoadConstMeta,
      argValues: [token, persister],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSendFfiSenderLoadConstMeta => const TaskConstMeta(
        debugName: "FfiSender_load",
        argNames: ["token", "persister"],
      );

  @override
  String crateApiSendFfiSenderToJson({required FfiSender that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiSender(
                that);
        return wire.wire__crate__api__send__FfiSender_to_json(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_ffi_serde_json_error,
      ),
      constMeta: kCrateApiSendFfiSenderToJsonConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSendFfiSenderToJsonConstMeta =>
      const TaskConstMeta(
        debugName: "FfiSender_to_json",
        argNames: ["that"],
      );

  @override
  Future<SenderToken> crateApiSendFfiNewSenderPersist(
      {required FfiNewSender that, required DartSenderPersister persister}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_ffi_new_sender(that);
        var arg1 =
            cst_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartSenderPersister(
                persister);
        return wire.wire__crate__api__send__ffi_new_sender_persist(
            port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSenderToken,
        decodeErrorData: dco_decode_ffi_implementation_error,
      ),
      constMeta: kCrateApiSendFfiNewSenderPersistConstMeta,
      argValues: [that, persister],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSendFfiNewSenderPersistConstMeta =>
      const TaskConstMeta(
        debugName: "ffi_new_sender_persist",
        argNames: ["that", "persister"],
      );

  @override
  Future<FfiSenderBuilder>
      crateApiSendFfiSenderBuilderAlwaysDisableOutputSubstitution(
          {required FfiSenderBuilder that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_ffi_sender_builder(that);
        return wire
            .wire__crate__api__send__ffi_sender_builder_always_disable_output_substitution(
                port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_ffi_sender_builder,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiSendFfiSenderBuilderAlwaysDisableOutputSubstitutionConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiSendFfiSenderBuilderAlwaysDisableOutputSubstitutionConstMeta =>
          const TaskConstMeta(
            debugName: "ffi_sender_builder_always_disable_output_substitution",
            argNames: ["that"],
          );

  @override
  Future<FfiNewSender> crateApiSendFfiSenderBuilderBuildNonIncentivizing(
      {required FfiSenderBuilder that, required BigInt minFeeRate}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_ffi_sender_builder(that);
        var arg1 = cst_encode_u_64(minFeeRate);
        return wire
            .wire__crate__api__send__ffi_sender_builder_build_non_incentivizing(
                port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_ffi_new_sender,
        decodeErrorData: dco_decode_ffi_build_sender_error,
      ),
      constMeta: kCrateApiSendFfiSenderBuilderBuildNonIncentivizingConstMeta,
      argValues: [that, minFeeRate],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiSendFfiSenderBuilderBuildNonIncentivizingConstMeta =>
          const TaskConstMeta(
            debugName: "ffi_sender_builder_build_non_incentivizing",
            argNames: ["that", "minFeeRate"],
          );

  @override
  Future<FfiNewSender> crateApiSendFfiSenderBuilderBuildRecommended(
      {required FfiSenderBuilder that, required BigInt minFeeRate}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_ffi_sender_builder(that);
        var arg1 = cst_encode_u_64(minFeeRate);
        return wire
            .wire__crate__api__send__ffi_sender_builder_build_recommended(
                port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_ffi_new_sender,
        decodeErrorData: dco_decode_ffi_build_sender_error,
      ),
      constMeta: kCrateApiSendFfiSenderBuilderBuildRecommendedConstMeta,
      argValues: [that, minFeeRate],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSendFfiSenderBuilderBuildRecommendedConstMeta =>
      const TaskConstMeta(
        debugName: "ffi_sender_builder_build_recommended",
        argNames: ["that", "minFeeRate"],
      );

  @override
  Future<FfiNewSender> crateApiSendFfiSenderBuilderBuildWithAdditionalFee(
      {required FfiSenderBuilder that,
      required BigInt maxFeeContribution,
      int? changeIndex,
      required BigInt minFeeRate,
      required bool clampFeeContribution}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_ffi_sender_builder(that);
        var arg1 = cst_encode_u_64(maxFeeContribution);
        var arg2 = cst_encode_opt_box_autoadd_u_8(changeIndex);
        var arg3 = cst_encode_u_64(minFeeRate);
        var arg4 = cst_encode_bool(clampFeeContribution);
        return wire
            .wire__crate__api__send__ffi_sender_builder_build_with_additional_fee(
                port_, arg0, arg1, arg2, arg3, arg4);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_ffi_new_sender,
        decodeErrorData: dco_decode_ffi_build_sender_error,
      ),
      constMeta: kCrateApiSendFfiSenderBuilderBuildWithAdditionalFeeConstMeta,
      argValues: [
        that,
        maxFeeContribution,
        changeIndex,
        minFeeRate,
        clampFeeContribution
      ],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiSendFfiSenderBuilderBuildWithAdditionalFeeConstMeta =>
          const TaskConstMeta(
            debugName: "ffi_sender_builder_build_with_additional_fee",
            argNames: [
              "that",
              "maxFeeContribution",
              "changeIndex",
              "minFeeRate",
              "clampFeeContribution"
            ],
          );

  @override
  Future<FfiSenderBuilder> crateApiSendFfiSenderBuilderFromPsbtAndUri(
      {required String psbtBase64, required FfiPjUri pjUri}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_String(psbtBase64);
        var arg1 = cst_encode_box_autoadd_ffi_pj_uri(pjUri);
        return wire
            .wire__crate__api__send__ffi_sender_builder_from_psbt_and_uri(
                port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_ffi_sender_builder,
        decodeErrorData: dco_decode_ffi_build_sender_error,
      ),
      constMeta: kCrateApiSendFfiSenderBuilderFromPsbtAndUriConstMeta,
      argValues: [psbtBase64, pjUri],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSendFfiSenderBuilderFromPsbtAndUriConstMeta =>
      const TaskConstMeta(
        debugName: "ffi_sender_builder_from_psbt_and_uri",
        argNames: ["psbtBase64", "pjUri"],
      );

  @override
  Future<String> crateApiSendFfiV1ContextProcessResponse(
      {required FfiV1Context that, required List<int> response}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_ffi_v_1_context(that);
        var arg1 = cst_encode_list_prim_u_8_loose(response);
        return wire.wire__crate__api__send__ffi_v_1_context_process_response(
            port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_ffi_response_error,
      ),
      constMeta: kCrateApiSendFfiV1ContextProcessResponseConstMeta,
      argValues: [that, response],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSendFfiV1ContextProcessResponseConstMeta =>
      const TaskConstMeta(
        debugName: "ffi_v_1_context_process_response",
        argNames: ["that", "response"],
      );

  @override
  Future<(Request, ClientResponse)> crateApiSendFfiV2GetContextExtractReq(
      {required FfiV2GetContext that, required String ohttpRelay}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_ffi_v_2_get_context(that);
        var arg1 = cst_encode_String(ohttpRelay);
        return wire.wire__crate__api__send__ffi_v_2_get_context_extract_req(
            port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_record_request_client_response,
        decodeErrorData: dco_decode_ffi_create_request_error,
      ),
      constMeta: kCrateApiSendFfiV2GetContextExtractReqConstMeta,
      argValues: [that, ohttpRelay],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSendFfiV2GetContextExtractReqConstMeta =>
      const TaskConstMeta(
        debugName: "ffi_v_2_get_context_extract_req",
        argNames: ["that", "ohttpRelay"],
      );

  @override
  Future<String?> crateApiSendFfiV2GetContextProcessResponse(
      {required FfiV2GetContext that,
      required List<int> response,
      required ClientResponse ohttpCtx}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_ffi_v_2_get_context(that);
        var arg1 = cst_encode_list_prim_u_8_loose(response);
        var arg2 = cst_encode_box_autoadd_client_response(ohttpCtx);
        return wire
            .wire__crate__api__send__ffi_v_2_get_context_process_response(
                port_, arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_opt_String,
        decodeErrorData: dco_decode_ffi_response_error,
      ),
      constMeta: kCrateApiSendFfiV2GetContextProcessResponseConstMeta,
      argValues: [that, response, ohttpCtx],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSendFfiV2GetContextProcessResponseConstMeta =>
      const TaskConstMeta(
        debugName: "ffi_v_2_get_context_process_response",
        argNames: ["that", "response", "ohttpCtx"],
      );

  @override
  Future<FfiV2GetContext> crateApiSendFfiV2PostContextProcessResponse(
      {required FfiV2PostContext that, required List<int> response}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_ffi_v_2_post_context(that);
        var arg1 = cst_encode_list_prim_u_8_loose(response);
        return wire
            .wire__crate__api__send__ffi_v_2_post_context_process_response(
                port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_ffi_v_2_get_context,
        decodeErrorData: dco_decode_ffi_encapsulation_error,
      ),
      constMeta: kCrateApiSendFfiV2PostContextProcessResponseConstMeta,
      argValues: [that, response],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSendFfiV2PostContextProcessResponseConstMeta =>
      const TaskConstMeta(
        debugName: "ffi_v_2_post_context_process_response",
        argNames: ["that", "response"],
      );

  @override
  DartSenderPersister crateApiSendMakePersister(
      {required FutureOr<SenderToken> Function(FfiSender) save,
      required FutureOr<FfiSender> Function(SenderToken) load}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiSender_Output_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSenderToken_AnyhowException(
                save);
        var arg1 =
            cst_encode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSenderToken_Output_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiSender_AnyhowException(
                load);
        return wire.wire__crate__api__send__make_persister(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartSenderPersister,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSendMakePersisterConstMeta,
      argValues: [save, load],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSendMakePersisterConstMeta => const TaskConstMeta(
        debugName: "make_persister",
        argNames: ["save", "load"],
      );

  @override
  Future<FfiOhttpKeys> crateApiUriFfiOhttpKeysDecode(
      {required List<int> bytes}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_list_prim_u_8_loose(bytes);
        return wire.wire__crate__api__uri__ffi_ohttp_keys_decode(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_ffi_ohttp_keys,
        decodeErrorData: dco_decode_ffi_ohttp_error,
      ),
      constMeta: kCrateApiUriFfiOhttpKeysDecodeConstMeta,
      argValues: [bytes],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUriFfiOhttpKeysDecodeConstMeta =>
      const TaskConstMeta(
        debugName: "ffi_ohttp_keys_decode",
        argNames: ["bytes"],
      );

  @override
  String crateApiUriFfiPjUriAddress({required FfiPjUri that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_ffi_pj_uri(that);
        return wire.wire__crate__api__uri__ffi_pj_uri_address(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUriFfiPjUriAddressConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUriFfiPjUriAddressConstMeta => const TaskConstMeta(
        debugName: "ffi_pj_uri_address",
        argNames: ["that"],
      );

  @override
  BigInt? crateApiUriFfiPjUriAmountSats({required FfiPjUri that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_ffi_pj_uri(that);
        return wire.wire__crate__api__uri__ffi_pj_uri_amount_sats(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_opt_box_autoadd_u_64,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUriFfiPjUriAmountSatsConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUriFfiPjUriAmountSatsConstMeta =>
      const TaskConstMeta(
        debugName: "ffi_pj_uri_amount_sats",
        argNames: ["that"],
      );

  @override
  String crateApiUriFfiPjUriAsString({required FfiPjUri that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_ffi_pj_uri(that);
        return wire.wire__crate__api__uri__ffi_pj_uri_as_string(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUriFfiPjUriAsStringConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUriFfiPjUriAsStringConstMeta =>
      const TaskConstMeta(
        debugName: "ffi_pj_uri_as_string",
        argNames: ["that"],
      );

  @override
  String crateApiUriFfiPjUriPjEndpoint({required FfiPjUri that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_ffi_pj_uri(that);
        return wire.wire__crate__api__uri__ffi_pj_uri_pj_endpoint(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUriFfiPjUriPjEndpointConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUriFfiPjUriPjEndpointConstMeta =>
      const TaskConstMeta(
        debugName: "ffi_pj_uri_pj_endpoint",
        argNames: ["that"],
      );

  @override
  String crateApiUriFfiUriAddress({required FfiUri that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_ffi_uri(that);
        return wire.wire__crate__api__uri__ffi_uri_address(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUriFfiUriAddressConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUriFfiUriAddressConstMeta => const TaskConstMeta(
        debugName: "ffi_uri_address",
        argNames: ["that"],
      );

  @override
  BigInt? crateApiUriFfiUriAmountSats({required FfiUri that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_ffi_uri(that);
        return wire.wire__crate__api__uri__ffi_uri_amount_sats(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_opt_box_autoadd_u_64,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUriFfiUriAmountSatsConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUriFfiUriAmountSatsConstMeta =>
      const TaskConstMeta(
        debugName: "ffi_uri_amount_sats",
        argNames: ["that"],
      );

  @override
  String crateApiUriFfiUriAsString({required FfiUri that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_ffi_uri(that);
        return wire.wire__crate__api__uri__ffi_uri_as_string(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUriFfiUriAsStringConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUriFfiUriAsStringConstMeta => const TaskConstMeta(
        debugName: "ffi_uri_as_string",
        argNames: ["that"],
      );

  @override
  FfiPjUri crateApiUriFfiUriCheckPjSupported({required FfiUri that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_ffi_uri(that);
        return wire.wire__crate__api__uri__ffi_uri_check_pj_supported(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_ffi_pj_uri,
        decodeErrorData: dco_decode_ffi_pj_not_supported,
      ),
      constMeta: kCrateApiUriFfiUriCheckPjSupportedConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUriFfiUriCheckPjSupportedConstMeta =>
      const TaskConstMeta(
        debugName: "ffi_uri_check_pj_supported",
        argNames: ["that"],
      );

  @override
  FfiUri crateApiUriFfiUriParse({required String uri}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_String(uri);
        return wire.wire__crate__api__uri__ffi_uri_parse(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_ffi_uri,
        decodeErrorData: dco_decode_ffi_pj_parse_error,
      ),
      constMeta: kCrateApiUriFfiUriParseConstMeta,
      argValues: [uri],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUriFfiUriParseConstMeta => const TaskConstMeta(
        debugName: "ffi_uri_parse",
        argNames: ["uri"],
      );

  @override
  String crateApiUriFfiUrlAsString({required FfiUrl that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_ffi_url(that);
        return wire.wire__crate__api__uri__ffi_url_as_string(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUriFfiUrlAsStringConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUriFfiUrlAsStringConstMeta => const TaskConstMeta(
        debugName: "ffi_url_as_string",
        argNames: ["that"],
      );

  @override
  FfiUrl crateApiUriFfiUrlParse({required String url}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_String(url);
        return wire.wire__crate__api__uri__ffi_url_parse(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_ffi_url,
        decodeErrorData: dco_decode_ffi_url_parse_error,
      ),
      constMeta: kCrateApiUriFfiUrlParseConstMeta,
      argValues: [url],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUriFfiUrlParseConstMeta => const TaskConstMeta(
        debugName: "ffi_url_parse",
        argNames: ["url"],
      );

  @override
  String? crateApiUriFfiUrlQuery({required FfiUrl that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_ffi_url(that);
        return wire.wire__crate__api__uri__ffi_url_query(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_opt_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUriFfiUrlQueryConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUriFfiUrlQueryConstMeta => const TaskConstMeta(
        debugName: "ffi_url_query",
        argNames: ["that"],
      );

  Future<void> Function(int, dynamic)
      encode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiReceiver_Output_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReceiverToken_AnyhowException(
          FutureOr<ReceiverToken> Function(FfiReceiver) raw) {
    return (callId, rawArg0) async {
      final arg0 =
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiReceiver(
              rawArg0);

      Box<ReceiverToken>? rawOutput;
      Box<AnyhowException>? rawError;
      try {
        rawOutput = Box(await raw(arg0));
      } catch (e, s) {
        rawError = Box(AnyhowException("$e\n\n$s"));
      }

      final serializer = SseSerializer(generalizedFrbRustBinding);
      assert((rawOutput != null) ^ (rawError != null));
      if (rawOutput != null) {
        serializer.buffer.putUint8(0);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReceiverToken(
            rawOutput.value, serializer);
      } else {
        serializer.buffer.putUint8(1);
        sse_encode_AnyhowException(rawError!.value, serializer);
      }
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  Future<void> Function(int, dynamic)
      encode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiSender_Output_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSenderToken_AnyhowException(
          FutureOr<SenderToken> Function(FfiSender) raw) {
    return (callId, rawArg0) async {
      final arg0 =
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiSender(
              rawArg0);

      Box<SenderToken>? rawOutput;
      Box<AnyhowException>? rawError;
      try {
        rawOutput = Box(await raw(arg0));
      } catch (e, s) {
        rawError = Box(AnyhowException("$e\n\n$s"));
      }

      final serializer = SseSerializer(generalizedFrbRustBinding);
      assert((rawOutput != null) ^ (rawError != null));
      if (rawOutput != null) {
        serializer.buffer.putUint8(0);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSenderToken(
            rawOutput.value, serializer);
      } else {
        serializer.buffer.putUint8(1);
        sse_encode_AnyhowException(rawError!.value, serializer);
      }
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  Future<void> Function(int, dynamic)
      encode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReceiverToken_Output_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiReceiver_AnyhowException(
          FutureOr<FfiReceiver> Function(ReceiverToken) raw) {
    return (callId, rawArg0) async {
      final arg0 =
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReceiverToken(
              rawArg0);

      Box<FfiReceiver>? rawOutput;
      Box<AnyhowException>? rawError;
      try {
        rawOutput = Box(await raw(arg0));
      } catch (e, s) {
        rawError = Box(AnyhowException("$e\n\n$s"));
      }

      final serializer = SseSerializer(generalizedFrbRustBinding);
      assert((rawOutput != null) ^ (rawError != null));
      if (rawOutput != null) {
        serializer.buffer.putUint8(0);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiReceiver(
            rawOutput.value, serializer);
      } else {
        serializer.buffer.putUint8(1);
        sse_encode_AnyhowException(rawError!.value, serializer);
      }
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  Future<void> Function(int, dynamic)
      encode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSenderToken_Output_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiSender_AnyhowException(
          FutureOr<FfiSender> Function(SenderToken) raw) {
    return (callId, rawArg0) async {
      final arg0 =
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSenderToken(
              rawArg0);

      Box<FfiSender>? rawOutput;
      Box<AnyhowException>? rawError;
      try {
        rawOutput = Box(await raw(arg0));
      } catch (e, s) {
        rawError = Box(AnyhowException("$e\n\n$s"));
      }

      final serializer = SseSerializer(generalizedFrbRustBinding);
      assert((rawOutput != null) ^ (rawError != null));
      if (rawOutput != null) {
        serializer.buffer.putUint8(0);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiSender(
            rawOutput.value, serializer);
      } else {
        serializer.buffer.putUint8(1);
        sse_encode_AnyhowException(rawError!.value, serializer);
      }
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  Future<void> Function(int, dynamic)
      encode_DartFn_Inputs_String_Output_String_AnyhowException(
          FutureOr<String> Function(String) raw) {
    return (callId, rawArg0) async {
      final arg0 = dco_decode_String(rawArg0);

      Box<String>? rawOutput;
      Box<AnyhowException>? rawError;
      try {
        rawOutput = Box(await raw(arg0));
      } catch (e, s) {
        rawError = Box(AnyhowException("$e\n\n$s"));
      }

      final serializer = SseSerializer(generalizedFrbRustBinding);
      assert((rawOutput != null) ^ (rawError != null));
      if (rawOutput != null) {
        serializer.buffer.putUint8(0);
        sse_encode_String(rawOutput.value, serializer);
      } else {
        serializer.buffer.putUint8(1);
        sse_encode_AnyhowException(rawError!.value, serializer);
      }
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  Future<void> Function(int, dynamic)
      encode_DartFn_Inputs_list_prim_u_8_strict_Output_bool_AnyhowException(
          FutureOr<bool> Function(Uint8List) raw) {
    return (callId, rawArg0) async {
      final arg0 = dco_decode_list_prim_u_8_strict(rawArg0);

      Box<bool>? rawOutput;
      Box<AnyhowException>? rawError;
      try {
        rawOutput = Box(await raw(arg0));
      } catch (e, s) {
        rawError = Box(AnyhowException("$e\n\n$s"));
      }

      final serializer = SseSerializer(generalizedFrbRustBinding);
      assert((rawOutput != null) ^ (rawError != null));
      if (rawOutput != null) {
        serializer.buffer.putUint8(0);
        sse_encode_bool(rawOutput.value, serializer);
      } else {
        serializer.buffer.putUint8(1);
        sse_encode_AnyhowException(rawError!.value, serializer);
      }
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  Future<void> Function(int, dynamic)
      encode_DartFn_Inputs_out_point_Output_bool_AnyhowException(
          FutureOr<bool> Function(OutPoint) raw) {
    return (callId, rawArg0) async {
      final arg0 = dco_decode_out_point(rawArg0);

      Box<bool>? rawOutput;
      Box<AnyhowException>? rawError;
      try {
        rawOutput = Box(await raw(arg0));
      } catch (e, s) {
        rawError = Box(AnyhowException("$e\n\n$s"));
      }

      final serializer = SseSerializer(generalizedFrbRustBinding);
      assert((rawOutput != null) ^ (rawError != null));
      if (rawOutput != null) {
        serializer.buffer.putUint8(0);
        sse_encode_bool(rawOutput.value, serializer);
      } else {
        serializer.buffer.putUint8(1);
        sse_encode_AnyhowException(rawError!.value, serializer);
      }
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Script =>
          wire.rust_arc_increment_strong_count_RustOpaque_bitcoin_ffiScript;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Script =>
          wire.rust_arc_decrement_strong_count_RustOpaque_bitcoin_ffiScript;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_DartReceiverPersister => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartReceiverPersister;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_DartReceiverPersister => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartReceiverPersister;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_DartSenderPersister => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartSenderPersister;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_DartSenderPersister => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartSenderPersister;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Error =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerError;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Error =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerError;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FfiJsonReply => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiJsonReply;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FfiJsonReply => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiJsonReply;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FfiReceiver => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiReceiver;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FfiReceiver => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiReceiver;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FfiSender => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiSender;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FfiSender => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiSender;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ImplementationError => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerImplementationError;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ImplementationError => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerImplementationError;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_InputContributionError => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInputContributionError;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_InputContributionError => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInputContributionError;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_IntoUrlError => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIntoUrlError;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_IntoUrlError => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIntoUrlError;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_IoError => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIoError;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_IoError => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIoError;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OhttpError => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOhttpError;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OhttpError => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOhttpError;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OutputSubstitutionError => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOutputSubstitutionError;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OutputSubstitutionError => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOutputSubstitutionError;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_PjNotSupported => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPjNotSupported;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_PjNotSupported => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPjNotSupported;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_PjParseError => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPjParseError;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_PjParseError => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPjParseError;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_PsbtInputError => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPsbtInputError;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_PsbtInputError => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPsbtInputError;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ReceiverToken => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReceiverToken;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ReceiverToken => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReceiverToken;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ReplyableError => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReplyableError;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ReplyableError => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReplyableError;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ResponseError => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerResponseError;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ResponseError => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerResponseError;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SelectionError => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSelectionError;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SelectionError => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSelectionError;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SenderToken => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSenderToken;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SenderToken => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSenderToken;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SerdeJsonError => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSerdeJsonError;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SerdeJsonError => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSerdeJsonError;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SessionError => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSessionError;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SessionError => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSessionError;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_UrlParseError => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUrlParseError;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_UrlParseError => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUrlParseError;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OhttpKeys =>
          wire.rust_arc_increment_strong_count_RustOpaque_payjoin_ffiOhttpKeys;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OhttpKeys =>
          wire.rust_arc_decrement_strong_count_RustOpaque_payjoin_ffiOhttpKeys;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Url =>
      wire.rust_arc_increment_strong_count_RustOpaque_payjoin_ffiUrl;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Url =>
      wire.rust_arc_decrement_strong_count_RustOpaque_payjoin_ffiUrl;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_InputPair => wire
          .rust_arc_increment_strong_count_RustOpaque_payjoin_ffireceiveInputPair;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_InputPair => wire
          .rust_arc_decrement_strong_count_RustOpaque_payjoin_ffireceiveInputPair;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MaybeInputsOwned => wire
          .rust_arc_increment_strong_count_RustOpaque_payjoin_ffireceiveMaybeInputsOwned;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MaybeInputsOwned => wire
          .rust_arc_decrement_strong_count_RustOpaque_payjoin_ffireceiveMaybeInputsOwned;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MaybeInputsSeen => wire
          .rust_arc_increment_strong_count_RustOpaque_payjoin_ffireceiveMaybeInputsSeen;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MaybeInputsSeen => wire
          .rust_arc_decrement_strong_count_RustOpaque_payjoin_ffireceiveMaybeInputsSeen;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NewReceiver => wire
          .rust_arc_increment_strong_count_RustOpaque_payjoin_ffireceiveNewReceiver;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NewReceiver => wire
          .rust_arc_decrement_strong_count_RustOpaque_payjoin_ffireceiveNewReceiver;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OutputsUnknown => wire
          .rust_arc_increment_strong_count_RustOpaque_payjoin_ffireceiveOutputsUnknown;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OutputsUnknown => wire
          .rust_arc_decrement_strong_count_RustOpaque_payjoin_ffireceiveOutputsUnknown;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_PayjoinProposal => wire
          .rust_arc_increment_strong_count_RustOpaque_payjoin_ffireceivePayjoinProposal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_PayjoinProposal => wire
          .rust_arc_decrement_strong_count_RustOpaque_payjoin_ffireceivePayjoinProposal;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ProvisionalProposal => wire
          .rust_arc_increment_strong_count_RustOpaque_payjoin_ffireceiveProvisionalProposal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ProvisionalProposal => wire
          .rust_arc_decrement_strong_count_RustOpaque_payjoin_ffireceiveProvisionalProposal;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_UncheckedProposal => wire
          .rust_arc_increment_strong_count_RustOpaque_payjoin_ffireceiveUncheckedProposal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_UncheckedProposal => wire
          .rust_arc_decrement_strong_count_RustOpaque_payjoin_ffireceiveUncheckedProposal;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_WantsInputs => wire
          .rust_arc_increment_strong_count_RustOpaque_payjoin_ffireceiveWantsInputs;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_WantsInputs => wire
          .rust_arc_decrement_strong_count_RustOpaque_payjoin_ffireceiveWantsInputs;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_WantsOutputs => wire
          .rust_arc_increment_strong_count_RustOpaque_payjoin_ffireceiveWantsOutputs;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_WantsOutputs => wire
          .rust_arc_decrement_strong_count_RustOpaque_payjoin_ffireceiveWantsOutputs;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NewSender => wire
          .rust_arc_increment_strong_count_RustOpaque_payjoin_ffisendNewSender;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NewSender => wire
          .rust_arc_decrement_strong_count_RustOpaque_payjoin_ffisendNewSender;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SenderBuilder => wire
          .rust_arc_increment_strong_count_RustOpaque_payjoin_ffisendSenderBuilder;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SenderBuilder => wire
          .rust_arc_decrement_strong_count_RustOpaque_payjoin_ffisendSenderBuilder;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_V1Context => wire
          .rust_arc_increment_strong_count_RustOpaque_payjoin_ffisendV1Context;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_V1Context => wire
          .rust_arc_decrement_strong_count_RustOpaque_payjoin_ffisendV1Context;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_V2GetContext => wire
          .rust_arc_increment_strong_count_RustOpaque_payjoin_ffisendV2GetContext;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_V2GetContext => wire
          .rust_arc_decrement_strong_count_RustOpaque_payjoin_ffisendV2GetContext;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_V2PostContext => wire
          .rust_arc_increment_strong_count_RustOpaque_payjoin_ffisendV2PostContext;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_V2PostContext => wire
          .rust_arc_decrement_strong_count_RustOpaque_payjoin_ffisendV2PostContext;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_PjUri =>
      wire.rust_arc_increment_strong_count_RustOpaque_payjoin_ffiuriPjUri;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_PjUri =>
      wire.rust_arc_decrement_strong_count_RustOpaque_payjoin_ffiuriPjUri;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Uri =>
      wire.rust_arc_increment_strong_count_RustOpaque_payjoin_ffiuriUri;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Uri =>
      wire.rust_arc_decrement_strong_count_RustOpaque_payjoin_ffiuriUri;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MutexOptionClientResponse => wire
          .rust_arc_increment_strong_count_RustOpaque_stdsyncMutexcoreoptionOptionpayjoin_ffiClientResponse;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MutexOptionClientResponse => wire
          .rust_arc_decrement_strong_count_RustOpaque_stdsyncMutexcoreoptionOptionpayjoin_ffiClientResponse;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  Error
      dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerError(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerError(
        raw);
  }

  @protected
  ImplementationError
      dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerImplementationError(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerImplementationError(
        raw);
  }

  @protected
  InputContributionError
      dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInputContributionError(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInputContributionError(
        raw);
  }

  @protected
  IntoUrlError
      dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIntoUrlError(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIntoUrlError(
        raw);
  }

  @protected
  IoError
      dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIoError(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIoError(
        raw);
  }

  @protected
  OhttpError
      dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOhttpError(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOhttpError(
        raw);
  }

  @protected
  OutputSubstitutionError
      dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOutputSubstitutionError(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOutputSubstitutionError(
        raw);
  }

  @protected
  PjNotSupported
      dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPjNotSupported(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPjNotSupported(
        raw);
  }

  @protected
  PjParseError
      dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPjParseError(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPjParseError(
        raw);
  }

  @protected
  PsbtInputError
      dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPsbtInputError(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPsbtInputError(
        raw);
  }

  @protected
  ReplyableError
      dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReplyableError(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReplyableError(
        raw);
  }

  @protected
  ResponseError
      dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerResponseError(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerResponseError(
        raw);
  }

  @protected
  SelectionError
      dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSelectionError(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSelectionError(
        raw);
  }

  @protected
  SerdeJsonError
      dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSerdeJsonError(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSerdeJsonError(
        raw);
  }

  @protected
  SessionError
      dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSessionError(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSessionError(
        raw);
  }

  @protected
  UrlParseError
      dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUrlParseError(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUrlParseError(
        raw);
  }

  @protected
  DartReceiverPersister
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartReceiverPersister(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DartReceiverPersisterImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DartSenderPersister
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartSenderPersister(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DartSenderPersisterImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FfiJsonReply
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiJsonReply(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FfiJsonReplyImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FfiReceiver
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiReceiver(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FfiReceiverImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FfiSender
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiSender(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FfiSenderImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ImplementationError
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerImplementationError(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ImplementationErrorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ReceiverToken
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReceiverToken(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ReceiverTokenImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SenderToken
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSenderToken(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SenderTokenImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DartReceiverPersister
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartReceiverPersister(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DartReceiverPersisterImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DartSenderPersister
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartSenderPersister(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DartSenderPersisterImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FfiReceiver
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiReceiver(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FfiReceiverImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FfiSender
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiSender(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FfiSenderImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FutureOr<ReceiverToken> Function(FfiReceiver)
      dco_decode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiReceiver_Output_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReceiverToken_AnyhowException(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  FutureOr<SenderToken> Function(FfiSender)
      dco_decode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiSender_Output_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSenderToken_AnyhowException(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  FutureOr<FfiReceiver> Function(ReceiverToken)
      dco_decode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReceiverToken_Output_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiReceiver_AnyhowException(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  FutureOr<FfiSender> Function(SenderToken)
      dco_decode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSenderToken_Output_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiSender_AnyhowException(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  FutureOr<String> Function(String)
      dco_decode_DartFn_Inputs_String_Output_String_AnyhowException(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  FutureOr<bool> Function(Uint8List)
      dco_decode_DartFn_Inputs_list_prim_u_8_strict_Output_bool_AnyhowException(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  FutureOr<bool> Function(OutPoint)
      dco_decode_DartFn_Inputs_out_point_Output_bool_AnyhowException(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  Object dco_decode_DartOpaque(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return decodeDartOpaque(raw, generalizedFrbRustBinding);
  }

  @protected
  Script dco_decode_RustOpaque_bitcoin_ffiScript(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ScriptImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DartReceiverPersister
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartReceiverPersister(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DartReceiverPersisterImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DartSenderPersister
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartSenderPersister(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DartSenderPersisterImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Error
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerError(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ErrorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FfiJsonReply
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiJsonReply(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FfiJsonReplyImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FfiReceiver
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiReceiver(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FfiReceiverImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FfiSender
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiSender(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FfiSenderImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ImplementationError
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerImplementationError(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ImplementationErrorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  InputContributionError
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInputContributionError(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return InputContributionErrorImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  IntoUrlError
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIntoUrlError(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return IntoUrlErrorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  IoError
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIoError(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return IoErrorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  OhttpError
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOhttpError(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OhttpErrorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  OutputSubstitutionError
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOutputSubstitutionError(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OutputSubstitutionErrorImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  PjNotSupported
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPjNotSupported(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PjNotSupportedImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  PjParseError
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPjParseError(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PjParseErrorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  PsbtInputError
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPsbtInputError(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PsbtInputErrorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ReceiverToken
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReceiverToken(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ReceiverTokenImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ReplyableError
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReplyableError(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ReplyableErrorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ResponseError
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerResponseError(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ResponseErrorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SelectionError
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSelectionError(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SelectionErrorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SenderToken
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSenderToken(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SenderTokenImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SerdeJsonError
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSerdeJsonError(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SerdeJsonErrorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SessionError
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSessionError(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SessionErrorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  UrlParseError
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUrlParseError(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return UrlParseErrorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  OhttpKeys dco_decode_RustOpaque_payjoin_ffiOhttpKeys(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OhttpKeysImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Url dco_decode_RustOpaque_payjoin_ffiUrl(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return UrlImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  InputPair dco_decode_RustOpaque_payjoin_ffireceiveInputPair(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return InputPairImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MaybeInputsOwned dco_decode_RustOpaque_payjoin_ffireceiveMaybeInputsOwned(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MaybeInputsOwnedImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MaybeInputsSeen dco_decode_RustOpaque_payjoin_ffireceiveMaybeInputsSeen(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MaybeInputsSeenImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  NewReceiver dco_decode_RustOpaque_payjoin_ffireceiveNewReceiver(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NewReceiverImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  OutputsUnknown dco_decode_RustOpaque_payjoin_ffireceiveOutputsUnknown(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OutputsUnknownImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  PayjoinProposal dco_decode_RustOpaque_payjoin_ffireceivePayjoinProposal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PayjoinProposalImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ProvisionalProposal
      dco_decode_RustOpaque_payjoin_ffireceiveProvisionalProposal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ProvisionalProposalImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  UncheckedProposal dco_decode_RustOpaque_payjoin_ffireceiveUncheckedProposal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return UncheckedProposalImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WantsInputs dco_decode_RustOpaque_payjoin_ffireceiveWantsInputs(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WantsInputsImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  WantsOutputs dco_decode_RustOpaque_payjoin_ffireceiveWantsOutputs(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WantsOutputsImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  NewSender dco_decode_RustOpaque_payjoin_ffisendNewSender(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NewSenderImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SenderBuilder dco_decode_RustOpaque_payjoin_ffisendSenderBuilder(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SenderBuilderImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  V1Context dco_decode_RustOpaque_payjoin_ffisendV1Context(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return V1ContextImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  V2GetContext dco_decode_RustOpaque_payjoin_ffisendV2GetContext(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return V2GetContextImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  V2PostContext dco_decode_RustOpaque_payjoin_ffisendV2PostContext(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return V2PostContextImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  PjUri dco_decode_RustOpaque_payjoin_ffiuriPjUri(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PjUriImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Uri dco_decode_RustOpaque_payjoin_ffiuriUri(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return UriImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MutexOptionClientResponse
      dco_decode_RustOpaque_stdsyncMutexcoreoptionOptionpayjoin_ffiClientResponse(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MutexOptionClientResponseImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  ReceiverPersister dco_decode_TraitDef_ReceiverPersister(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  ClientResponse dco_decode_box_autoadd_client_response(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_client_response(raw);
  }

  @protected
  FfiMaybeInputsOwned dco_decode_box_autoadd_ffi_maybe_inputs_owned(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ffi_maybe_inputs_owned(raw);
  }

  @protected
  FfiMaybeInputsSeen dco_decode_box_autoadd_ffi_maybe_inputs_seen(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ffi_maybe_inputs_seen(raw);
  }

  @protected
  FfiNewReceiver dco_decode_box_autoadd_ffi_new_receiver(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ffi_new_receiver(raw);
  }

  @protected
  FfiNewSender dco_decode_box_autoadd_ffi_new_sender(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ffi_new_sender(raw);
  }

  @protected
  FfiOhttpKeys dco_decode_box_autoadd_ffi_ohttp_keys(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ffi_ohttp_keys(raw);
  }

  @protected
  FfiOutputsUnknown dco_decode_box_autoadd_ffi_outputs_unknown(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ffi_outputs_unknown(raw);
  }

  @protected
  FfiPayjoinProposal dco_decode_box_autoadd_ffi_payjoin_proposal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ffi_payjoin_proposal(raw);
  }

  @protected
  FfiPjUri dco_decode_box_autoadd_ffi_pj_uri(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ffi_pj_uri(raw);
  }

  @protected
  FfiProvisionalProposal dco_decode_box_autoadd_ffi_provisional_proposal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ffi_provisional_proposal(raw);
  }

  @protected
  FfiScript dco_decode_box_autoadd_ffi_script(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ffi_script(raw);
  }

  @protected
  FfiSenderBuilder dco_decode_box_autoadd_ffi_sender_builder(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ffi_sender_builder(raw);
  }

  @protected
  FfiUncheckedProposal dco_decode_box_autoadd_ffi_unchecked_proposal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ffi_unchecked_proposal(raw);
  }

  @protected
  FfiUri dco_decode_box_autoadd_ffi_uri(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ffi_uri(raw);
  }

  @protected
  FfiUrl dco_decode_box_autoadd_ffi_url(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ffi_url(raw);
  }

  @protected
  FfiV1Context dco_decode_box_autoadd_ffi_v_1_context(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ffi_v_1_context(raw);
  }

  @protected
  FfiV2GetContext dco_decode_box_autoadd_ffi_v_2_get_context(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ffi_v_2_get_context(raw);
  }

  @protected
  FfiV2PostContext dco_decode_box_autoadd_ffi_v_2_post_context(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ffi_v_2_post_context(raw);
  }

  @protected
  FfiWantsInputs dco_decode_box_autoadd_ffi_wants_inputs(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ffi_wants_inputs(raw);
  }

  @protected
  FfiWantsOutputs dco_decode_box_autoadd_ffi_wants_outputs(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ffi_wants_outputs(raw);
  }

  @protected
  PsbtInput dco_decode_box_autoadd_psbt_input(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_psbt_input(raw);
  }

  @protected
  TxIn dco_decode_box_autoadd_tx_in(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_tx_in(raw);
  }

  @protected
  TxOut dco_decode_box_autoadd_tx_out(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_tx_out(raw);
  }

  @protected
  BigInt dco_decode_box_autoadd_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_u_64(raw);
  }

  @protected
  int dco_decode_box_autoadd_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  ClientResponse dco_decode_client_response(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return ClientResponse(
      field0:
          dco_decode_RustOpaque_stdsyncMutexcoreoptionOptionpayjoin_ffiClientResponse(
              arr[0]),
    );
  }

  @protected
  FfiBuildSenderError dco_decode_ffi_build_sender_error(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FfiBuildSenderError(
      msg: dco_decode_String(arr[0]),
    );
  }

  @protected
  FfiCreateRequestError dco_decode_ffi_create_request_error(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FfiCreateRequestError(
      msg: dco_decode_String(arr[0]),
    );
  }

  @protected
  FfiEncapsulationError dco_decode_ffi_encapsulation_error(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FfiEncapsulationError(
      msg: dco_decode_String(arr[0]),
    );
  }

  @protected
  FfiError dco_decode_ffi_error(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FfiError(
      field0:
          dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerError(
              arr[0]),
    );
  }

  @protected
  FfiImplementationError dco_decode_ffi_implementation_error(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FfiImplementationError(
      field0:
          dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerImplementationError(
              arr[0]),
    );
  }

  @protected
  FfiInputContributionError dco_decode_ffi_input_contribution_error(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FfiInputContributionError(
      field0:
          dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInputContributionError(
              arr[0]),
    );
  }

  @protected
  FfiInputPair dco_decode_ffi_input_pair(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FfiInputPair(
      field0: dco_decode_RustOpaque_payjoin_ffireceiveInputPair(arr[0]),
    );
  }

  @protected
  FfiIntoUrlError dco_decode_ffi_into_url_error(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FfiIntoUrlError(
      field0:
          dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIntoUrlError(
              arr[0]),
    );
  }

  @protected
  FfiIoError dco_decode_ffi_io_error(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FfiIoError(
      field0:
          dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIoError(
              arr[0]),
    );
  }

  @protected
  FfiMaybeInputsOwned dco_decode_ffi_maybe_inputs_owned(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FfiMaybeInputsOwned(
      field0: dco_decode_RustOpaque_payjoin_ffireceiveMaybeInputsOwned(arr[0]),
    );
  }

  @protected
  FfiMaybeInputsSeen dco_decode_ffi_maybe_inputs_seen(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FfiMaybeInputsSeen(
      field0: dco_decode_RustOpaque_payjoin_ffireceiveMaybeInputsSeen(arr[0]),
    );
  }

  @protected
  FfiNewReceiver dco_decode_ffi_new_receiver(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FfiNewReceiver(
      field0: dco_decode_RustOpaque_payjoin_ffireceiveNewReceiver(arr[0]),
    );
  }

  @protected
  FfiNewSender dco_decode_ffi_new_sender(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FfiNewSender(
      field0: dco_decode_RustOpaque_payjoin_ffisendNewSender(arr[0]),
    );
  }

  @protected
  FfiOhttpError dco_decode_ffi_ohttp_error(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FfiOhttpError(
      field0:
          dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOhttpError(
              arr[0]),
    );
  }

  @protected
  FfiOhttpKeys dco_decode_ffi_ohttp_keys(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FfiOhttpKeys(
      field0: dco_decode_RustOpaque_payjoin_ffiOhttpKeys(arr[0]),
    );
  }

  @protected
  FfiOutputSubstitutionError dco_decode_ffi_output_substitution_error(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FfiOutputSubstitutionError(
      field0:
          dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOutputSubstitutionError(
              arr[0]),
    );
  }

  @protected
  FfiOutputsUnknown dco_decode_ffi_outputs_unknown(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FfiOutputsUnknown(
      field0: dco_decode_RustOpaque_payjoin_ffireceiveOutputsUnknown(arr[0]),
    );
  }

  @protected
  FfiPayjoinProposal dco_decode_ffi_payjoin_proposal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FfiPayjoinProposal(
      field0: dco_decode_RustOpaque_payjoin_ffireceivePayjoinProposal(arr[0]),
    );
  }

  @protected
  FfiPjNotSupported dco_decode_ffi_pj_not_supported(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FfiPjNotSupported(
      field0:
          dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPjNotSupported(
              arr[0]),
    );
  }

  @protected
  FfiPjParseError dco_decode_ffi_pj_parse_error(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FfiPjParseError(
      field0:
          dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPjParseError(
              arr[0]),
    );
  }

  @protected
  FfiPjUri dco_decode_ffi_pj_uri(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FfiPjUri(
      field0: dco_decode_RustOpaque_payjoin_ffiuriPjUri(arr[0]),
    );
  }

  @protected
  FfiProvisionalProposal dco_decode_ffi_provisional_proposal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FfiProvisionalProposal(
      field0:
          dco_decode_RustOpaque_payjoin_ffireceiveProvisionalProposal(arr[0]),
    );
  }

  @protected
  FfiPsbtInputError dco_decode_ffi_psbt_input_error(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FfiPsbtInputError(
      field0:
          dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPsbtInputError(
              arr[0]),
    );
  }

  @protected
  FfiReplyableError dco_decode_ffi_replyable_error(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FfiReplyableError(
      field0:
          dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReplyableError(
              arr[0]),
    );
  }

  @protected
  FfiResponseError dco_decode_ffi_response_error(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FfiResponseError(
      field0:
          dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerResponseError(
              arr[0]),
    );
  }

  @protected
  FfiScript dco_decode_ffi_script(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FfiScript(
      field0: dco_decode_RustOpaque_bitcoin_ffiScript(arr[0]),
    );
  }

  @protected
  FfiSelectionError dco_decode_ffi_selection_error(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FfiSelectionError(
      field0:
          dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSelectionError(
              arr[0]),
    );
  }

  @protected
  FfiSenderBuilder dco_decode_ffi_sender_builder(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FfiSenderBuilder(
      field0: dco_decode_RustOpaque_payjoin_ffisendSenderBuilder(arr[0]),
    );
  }

  @protected
  FfiSerdeJsonError dco_decode_ffi_serde_json_error(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FfiSerdeJsonError(
      field0:
          dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSerdeJsonError(
              arr[0]),
    );
  }

  @protected
  FfiSessionError dco_decode_ffi_session_error(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FfiSessionError(
      field0:
          dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSessionError(
              arr[0]),
    );
  }

  @protected
  FfiUncheckedProposal dco_decode_ffi_unchecked_proposal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FfiUncheckedProposal(
      field0: dco_decode_RustOpaque_payjoin_ffireceiveUncheckedProposal(arr[0]),
    );
  }

  @protected
  FfiUri dco_decode_ffi_uri(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FfiUri(
      field0: dco_decode_RustOpaque_payjoin_ffiuriUri(arr[0]),
    );
  }

  @protected
  FfiUrl dco_decode_ffi_url(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FfiUrl(
      field0: dco_decode_RustOpaque_payjoin_ffiUrl(arr[0]),
    );
  }

  @protected
  FfiUrlParseError dco_decode_ffi_url_parse_error(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FfiUrlParseError(
      field0:
          dco_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUrlParseError(
              arr[0]),
    );
  }

  @protected
  FfiV1Context dco_decode_ffi_v_1_context(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FfiV1Context(
      field0: dco_decode_RustOpaque_payjoin_ffisendV1Context(arr[0]),
    );
  }

  @protected
  FfiV2GetContext dco_decode_ffi_v_2_get_context(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FfiV2GetContext(
      field0: dco_decode_RustOpaque_payjoin_ffisendV2GetContext(arr[0]),
    );
  }

  @protected
  FfiV2PostContext dco_decode_ffi_v_2_post_context(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FfiV2PostContext(
      field0: dco_decode_RustOpaque_payjoin_ffisendV2PostContext(arr[0]),
    );
  }

  @protected
  FfiWantsInputs dco_decode_ffi_wants_inputs(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FfiWantsInputs(
      field0: dco_decode_RustOpaque_payjoin_ffireceiveWantsInputs(arr[0]),
    );
  }

  @protected
  FfiWantsOutputs dco_decode_ffi_wants_outputs(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FfiWantsOutputs(
      field0: dco_decode_RustOpaque_payjoin_ffireceiveWantsOutputs(arr[0]),
    );
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  List<FfiInputPair> dco_decode_list_ffi_input_pair(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_ffi_input_pair).toList();
  }

  @protected
  List<Uint8List> dco_decode_list_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_list_prim_u_8_strict).toList();
  }

  @protected
  List<OutPoint> dco_decode_list_out_point(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_out_point).toList();
  }

  @protected
  List<int> dco_decode_list_prim_u_8_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<int>;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<TxOut> dco_decode_list_tx_out(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_tx_out).toList();
  }

  @protected
  Network dco_decode_network(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Network.values[raw as int];
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  FfiScript? dco_decode_opt_box_autoadd_ffi_script(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_ffi_script(raw);
  }

  @protected
  FfiUncheckedProposal? dco_decode_opt_box_autoadd_ffi_unchecked_proposal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_ffi_unchecked_proposal(raw);
  }

  @protected
  TxOut? dco_decode_opt_box_autoadd_tx_out(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_tx_out(raw);
  }

  @protected
  BigInt? dco_decode_opt_box_autoadd_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_64(raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_8(raw);
  }

  @protected
  OutPoint dco_decode_out_point(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return OutPoint(
      txid: dco_decode_String(arr[0]),
      vout: dco_decode_u_32(arr[1]),
    );
  }

  @protected
  PsbtInput dco_decode_psbt_input(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return PsbtInput(
      witnessUtxo: dco_decode_opt_box_autoadd_tx_out(arr[0]),
      redeemScript: dco_decode_opt_box_autoadd_ffi_script(arr[1]),
      witnessScript: dco_decode_opt_box_autoadd_ffi_script(arr[2]),
    );
  }

  @protected
  (Request, ClientResponse) dco_decode_record_request_client_response(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_request(arr[0]),
      dco_decode_client_response(arr[1]),
    );
  }

  @protected
  (Request, FfiV1Context) dco_decode_record_request_ffi_v_1_context(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_request(arr[0]),
      dco_decode_ffi_v_1_context(arr[1]),
    );
  }

  @protected
  (Request, FfiV2PostContext) dco_decode_record_request_ffi_v_2_post_context(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_request(arr[0]),
      dco_decode_ffi_v_2_post_context(arr[1]),
    );
  }

  @protected
  Request dco_decode_request(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return Request(
      url: dco_decode_ffi_url(arr[0]),
      contentType: dco_decode_String(arr[1]),
      body: dco_decode_list_prim_u_8_strict(arr[2]),
    );
  }

  @protected
  TxIn dco_decode_tx_in(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return TxIn(
      previousOutput: dco_decode_out_point(arr[0]),
      scriptSig: dco_decode_ffi_script(arr[1]),
      sequence: dco_decode_u_32(arr[2]),
      witness: dco_decode_list_list_prim_u_8_strict(arr[3]),
    );
  }

  @protected
  TxOut dco_decode_tx_out(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return TxOut(
      value: dco_decode_u_64(arr[0]),
      scriptPubkey: dco_decode_list_prim_u_8_strict(arr[1]),
    );
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  BigInt dco_decode_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  Error
      sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerError(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerError(
            deserializer);
    return inner;
  }

  @protected
  ImplementationError
      sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerImplementationError(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerImplementationError(
            deserializer);
    return inner;
  }

  @protected
  InputContributionError
      sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInputContributionError(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInputContributionError(
            deserializer);
    return inner;
  }

  @protected
  IntoUrlError
      sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIntoUrlError(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIntoUrlError(
            deserializer);
    return inner;
  }

  @protected
  IoError
      sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIoError(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIoError(
            deserializer);
    return inner;
  }

  @protected
  OhttpError
      sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOhttpError(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOhttpError(
            deserializer);
    return inner;
  }

  @protected
  OutputSubstitutionError
      sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOutputSubstitutionError(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOutputSubstitutionError(
            deserializer);
    return inner;
  }

  @protected
  PjNotSupported
      sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPjNotSupported(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPjNotSupported(
            deserializer);
    return inner;
  }

  @protected
  PjParseError
      sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPjParseError(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPjParseError(
            deserializer);
    return inner;
  }

  @protected
  PsbtInputError
      sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPsbtInputError(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPsbtInputError(
            deserializer);
    return inner;
  }

  @protected
  ReplyableError
      sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReplyableError(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReplyableError(
            deserializer);
    return inner;
  }

  @protected
  ResponseError
      sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerResponseError(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerResponseError(
            deserializer);
    return inner;
  }

  @protected
  SelectionError
      sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSelectionError(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSelectionError(
            deserializer);
    return inner;
  }

  @protected
  SerdeJsonError
      sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSerdeJsonError(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSerdeJsonError(
            deserializer);
    return inner;
  }

  @protected
  SessionError
      sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSessionError(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSessionError(
            deserializer);
    return inner;
  }

  @protected
  UrlParseError
      sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUrlParseError(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUrlParseError(
            deserializer);
    return inner;
  }

  @protected
  DartReceiverPersister
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartReceiverPersister(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DartReceiverPersisterImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DartSenderPersister
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartSenderPersister(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DartSenderPersisterImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FfiJsonReply
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiJsonReply(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FfiJsonReplyImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FfiReceiver
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiReceiver(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FfiReceiverImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FfiSender
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiSender(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FfiSenderImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ImplementationError
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerImplementationError(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ImplementationErrorImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ReceiverToken
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReceiverToken(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ReceiverTokenImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SenderToken
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSenderToken(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SenderTokenImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DartReceiverPersister
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartReceiverPersister(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DartReceiverPersisterImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DartSenderPersister
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartSenderPersister(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DartSenderPersisterImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FfiReceiver
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiReceiver(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FfiReceiverImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FfiSender
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiSender(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FfiSenderImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Object sse_decode_DartOpaque(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_usize(deserializer);
    return decodeDartOpaque(inner, generalizedFrbRustBinding);
  }

  @protected
  Script sse_decode_RustOpaque_bitcoin_ffiScript(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ScriptImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DartReceiverPersister
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartReceiverPersister(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DartReceiverPersisterImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DartSenderPersister
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartSenderPersister(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DartSenderPersisterImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Error
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerError(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ErrorImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FfiJsonReply
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiJsonReply(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FfiJsonReplyImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FfiReceiver
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiReceiver(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FfiReceiverImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FfiSender
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiSender(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FfiSenderImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ImplementationError
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerImplementationError(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ImplementationErrorImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  InputContributionError
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInputContributionError(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return InputContributionErrorImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  IntoUrlError
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIntoUrlError(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return IntoUrlErrorImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  IoError
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIoError(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return IoErrorImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OhttpError
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOhttpError(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OhttpErrorImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OutputSubstitutionError
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOutputSubstitutionError(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OutputSubstitutionErrorImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  PjNotSupported
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPjNotSupported(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PjNotSupportedImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  PjParseError
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPjParseError(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PjParseErrorImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  PsbtInputError
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPsbtInputError(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PsbtInputErrorImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ReceiverToken
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReceiverToken(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ReceiverTokenImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ReplyableError
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReplyableError(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ReplyableErrorImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ResponseError
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerResponseError(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ResponseErrorImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SelectionError
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSelectionError(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SelectionErrorImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SenderToken
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSenderToken(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SenderTokenImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SerdeJsonError
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSerdeJsonError(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SerdeJsonErrorImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SessionError
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSessionError(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SessionErrorImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  UrlParseError
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUrlParseError(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return UrlParseErrorImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OhttpKeys sse_decode_RustOpaque_payjoin_ffiOhttpKeys(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OhttpKeysImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Url sse_decode_RustOpaque_payjoin_ffiUrl(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return UrlImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  InputPair sse_decode_RustOpaque_payjoin_ffireceiveInputPair(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return InputPairImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  MaybeInputsOwned sse_decode_RustOpaque_payjoin_ffireceiveMaybeInputsOwned(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MaybeInputsOwnedImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  MaybeInputsSeen sse_decode_RustOpaque_payjoin_ffireceiveMaybeInputsSeen(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MaybeInputsSeenImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NewReceiver sse_decode_RustOpaque_payjoin_ffireceiveNewReceiver(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NewReceiverImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OutputsUnknown sse_decode_RustOpaque_payjoin_ffireceiveOutputsUnknown(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OutputsUnknownImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  PayjoinProposal sse_decode_RustOpaque_payjoin_ffireceivePayjoinProposal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PayjoinProposalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ProvisionalProposal
      sse_decode_RustOpaque_payjoin_ffireceiveProvisionalProposal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ProvisionalProposalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  UncheckedProposal sse_decode_RustOpaque_payjoin_ffireceiveUncheckedProposal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return UncheckedProposalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WantsInputs sse_decode_RustOpaque_payjoin_ffireceiveWantsInputs(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WantsInputsImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  WantsOutputs sse_decode_RustOpaque_payjoin_ffireceiveWantsOutputs(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WantsOutputsImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NewSender sse_decode_RustOpaque_payjoin_ffisendNewSender(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NewSenderImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SenderBuilder sse_decode_RustOpaque_payjoin_ffisendSenderBuilder(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SenderBuilderImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  V1Context sse_decode_RustOpaque_payjoin_ffisendV1Context(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return V1ContextImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  V2GetContext sse_decode_RustOpaque_payjoin_ffisendV2GetContext(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return V2GetContextImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  V2PostContext sse_decode_RustOpaque_payjoin_ffisendV2PostContext(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return V2PostContextImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  PjUri sse_decode_RustOpaque_payjoin_ffiuriPjUri(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PjUriImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Uri sse_decode_RustOpaque_payjoin_ffiuriUri(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return UriImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  MutexOptionClientResponse
      sse_decode_RustOpaque_stdsyncMutexcoreoptionOptionpayjoin_ffiClientResponse(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MutexOptionClientResponseImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  ClientResponse sse_decode_box_autoadd_client_response(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_client_response(deserializer));
  }

  @protected
  FfiMaybeInputsOwned sse_decode_box_autoadd_ffi_maybe_inputs_owned(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ffi_maybe_inputs_owned(deserializer));
  }

  @protected
  FfiMaybeInputsSeen sse_decode_box_autoadd_ffi_maybe_inputs_seen(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ffi_maybe_inputs_seen(deserializer));
  }

  @protected
  FfiNewReceiver sse_decode_box_autoadd_ffi_new_receiver(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ffi_new_receiver(deserializer));
  }

  @protected
  FfiNewSender sse_decode_box_autoadd_ffi_new_sender(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ffi_new_sender(deserializer));
  }

  @protected
  FfiOhttpKeys sse_decode_box_autoadd_ffi_ohttp_keys(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ffi_ohttp_keys(deserializer));
  }

  @protected
  FfiOutputsUnknown sse_decode_box_autoadd_ffi_outputs_unknown(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ffi_outputs_unknown(deserializer));
  }

  @protected
  FfiPayjoinProposal sse_decode_box_autoadd_ffi_payjoin_proposal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ffi_payjoin_proposal(deserializer));
  }

  @protected
  FfiPjUri sse_decode_box_autoadd_ffi_pj_uri(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ffi_pj_uri(deserializer));
  }

  @protected
  FfiProvisionalProposal sse_decode_box_autoadd_ffi_provisional_proposal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ffi_provisional_proposal(deserializer));
  }

  @protected
  FfiScript sse_decode_box_autoadd_ffi_script(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ffi_script(deserializer));
  }

  @protected
  FfiSenderBuilder sse_decode_box_autoadd_ffi_sender_builder(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ffi_sender_builder(deserializer));
  }

  @protected
  FfiUncheckedProposal sse_decode_box_autoadd_ffi_unchecked_proposal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ffi_unchecked_proposal(deserializer));
  }

  @protected
  FfiUri sse_decode_box_autoadd_ffi_uri(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ffi_uri(deserializer));
  }

  @protected
  FfiUrl sse_decode_box_autoadd_ffi_url(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ffi_url(deserializer));
  }

  @protected
  FfiV1Context sse_decode_box_autoadd_ffi_v_1_context(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ffi_v_1_context(deserializer));
  }

  @protected
  FfiV2GetContext sse_decode_box_autoadd_ffi_v_2_get_context(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ffi_v_2_get_context(deserializer));
  }

  @protected
  FfiV2PostContext sse_decode_box_autoadd_ffi_v_2_post_context(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ffi_v_2_post_context(deserializer));
  }

  @protected
  FfiWantsInputs sse_decode_box_autoadd_ffi_wants_inputs(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ffi_wants_inputs(deserializer));
  }

  @protected
  FfiWantsOutputs sse_decode_box_autoadd_ffi_wants_outputs(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ffi_wants_outputs(deserializer));
  }

  @protected
  PsbtInput sse_decode_box_autoadd_psbt_input(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_psbt_input(deserializer));
  }

  @protected
  TxIn sse_decode_box_autoadd_tx_in(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_tx_in(deserializer));
  }

  @protected
  TxOut sse_decode_box_autoadd_tx_out(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_tx_out(deserializer));
  }

  @protected
  BigInt sse_decode_box_autoadd_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_64(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_8(deserializer));
  }

  @protected
  ClientResponse sse_decode_client_response(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_RustOpaque_stdsyncMutexcoreoptionOptionpayjoin_ffiClientResponse(
            deserializer);
    return ClientResponse(field0: var_field0);
  }

  @protected
  FfiBuildSenderError sse_decode_ffi_build_sender_error(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_msg = sse_decode_String(deserializer);
    return FfiBuildSenderError(msg: var_msg);
  }

  @protected
  FfiCreateRequestError sse_decode_ffi_create_request_error(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_msg = sse_decode_String(deserializer);
    return FfiCreateRequestError(msg: var_msg);
  }

  @protected
  FfiEncapsulationError sse_decode_ffi_encapsulation_error(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_msg = sse_decode_String(deserializer);
    return FfiEncapsulationError(msg: var_msg);
  }

  @protected
  FfiError sse_decode_ffi_error(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerError(
            deserializer);
    return FfiError(field0: var_field0);
  }

  @protected
  FfiImplementationError sse_decode_ffi_implementation_error(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerImplementationError(
            deserializer);
    return FfiImplementationError(field0: var_field0);
  }

  @protected
  FfiInputContributionError sse_decode_ffi_input_contribution_error(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInputContributionError(
            deserializer);
    return FfiInputContributionError(field0: var_field0);
  }

  @protected
  FfiInputPair sse_decode_ffi_input_pair(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_RustOpaque_payjoin_ffireceiveInputPair(deserializer);
    return FfiInputPair(field0: var_field0);
  }

  @protected
  FfiIntoUrlError sse_decode_ffi_into_url_error(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIntoUrlError(
            deserializer);
    return FfiIntoUrlError(field0: var_field0);
  }

  @protected
  FfiIoError sse_decode_ffi_io_error(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIoError(
            deserializer);
    return FfiIoError(field0: var_field0);
  }

  @protected
  FfiMaybeInputsOwned sse_decode_ffi_maybe_inputs_owned(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_RustOpaque_payjoin_ffireceiveMaybeInputsOwned(deserializer);
    return FfiMaybeInputsOwned(field0: var_field0);
  }

  @protected
  FfiMaybeInputsSeen sse_decode_ffi_maybe_inputs_seen(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_RustOpaque_payjoin_ffireceiveMaybeInputsSeen(deserializer);
    return FfiMaybeInputsSeen(field0: var_field0);
  }

  @protected
  FfiNewReceiver sse_decode_ffi_new_receiver(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_RustOpaque_payjoin_ffireceiveNewReceiver(deserializer);
    return FfiNewReceiver(field0: var_field0);
  }

  @protected
  FfiNewSender sse_decode_ffi_new_sender(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_RustOpaque_payjoin_ffisendNewSender(deserializer);
    return FfiNewSender(field0: var_field0);
  }

  @protected
  FfiOhttpError sse_decode_ffi_ohttp_error(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOhttpError(
            deserializer);
    return FfiOhttpError(field0: var_field0);
  }

  @protected
  FfiOhttpKeys sse_decode_ffi_ohttp_keys(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_RustOpaque_payjoin_ffiOhttpKeys(deserializer);
    return FfiOhttpKeys(field0: var_field0);
  }

  @protected
  FfiOutputSubstitutionError sse_decode_ffi_output_substitution_error(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOutputSubstitutionError(
            deserializer);
    return FfiOutputSubstitutionError(field0: var_field0);
  }

  @protected
  FfiOutputsUnknown sse_decode_ffi_outputs_unknown(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_RustOpaque_payjoin_ffireceiveOutputsUnknown(deserializer);
    return FfiOutputsUnknown(field0: var_field0);
  }

  @protected
  FfiPayjoinProposal sse_decode_ffi_payjoin_proposal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_RustOpaque_payjoin_ffireceivePayjoinProposal(deserializer);
    return FfiPayjoinProposal(field0: var_field0);
  }

  @protected
  FfiPjNotSupported sse_decode_ffi_pj_not_supported(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPjNotSupported(
            deserializer);
    return FfiPjNotSupported(field0: var_field0);
  }

  @protected
  FfiPjParseError sse_decode_ffi_pj_parse_error(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPjParseError(
            deserializer);
    return FfiPjParseError(field0: var_field0);
  }

  @protected
  FfiPjUri sse_decode_ffi_pj_uri(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_RustOpaque_payjoin_ffiuriPjUri(deserializer);
    return FfiPjUri(field0: var_field0);
  }

  @protected
  FfiProvisionalProposal sse_decode_ffi_provisional_proposal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_RustOpaque_payjoin_ffireceiveProvisionalProposal(
            deserializer);
    return FfiProvisionalProposal(field0: var_field0);
  }

  @protected
  FfiPsbtInputError sse_decode_ffi_psbt_input_error(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPsbtInputError(
            deserializer);
    return FfiPsbtInputError(field0: var_field0);
  }

  @protected
  FfiReplyableError sse_decode_ffi_replyable_error(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReplyableError(
            deserializer);
    return FfiReplyableError(field0: var_field0);
  }

  @protected
  FfiResponseError sse_decode_ffi_response_error(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerResponseError(
            deserializer);
    return FfiResponseError(field0: var_field0);
  }

  @protected
  FfiScript sse_decode_ffi_script(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_RustOpaque_bitcoin_ffiScript(deserializer);
    return FfiScript(field0: var_field0);
  }

  @protected
  FfiSelectionError sse_decode_ffi_selection_error(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSelectionError(
            deserializer);
    return FfiSelectionError(field0: var_field0);
  }

  @protected
  FfiSenderBuilder sse_decode_ffi_sender_builder(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_RustOpaque_payjoin_ffisendSenderBuilder(deserializer);
    return FfiSenderBuilder(field0: var_field0);
  }

  @protected
  FfiSerdeJsonError sse_decode_ffi_serde_json_error(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSerdeJsonError(
            deserializer);
    return FfiSerdeJsonError(field0: var_field0);
  }

  @protected
  FfiSessionError sse_decode_ffi_session_error(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSessionError(
            deserializer);
    return FfiSessionError(field0: var_field0);
  }

  @protected
  FfiUncheckedProposal sse_decode_ffi_unchecked_proposal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_RustOpaque_payjoin_ffireceiveUncheckedProposal(deserializer);
    return FfiUncheckedProposal(field0: var_field0);
  }

  @protected
  FfiUri sse_decode_ffi_uri(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_RustOpaque_payjoin_ffiuriUri(deserializer);
    return FfiUri(field0: var_field0);
  }

  @protected
  FfiUrl sse_decode_ffi_url(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_RustOpaque_payjoin_ffiUrl(deserializer);
    return FfiUrl(field0: var_field0);
  }

  @protected
  FfiUrlParseError sse_decode_ffi_url_parse_error(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUrlParseError(
            deserializer);
    return FfiUrlParseError(field0: var_field0);
  }

  @protected
  FfiV1Context sse_decode_ffi_v_1_context(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_RustOpaque_payjoin_ffisendV1Context(deserializer);
    return FfiV1Context(field0: var_field0);
  }

  @protected
  FfiV2GetContext sse_decode_ffi_v_2_get_context(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_RustOpaque_payjoin_ffisendV2GetContext(deserializer);
    return FfiV2GetContext(field0: var_field0);
  }

  @protected
  FfiV2PostContext sse_decode_ffi_v_2_post_context(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_RustOpaque_payjoin_ffisendV2PostContext(deserializer);
    return FfiV2PostContext(field0: var_field0);
  }

  @protected
  FfiWantsInputs sse_decode_ffi_wants_inputs(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_RustOpaque_payjoin_ffireceiveWantsInputs(deserializer);
    return FfiWantsInputs(field0: var_field0);
  }

  @protected
  FfiWantsOutputs sse_decode_ffi_wants_outputs(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_RustOpaque_payjoin_ffireceiveWantsOutputs(deserializer);
    return FfiWantsOutputs(field0: var_field0);
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  List<FfiInputPair> sse_decode_list_ffi_input_pair(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <FfiInputPair>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_ffi_input_pair(deserializer));
    }
    return ans_;
  }

  @protected
  List<Uint8List> sse_decode_list_list_prim_u_8_strict(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Uint8List>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_list_prim_u_8_strict(deserializer));
    }
    return ans_;
  }

  @protected
  List<OutPoint> sse_decode_list_out_point(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <OutPoint>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_out_point(deserializer));
    }
    return ans_;
  }

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<TxOut> sse_decode_list_tx_out(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <TxOut>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_tx_out(deserializer));
    }
    return ans_;
  }

  @protected
  Network sse_decode_network(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return Network.values[inner];
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  FfiScript? sse_decode_opt_box_autoadd_ffi_script(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_ffi_script(deserializer));
    } else {
      return null;
    }
  }

  @protected
  FfiUncheckedProposal? sse_decode_opt_box_autoadd_ffi_unchecked_proposal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_ffi_unchecked_proposal(deserializer));
    } else {
      return null;
    }
  }

  @protected
  TxOut? sse_decode_opt_box_autoadd_tx_out(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_tx_out(deserializer));
    } else {
      return null;
    }
  }

  @protected
  BigInt? sse_decode_opt_box_autoadd_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_8(deserializer));
    } else {
      return null;
    }
  }

  @protected
  OutPoint sse_decode_out_point(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_txid = sse_decode_String(deserializer);
    var var_vout = sse_decode_u_32(deserializer);
    return OutPoint(txid: var_txid, vout: var_vout);
  }

  @protected
  PsbtInput sse_decode_psbt_input(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_witnessUtxo = sse_decode_opt_box_autoadd_tx_out(deserializer);
    var var_redeemScript = sse_decode_opt_box_autoadd_ffi_script(deserializer);
    var var_witnessScript = sse_decode_opt_box_autoadd_ffi_script(deserializer);
    return PsbtInput(
        witnessUtxo: var_witnessUtxo,
        redeemScript: var_redeemScript,
        witnessScript: var_witnessScript);
  }

  @protected
  (Request, ClientResponse) sse_decode_record_request_client_response(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_request(deserializer);
    var var_field1 = sse_decode_client_response(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (Request, FfiV1Context) sse_decode_record_request_ffi_v_1_context(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_request(deserializer);
    var var_field1 = sse_decode_ffi_v_1_context(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (Request, FfiV2PostContext) sse_decode_record_request_ffi_v_2_post_context(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_request(deserializer);
    var var_field1 = sse_decode_ffi_v_2_post_context(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  Request sse_decode_request(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_url = sse_decode_ffi_url(deserializer);
    var var_contentType = sse_decode_String(deserializer);
    var var_body = sse_decode_list_prim_u_8_strict(deserializer);
    return Request(url: var_url, contentType: var_contentType, body: var_body);
  }

  @protected
  TxIn sse_decode_tx_in(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_previousOutput = sse_decode_out_point(deserializer);
    var var_scriptSig = sse_decode_ffi_script(deserializer);
    var var_sequence = sse_decode_u_32(deserializer);
    var var_witness = sse_decode_list_list_prim_u_8_strict(deserializer);
    return TxIn(
        previousOutput: var_previousOutput,
        scriptSig: var_scriptSig,
        sequence: var_sequence,
        witness: var_witness);
  }

  @protected
  TxOut sse_decode_tx_out(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_value = sse_decode_u_64(deserializer);
    var var_scriptPubkey = sse_decode_list_prim_u_8_strict(deserializer);
    return TxOut(value: var_value, scriptPubkey: var_scriptPubkey);
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartReceiverPersister(
      DartReceiverPersister raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as DartReceiverPersisterImpl).frbInternalCstEncode(move: true);
  }

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartSenderPersister(
      DartSenderPersister raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as DartSenderPersisterImpl).frbInternalCstEncode(move: true);
  }

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiJsonReply(
      FfiJsonReply raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as FfiJsonReplyImpl).frbInternalCstEncode(move: true);
  }

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiReceiver(
      FfiReceiver raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as FfiReceiverImpl).frbInternalCstEncode(move: true);
  }

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiSender(
      FfiSender raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as FfiSenderImpl).frbInternalCstEncode(move: true);
  }

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerImplementationError(
      ImplementationError raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as ImplementationErrorImpl).frbInternalCstEncode(move: true);
  }

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReceiverToken(
      ReceiverToken raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as ReceiverTokenImpl).frbInternalCstEncode(move: true);
  }

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSenderToken(
      SenderToken raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as SenderTokenImpl).frbInternalCstEncode(move: true);
  }

  @protected
  int cst_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartReceiverPersister(
      DartReceiverPersister raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as DartReceiverPersisterImpl).frbInternalCstEncode(move: false);
  }

  @protected
  int cst_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartSenderPersister(
      DartSenderPersister raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as DartSenderPersisterImpl).frbInternalCstEncode(move: false);
  }

  @protected
  int cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiReceiver(
      FfiReceiver raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as FfiReceiverImpl).frbInternalCstEncode(move: false);
  }

  @protected
  int cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiSender(
      FfiSender raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as FfiSenderImpl).frbInternalCstEncode(move: false);
  }

  @protected
  PlatformPointer
      cst_encode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiReceiver_Output_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReceiverToken_AnyhowException(
          FutureOr<ReceiverToken> Function(FfiReceiver) raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_DartOpaque(
        encode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiReceiver_Output_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReceiverToken_AnyhowException(
            raw));
  }

  @protected
  PlatformPointer
      cst_encode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiSender_Output_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSenderToken_AnyhowException(
          FutureOr<SenderToken> Function(FfiSender) raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_DartOpaque(
        encode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiSender_Output_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSenderToken_AnyhowException(
            raw));
  }

  @protected
  PlatformPointer
      cst_encode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReceiverToken_Output_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiReceiver_AnyhowException(
          FutureOr<FfiReceiver> Function(ReceiverToken) raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_DartOpaque(
        encode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReceiverToken_Output_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiReceiver_AnyhowException(
            raw));
  }

  @protected
  PlatformPointer
      cst_encode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSenderToken_Output_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiSender_AnyhowException(
          FutureOr<FfiSender> Function(SenderToken) raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_DartOpaque(
        encode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSenderToken_Output_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiSender_AnyhowException(
            raw));
  }

  @protected
  PlatformPointer cst_encode_DartFn_Inputs_String_Output_String_AnyhowException(
      FutureOr<String> Function(String) raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_DartOpaque(
        encode_DartFn_Inputs_String_Output_String_AnyhowException(raw));
  }

  @protected
  PlatformPointer
      cst_encode_DartFn_Inputs_list_prim_u_8_strict_Output_bool_AnyhowException(
          FutureOr<bool> Function(Uint8List) raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_DartOpaque(
        encode_DartFn_Inputs_list_prim_u_8_strict_Output_bool_AnyhowException(
            raw));
  }

  @protected
  PlatformPointer
      cst_encode_DartFn_Inputs_out_point_Output_bool_AnyhowException(
          FutureOr<bool> Function(OutPoint) raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_DartOpaque(
        encode_DartFn_Inputs_out_point_Output_bool_AnyhowException(raw));
  }

  @protected
  PlatformPointer cst_encode_DartOpaque(Object raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return encodeDartOpaque(
        raw, portManager.dartHandlerPort, generalizedFrbRustBinding);
  }

  @protected
  int cst_encode_RustOpaque_bitcoin_ffiScript(Script raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as ScriptImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartReceiverPersister(
      DartReceiverPersister raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as DartReceiverPersisterImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartSenderPersister(
      DartSenderPersister raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as DartSenderPersisterImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerError(
      Error raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as ErrorImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiJsonReply(
      FfiJsonReply raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as FfiJsonReplyImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiReceiver(
      FfiReceiver raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as FfiReceiverImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiSender(
      FfiSender raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as FfiSenderImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerImplementationError(
      ImplementationError raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as ImplementationErrorImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInputContributionError(
      InputContributionError raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as InputContributionErrorImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIntoUrlError(
      IntoUrlError raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as IntoUrlErrorImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIoError(
      IoError raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as IoErrorImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOhttpError(
      OhttpError raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as OhttpErrorImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOutputSubstitutionError(
      OutputSubstitutionError raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as OutputSubstitutionErrorImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPjNotSupported(
      PjNotSupported raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as PjNotSupportedImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPjParseError(
      PjParseError raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as PjParseErrorImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPsbtInputError(
      PsbtInputError raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as PsbtInputErrorImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReceiverToken(
      ReceiverToken raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as ReceiverTokenImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReplyableError(
      ReplyableError raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as ReplyableErrorImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerResponseError(
      ResponseError raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as ResponseErrorImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSelectionError(
      SelectionError raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as SelectionErrorImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSenderToken(
      SenderToken raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as SenderTokenImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSerdeJsonError(
      SerdeJsonError raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as SerdeJsonErrorImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSessionError(
      SessionError raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as SessionErrorImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUrlParseError(
      UrlParseError raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as UrlParseErrorImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_payjoin_ffiOhttpKeys(OhttpKeys raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as OhttpKeysImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_payjoin_ffiUrl(Url raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as UrlImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_payjoin_ffireceiveInputPair(InputPair raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as InputPairImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_payjoin_ffireceiveMaybeInputsOwned(
      MaybeInputsOwned raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as MaybeInputsOwnedImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_payjoin_ffireceiveMaybeInputsSeen(
      MaybeInputsSeen raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as MaybeInputsSeenImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_payjoin_ffireceiveNewReceiver(NewReceiver raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as NewReceiverImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_payjoin_ffireceiveOutputsUnknown(
      OutputsUnknown raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as OutputsUnknownImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_payjoin_ffireceivePayjoinProposal(
      PayjoinProposal raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as PayjoinProposalImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_payjoin_ffireceiveProvisionalProposal(
      ProvisionalProposal raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as ProvisionalProposalImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_payjoin_ffireceiveUncheckedProposal(
      UncheckedProposal raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as UncheckedProposalImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_payjoin_ffireceiveWantsInputs(WantsInputs raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as WantsInputsImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_payjoin_ffireceiveWantsOutputs(WantsOutputs raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as WantsOutputsImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_payjoin_ffisendNewSender(NewSender raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as NewSenderImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_payjoin_ffisendSenderBuilder(SenderBuilder raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as SenderBuilderImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_payjoin_ffisendV1Context(V1Context raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as V1ContextImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_payjoin_ffisendV2GetContext(V2GetContext raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as V2GetContextImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_payjoin_ffisendV2PostContext(V2PostContext raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as V2PostContextImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_payjoin_ffiuriPjUri(PjUri raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as PjUriImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_payjoin_ffiuriUri(Uri raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as UriImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_stdsyncMutexcoreoptionOptionpayjoin_ffiClientResponse(
      MutexOptionClientResponse raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as MutexOptionClientResponseImpl).frbInternalCstEncode();
  }

  @protected
  bool cst_encode_bool(bool raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  int cst_encode_i_32(int raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  int cst_encode_network(Network raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_i_32(raw.index);
  }

  @protected
  int cst_encode_u_32(int raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  int cst_encode_u_8(int raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  void cst_encode_unit(void raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void
      sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerError(
          Error self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerError(
        self, serializer);
  }

  @protected
  void
      sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerImplementationError(
          ImplementationError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerImplementationError(
        self, serializer);
  }

  @protected
  void
      sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInputContributionError(
          InputContributionError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInputContributionError(
        self, serializer);
  }

  @protected
  void
      sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIntoUrlError(
          IntoUrlError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIntoUrlError(
        self, serializer);
  }

  @protected
  void
      sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIoError(
          IoError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIoError(
        self, serializer);
  }

  @protected
  void
      sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOhttpError(
          OhttpError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOhttpError(
        self, serializer);
  }

  @protected
  void
      sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOutputSubstitutionError(
          OutputSubstitutionError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOutputSubstitutionError(
        self, serializer);
  }

  @protected
  void
      sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPjNotSupported(
          PjNotSupported self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPjNotSupported(
        self, serializer);
  }

  @protected
  void
      sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPjParseError(
          PjParseError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPjParseError(
        self, serializer);
  }

  @protected
  void
      sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPsbtInputError(
          PsbtInputError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPsbtInputError(
        self, serializer);
  }

  @protected
  void
      sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReplyableError(
          ReplyableError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReplyableError(
        self, serializer);
  }

  @protected
  void
      sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerResponseError(
          ResponseError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerResponseError(
        self, serializer);
  }

  @protected
  void
      sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSelectionError(
          SelectionError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSelectionError(
        self, serializer);
  }

  @protected
  void
      sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSerdeJsonError(
          SerdeJsonError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSerdeJsonError(
        self, serializer);
  }

  @protected
  void
      sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSessionError(
          SessionError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSessionError(
        self, serializer);
  }

  @protected
  void
      sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUrlParseError(
          UrlParseError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUrlParseError(
        self, serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartReceiverPersister(
          DartReceiverPersister self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as DartReceiverPersisterImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartSenderPersister(
          DartSenderPersister self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as DartSenderPersisterImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiJsonReply(
          FfiJsonReply self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FfiJsonReplyImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiReceiver(
          FfiReceiver self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FfiReceiverImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiSender(
          FfiSender self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FfiSenderImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerImplementationError(
          ImplementationError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ImplementationErrorImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReceiverToken(
          ReceiverToken self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ReceiverTokenImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSenderToken(
          SenderToken self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SenderTokenImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartReceiverPersister(
          DartReceiverPersister self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as DartReceiverPersisterImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartSenderPersister(
          DartSenderPersister self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as DartSenderPersisterImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiReceiver(
          FfiReceiver self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FfiReceiverImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiSender(
          FfiSender self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FfiSenderImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiReceiver_Output_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReceiverToken_AnyhowException(
          FutureOr<ReceiverToken> Function(FfiReceiver) self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiReceiver_Output_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReceiverToken_AnyhowException(
            self),
        serializer);
  }

  @protected
  void
      sse_encode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiSender_Output_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSenderToken_AnyhowException(
          FutureOr<SenderToken> Function(FfiSender) self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiSender_Output_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSenderToken_AnyhowException(
            self),
        serializer);
  }

  @protected
  void
      sse_encode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReceiverToken_Output_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiReceiver_AnyhowException(
          FutureOr<FfiReceiver> Function(ReceiverToken) self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReceiverToken_Output_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiReceiver_AnyhowException(
            self),
        serializer);
  }

  @protected
  void
      sse_encode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSenderToken_Output_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiSender_AnyhowException(
          FutureOr<FfiSender> Function(SenderToken) self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSenderToken_Output_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiSender_AnyhowException(
            self),
        serializer);
  }

  @protected
  void sse_encode_DartFn_Inputs_String_Output_String_AnyhowException(
      FutureOr<String> Function(String) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs_String_Output_String_AnyhowException(self),
        serializer);
  }

  @protected
  void
      sse_encode_DartFn_Inputs_list_prim_u_8_strict_Output_bool_AnyhowException(
          FutureOr<bool> Function(Uint8List) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs_list_prim_u_8_strict_Output_bool_AnyhowException(
            self),
        serializer);
  }

  @protected
  void sse_encode_DartFn_Inputs_out_point_Output_bool_AnyhowException(
      FutureOr<bool> Function(OutPoint) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs_out_point_Output_bool_AnyhowException(self),
        serializer);
  }

  @protected
  void sse_encode_DartOpaque(Object self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        BigInt.from(PlatformPointerUtil.ptrToInt(encodeDartOpaque(
                self, portManager.dartHandlerPort, generalizedFrbRustBinding)))
            .toUnsigned(64),
        serializer);
  }

  @protected
  void sse_encode_RustOpaque_bitcoin_ffiScript(
      Script self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ScriptImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartReceiverPersister(
          DartReceiverPersister self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as DartReceiverPersisterImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDartSenderPersister(
          DartSenderPersister self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as DartSenderPersisterImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerError(
          Error self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ErrorImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiJsonReply(
          FfiJsonReply self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FfiJsonReplyImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiReceiver(
          FfiReceiver self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FfiReceiverImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFfiSender(
          FfiSender self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FfiSenderImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerImplementationError(
          ImplementationError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ImplementationErrorImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInputContributionError(
          InputContributionError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as InputContributionErrorImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIntoUrlError(
          IntoUrlError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as IntoUrlErrorImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIoError(
          IoError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as IoErrorImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOhttpError(
          OhttpError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as OhttpErrorImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOutputSubstitutionError(
          OutputSubstitutionError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as OutputSubstitutionErrorImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPjNotSupported(
          PjNotSupported self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as PjNotSupportedImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPjParseError(
          PjParseError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as PjParseErrorImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPsbtInputError(
          PsbtInputError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as PsbtInputErrorImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReceiverToken(
          ReceiverToken self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ReceiverTokenImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReplyableError(
          ReplyableError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ReplyableErrorImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerResponseError(
          ResponseError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ResponseErrorImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSelectionError(
          SelectionError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SelectionErrorImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSenderToken(
          SenderToken self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SenderTokenImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSerdeJsonError(
          SerdeJsonError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SerdeJsonErrorImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSessionError(
          SessionError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SessionErrorImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUrlParseError(
          UrlParseError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as UrlParseErrorImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_RustOpaque_payjoin_ffiOhttpKeys(
      OhttpKeys self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as OhttpKeysImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_payjoin_ffiUrl(
      Url self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as UrlImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_payjoin_ffireceiveInputPair(
      InputPair self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as InputPairImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_payjoin_ffireceiveMaybeInputsOwned(
      MaybeInputsOwned self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as MaybeInputsOwnedImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_RustOpaque_payjoin_ffireceiveMaybeInputsSeen(
      MaybeInputsSeen self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as MaybeInputsSeenImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_RustOpaque_payjoin_ffireceiveNewReceiver(
      NewReceiver self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as NewReceiverImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_payjoin_ffireceiveOutputsUnknown(
      OutputsUnknown self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as OutputsUnknownImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_RustOpaque_payjoin_ffireceivePayjoinProposal(
      PayjoinProposal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as PayjoinProposalImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_RustOpaque_payjoin_ffireceiveProvisionalProposal(
      ProvisionalProposal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ProvisionalProposalImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_RustOpaque_payjoin_ffireceiveUncheckedProposal(
      UncheckedProposal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as UncheckedProposalImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_RustOpaque_payjoin_ffireceiveWantsInputs(
      WantsInputs self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WantsInputsImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_payjoin_ffireceiveWantsOutputs(
      WantsOutputs self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WantsOutputsImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_RustOpaque_payjoin_ffisendNewSender(
      NewSender self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as NewSenderImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_payjoin_ffisendSenderBuilder(
      SenderBuilder self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SenderBuilderImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_RustOpaque_payjoin_ffisendV1Context(
      V1Context self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as V1ContextImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_payjoin_ffisendV2GetContext(
      V2GetContext self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as V2GetContextImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_RustOpaque_payjoin_ffisendV2PostContext(
      V2PostContext self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as V2PostContextImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_RustOpaque_payjoin_ffiuriPjUri(
      PjUri self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as PjUriImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_payjoin_ffiuriUri(
      Uri self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as UriImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_stdsyncMutexcoreoptionOptionpayjoin_ffiClientResponse(
          MutexOptionClientResponse self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as MutexOptionClientResponseImpl)
            .frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_client_response(
      ClientResponse self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_client_response(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ffi_maybe_inputs_owned(
      FfiMaybeInputsOwned self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ffi_maybe_inputs_owned(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ffi_maybe_inputs_seen(
      FfiMaybeInputsSeen self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ffi_maybe_inputs_seen(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ffi_new_receiver(
      FfiNewReceiver self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ffi_new_receiver(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ffi_new_sender(
      FfiNewSender self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ffi_new_sender(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ffi_ohttp_keys(
      FfiOhttpKeys self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ffi_ohttp_keys(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ffi_outputs_unknown(
      FfiOutputsUnknown self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ffi_outputs_unknown(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ffi_payjoin_proposal(
      FfiPayjoinProposal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ffi_payjoin_proposal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ffi_pj_uri(
      FfiPjUri self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ffi_pj_uri(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ffi_provisional_proposal(
      FfiProvisionalProposal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ffi_provisional_proposal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ffi_script(
      FfiScript self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ffi_script(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ffi_sender_builder(
      FfiSenderBuilder self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ffi_sender_builder(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ffi_unchecked_proposal(
      FfiUncheckedProposal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ffi_unchecked_proposal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ffi_uri(FfiUri self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ffi_uri(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ffi_url(FfiUrl self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ffi_url(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ffi_v_1_context(
      FfiV1Context self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ffi_v_1_context(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ffi_v_2_get_context(
      FfiV2GetContext self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ffi_v_2_get_context(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ffi_v_2_post_context(
      FfiV2PostContext self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ffi_v_2_post_context(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ffi_wants_inputs(
      FfiWantsInputs self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ffi_wants_inputs(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ffi_wants_outputs(
      FfiWantsOutputs self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ffi_wants_outputs(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_psbt_input(
      PsbtInput self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_psbt_input(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_tx_in(TxIn self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_tx_in(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_tx_out(TxOut self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_tx_out(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_8(self, serializer);
  }

  @protected
  void sse_encode_client_response(
      ClientResponse self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_stdsyncMutexcoreoptionOptionpayjoin_ffiClientResponse(
        self.field0, serializer);
  }

  @protected
  void sse_encode_ffi_build_sender_error(
      FfiBuildSenderError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.msg, serializer);
  }

  @protected
  void sse_encode_ffi_create_request_error(
      FfiCreateRequestError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.msg, serializer);
  }

  @protected
  void sse_encode_ffi_encapsulation_error(
      FfiEncapsulationError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.msg, serializer);
  }

  @protected
  void sse_encode_ffi_error(FfiError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerError(
        self.field0, serializer);
  }

  @protected
  void sse_encode_ffi_implementation_error(
      FfiImplementationError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerImplementationError(
        self.field0, serializer);
  }

  @protected
  void sse_encode_ffi_input_contribution_error(
      FfiInputContributionError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInputContributionError(
        self.field0, serializer);
  }

  @protected
  void sse_encode_ffi_input_pair(FfiInputPair self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_payjoin_ffireceiveInputPair(self.field0, serializer);
  }

  @protected
  void sse_encode_ffi_into_url_error(
      FfiIntoUrlError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIntoUrlError(
        self.field0, serializer);
  }

  @protected
  void sse_encode_ffi_io_error(FfiIoError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIoError(
        self.field0, serializer);
  }

  @protected
  void sse_encode_ffi_maybe_inputs_owned(
      FfiMaybeInputsOwned self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_payjoin_ffireceiveMaybeInputsOwned(
        self.field0, serializer);
  }

  @protected
  void sse_encode_ffi_maybe_inputs_seen(
      FfiMaybeInputsSeen self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_payjoin_ffireceiveMaybeInputsSeen(
        self.field0, serializer);
  }

  @protected
  void sse_encode_ffi_new_receiver(
      FfiNewReceiver self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_payjoin_ffireceiveNewReceiver(
        self.field0, serializer);
  }

  @protected
  void sse_encode_ffi_new_sender(FfiNewSender self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_payjoin_ffisendNewSender(self.field0, serializer);
  }

  @protected
  void sse_encode_ffi_ohttp_error(
      FfiOhttpError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOhttpError(
        self.field0, serializer);
  }

  @protected
  void sse_encode_ffi_ohttp_keys(FfiOhttpKeys self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_payjoin_ffiOhttpKeys(self.field0, serializer);
  }

  @protected
  void sse_encode_ffi_output_substitution_error(
      FfiOutputSubstitutionError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOutputSubstitutionError(
        self.field0, serializer);
  }

  @protected
  void sse_encode_ffi_outputs_unknown(
      FfiOutputsUnknown self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_payjoin_ffireceiveOutputsUnknown(
        self.field0, serializer);
  }

  @protected
  void sse_encode_ffi_payjoin_proposal(
      FfiPayjoinProposal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_payjoin_ffireceivePayjoinProposal(
        self.field0, serializer);
  }

  @protected
  void sse_encode_ffi_pj_not_supported(
      FfiPjNotSupported self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPjNotSupported(
        self.field0, serializer);
  }

  @protected
  void sse_encode_ffi_pj_parse_error(
      FfiPjParseError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPjParseError(
        self.field0, serializer);
  }

  @protected
  void sse_encode_ffi_pj_uri(FfiPjUri self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_payjoin_ffiuriPjUri(self.field0, serializer);
  }

  @protected
  void sse_encode_ffi_provisional_proposal(
      FfiProvisionalProposal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_payjoin_ffireceiveProvisionalProposal(
        self.field0, serializer);
  }

  @protected
  void sse_encode_ffi_psbt_input_error(
      FfiPsbtInputError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPsbtInputError(
        self.field0, serializer);
  }

  @protected
  void sse_encode_ffi_replyable_error(
      FfiReplyableError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReplyableError(
        self.field0, serializer);
  }

  @protected
  void sse_encode_ffi_response_error(
      FfiResponseError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerResponseError(
        self.field0, serializer);
  }

  @protected
  void sse_encode_ffi_script(FfiScript self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_bitcoin_ffiScript(self.field0, serializer);
  }

  @protected
  void sse_encode_ffi_selection_error(
      FfiSelectionError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSelectionError(
        self.field0, serializer);
  }

  @protected
  void sse_encode_ffi_sender_builder(
      FfiSenderBuilder self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_payjoin_ffisendSenderBuilder(self.field0, serializer);
  }

  @protected
  void sse_encode_ffi_serde_json_error(
      FfiSerdeJsonError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSerdeJsonError(
        self.field0, serializer);
  }

  @protected
  void sse_encode_ffi_session_error(
      FfiSessionError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSessionError(
        self.field0, serializer);
  }

  @protected
  void sse_encode_ffi_unchecked_proposal(
      FfiUncheckedProposal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_payjoin_ffireceiveUncheckedProposal(
        self.field0, serializer);
  }

  @protected
  void sse_encode_ffi_uri(FfiUri self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_payjoin_ffiuriUri(self.field0, serializer);
  }

  @protected
  void sse_encode_ffi_url(FfiUrl self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_payjoin_ffiUrl(self.field0, serializer);
  }

  @protected
  void sse_encode_ffi_url_parse_error(
      FfiUrlParseError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_AutoExplicit_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUrlParseError(
        self.field0, serializer);
  }

  @protected
  void sse_encode_ffi_v_1_context(FfiV1Context self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_payjoin_ffisendV1Context(self.field0, serializer);
  }

  @protected
  void sse_encode_ffi_v_2_get_context(
      FfiV2GetContext self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_payjoin_ffisendV2GetContext(self.field0, serializer);
  }

  @protected
  void sse_encode_ffi_v_2_post_context(
      FfiV2PostContext self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_payjoin_ffisendV2PostContext(self.field0, serializer);
  }

  @protected
  void sse_encode_ffi_wants_inputs(
      FfiWantsInputs self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_payjoin_ffireceiveWantsInputs(
        self.field0, serializer);
  }

  @protected
  void sse_encode_ffi_wants_outputs(
      FfiWantsOutputs self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_payjoin_ffireceiveWantsOutputs(
        self.field0, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_list_ffi_input_pair(
      List<FfiInputPair> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_ffi_input_pair(item, serializer);
    }
  }

  @protected
  void sse_encode_list_list_prim_u_8_strict(
      List<Uint8List> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_list_prim_u_8_strict(item, serializer);
    }
  }

  @protected
  void sse_encode_list_out_point(
      List<OutPoint> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_out_point(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_loose(
      List<int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer
        .putUint8List(self is Uint8List ? self : Uint8List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_tx_out(List<TxOut> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_tx_out(item, serializer);
    }
  }

  @protected
  void sse_encode_network(Network self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_ffi_script(
      FfiScript? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_ffi_script(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_ffi_unchecked_proposal(
      FfiUncheckedProposal? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_ffi_unchecked_proposal(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_tx_out(
      TxOut? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_tx_out(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_64(BigInt? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_64(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_8(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_8(self, serializer);
    }
  }

  @protected
  void sse_encode_out_point(OutPoint self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.txid, serializer);
    sse_encode_u_32(self.vout, serializer);
  }

  @protected
  void sse_encode_psbt_input(PsbtInput self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_box_autoadd_tx_out(self.witnessUtxo, serializer);
    sse_encode_opt_box_autoadd_ffi_script(self.redeemScript, serializer);
    sse_encode_opt_box_autoadd_ffi_script(self.witnessScript, serializer);
  }

  @protected
  void sse_encode_record_request_client_response(
      (Request, ClientResponse) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_request(self.$1, serializer);
    sse_encode_client_response(self.$2, serializer);
  }

  @protected
  void sse_encode_record_request_ffi_v_1_context(
      (Request, FfiV1Context) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_request(self.$1, serializer);
    sse_encode_ffi_v_1_context(self.$2, serializer);
  }

  @protected
  void sse_encode_record_request_ffi_v_2_post_context(
      (Request, FfiV2PostContext) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_request(self.$1, serializer);
    sse_encode_ffi_v_2_post_context(self.$2, serializer);
  }

  @protected
  void sse_encode_request(Request self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ffi_url(self.url, serializer);
    sse_encode_String(self.contentType, serializer);
    sse_encode_list_prim_u_8_strict(self.body, serializer);
  }

  @protected
  void sse_encode_tx_in(TxIn self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_out_point(self.previousOutput, serializer);
    sse_encode_ffi_script(self.scriptSig, serializer);
    sse_encode_u_32(self.sequence, serializer);
    sse_encode_list_list_prim_u_8_strict(self.witness, serializer);
  }

  @protected
  void sse_encode_tx_out(TxOut self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self.value, serializer);
    sse_encode_list_prim_u_8_strict(self.scriptPubkey, serializer);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }
}

@sealed
class DartReceiverPersisterImpl extends RustOpaque
    implements DartReceiverPersister {
  // Not to be used by end users
  DartReceiverPersisterImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  DartReceiverPersisterImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        core.instance.api.rust_arc_increment_strong_count_DartReceiverPersister,
    rustArcDecrementStrongCount:
        core.instance.api.rust_arc_decrement_strong_count_DartReceiverPersister,
    rustArcDecrementStrongCountPtr: core
        .instance.api.rust_arc_decrement_strong_count_DartReceiverPersisterPtr,
  );
}

@sealed
class DartSenderPersisterImpl extends RustOpaque
    implements DartSenderPersister {
  // Not to be used by end users
  DartSenderPersisterImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  DartSenderPersisterImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        core.instance.api.rust_arc_increment_strong_count_DartSenderPersister,
    rustArcDecrementStrongCount:
        core.instance.api.rust_arc_decrement_strong_count_DartSenderPersister,
    rustArcDecrementStrongCountPtr: core
        .instance.api.rust_arc_decrement_strong_count_DartSenderPersisterPtr,
  );
}

@sealed
class ErrorImpl extends RustOpaque implements Error {
  // Not to be used by end users
  ErrorImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ErrorImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        core.instance.api.rust_arc_increment_strong_count_Error,
    rustArcDecrementStrongCount:
        core.instance.api.rust_arc_decrement_strong_count_Error,
    rustArcDecrementStrongCountPtr:
        core.instance.api.rust_arc_decrement_strong_count_ErrorPtr,
  );
}

@sealed
class FfiJsonReplyImpl extends RustOpaque implements FfiJsonReply {
  // Not to be used by end users
  FfiJsonReplyImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  FfiJsonReplyImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        core.instance.api.rust_arc_increment_strong_count_FfiJsonReply,
    rustArcDecrementStrongCount:
        core.instance.api.rust_arc_decrement_strong_count_FfiJsonReply,
    rustArcDecrementStrongCountPtr:
        core.instance.api.rust_arc_decrement_strong_count_FfiJsonReplyPtr,
  );
}

@sealed
class FfiReceiverImpl extends RustOpaque implements FfiReceiver {
  // Not to be used by end users
  FfiReceiverImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  FfiReceiverImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        core.instance.api.rust_arc_increment_strong_count_FfiReceiver,
    rustArcDecrementStrongCount:
        core.instance.api.rust_arc_decrement_strong_count_FfiReceiver,
    rustArcDecrementStrongCountPtr:
        core.instance.api.rust_arc_decrement_strong_count_FfiReceiverPtr,
  );

  Future<(Request, ClientResponse)> extractReq({required String ohttpRelay}) =>
      core.instance.api.crateApiReceiveFfiReceiverExtractReq(
          that: this, ohttpRelay: ohttpRelay);

  ///The per-session public key to use as an identifier
  String id() => core.instance.api.crateApiReceiveFfiReceiverId(
        that: this,
      );

  Future<ReceiverToken> key() =>
      core.instance.api.crateApiReceiveFfiReceiverKey(
        that: this,
      );

  Future<FfiPjUri> pjUri() => core.instance.api.crateApiReceiveFfiReceiverPjUri(
        that: this,
      );

  Future<FfiUncheckedProposal?> processRes(
          {required List<int> body, required ClientResponse ctx}) =>
      core.instance.api.crateApiReceiveFfiReceiverProcessRes(
          that: this, body: body, ctx: ctx);

  String toJson() => core.instance.api.crateApiReceiveFfiReceiverToJson(
        that: this,
      );
}

@sealed
class FfiSenderImpl extends RustOpaque implements FfiSender {
  // Not to be used by end users
  FfiSenderImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  FfiSenderImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        core.instance.api.rust_arc_increment_strong_count_FfiSender,
    rustArcDecrementStrongCount:
        core.instance.api.rust_arc_decrement_strong_count_FfiSender,
    rustArcDecrementStrongCountPtr:
        core.instance.api.rust_arc_decrement_strong_count_FfiSenderPtr,
  );

  Future<(Request, FfiV1Context)> extractV1() =>
      core.instance.api.crateApiSendFfiSenderExtractV1(
        that: this,
      );

  Future<(Request, FfiV2PostContext)> extractV2(
          {required FfiUrl ohttpProxyUrl}) =>
      core.instance.api.crateApiSendFfiSenderExtractV2(
          that: this, ohttpProxyUrl: ohttpProxyUrl);

  Future<SenderToken> key() => core.instance.api.crateApiSendFfiSenderKey(
        that: this,
      );

  String toJson() => core.instance.api.crateApiSendFfiSenderToJson(
        that: this,
      );
}

@sealed
class ImplementationErrorImpl extends RustOpaque
    implements ImplementationError {
  // Not to be used by end users
  ImplementationErrorImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ImplementationErrorImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        core.instance.api.rust_arc_increment_strong_count_ImplementationError,
    rustArcDecrementStrongCount:
        core.instance.api.rust_arc_decrement_strong_count_ImplementationError,
    rustArcDecrementStrongCountPtr: core
        .instance.api.rust_arc_decrement_strong_count_ImplementationErrorPtr,
  );
}

@sealed
class InputContributionErrorImpl extends RustOpaque
    implements InputContributionError {
  // Not to be used by end users
  InputContributionErrorImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  InputContributionErrorImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: core
        .instance.api.rust_arc_increment_strong_count_InputContributionError,
    rustArcDecrementStrongCount: core
        .instance.api.rust_arc_decrement_strong_count_InputContributionError,
    rustArcDecrementStrongCountPtr: core
        .instance.api.rust_arc_decrement_strong_count_InputContributionErrorPtr,
  );
}

@sealed
class InputPairImpl extends RustOpaque implements InputPair {
  // Not to be used by end users
  InputPairImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  InputPairImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        core.instance.api.rust_arc_increment_strong_count_InputPair,
    rustArcDecrementStrongCount:
        core.instance.api.rust_arc_decrement_strong_count_InputPair,
    rustArcDecrementStrongCountPtr:
        core.instance.api.rust_arc_decrement_strong_count_InputPairPtr,
  );
}

@sealed
class IntoUrlErrorImpl extends RustOpaque implements IntoUrlError {
  // Not to be used by end users
  IntoUrlErrorImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  IntoUrlErrorImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        core.instance.api.rust_arc_increment_strong_count_IntoUrlError,
    rustArcDecrementStrongCount:
        core.instance.api.rust_arc_decrement_strong_count_IntoUrlError,
    rustArcDecrementStrongCountPtr:
        core.instance.api.rust_arc_decrement_strong_count_IntoUrlErrorPtr,
  );
}

@sealed
class IoErrorImpl extends RustOpaque implements IoError {
  // Not to be used by end users
  IoErrorImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  IoErrorImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        core.instance.api.rust_arc_increment_strong_count_IoError,
    rustArcDecrementStrongCount:
        core.instance.api.rust_arc_decrement_strong_count_IoError,
    rustArcDecrementStrongCountPtr:
        core.instance.api.rust_arc_decrement_strong_count_IoErrorPtr,
  );
}

@sealed
class MaybeInputsOwnedImpl extends RustOpaque implements MaybeInputsOwned {
  // Not to be used by end users
  MaybeInputsOwnedImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  MaybeInputsOwnedImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        core.instance.api.rust_arc_increment_strong_count_MaybeInputsOwned,
    rustArcDecrementStrongCount:
        core.instance.api.rust_arc_decrement_strong_count_MaybeInputsOwned,
    rustArcDecrementStrongCountPtr:
        core.instance.api.rust_arc_decrement_strong_count_MaybeInputsOwnedPtr,
  );
}

@sealed
class MaybeInputsSeenImpl extends RustOpaque implements MaybeInputsSeen {
  // Not to be used by end users
  MaybeInputsSeenImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  MaybeInputsSeenImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        core.instance.api.rust_arc_increment_strong_count_MaybeInputsSeen,
    rustArcDecrementStrongCount:
        core.instance.api.rust_arc_decrement_strong_count_MaybeInputsSeen,
    rustArcDecrementStrongCountPtr:
        core.instance.api.rust_arc_decrement_strong_count_MaybeInputsSeenPtr,
  );
}

@sealed
class MutexOptionClientResponseImpl extends RustOpaque
    implements MutexOptionClientResponse {
  // Not to be used by end users
  MutexOptionClientResponseImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  MutexOptionClientResponseImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: core
        .instance.api.rust_arc_increment_strong_count_MutexOptionClientResponse,
    rustArcDecrementStrongCount: core
        .instance.api.rust_arc_decrement_strong_count_MutexOptionClientResponse,
    rustArcDecrementStrongCountPtr: core.instance.api
        .rust_arc_decrement_strong_count_MutexOptionClientResponsePtr,
  );
}

@sealed
class NewReceiverImpl extends RustOpaque implements NewReceiver {
  // Not to be used by end users
  NewReceiverImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  NewReceiverImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        core.instance.api.rust_arc_increment_strong_count_NewReceiver,
    rustArcDecrementStrongCount:
        core.instance.api.rust_arc_decrement_strong_count_NewReceiver,
    rustArcDecrementStrongCountPtr:
        core.instance.api.rust_arc_decrement_strong_count_NewReceiverPtr,
  );
}

@sealed
class NewSenderImpl extends RustOpaque implements NewSender {
  // Not to be used by end users
  NewSenderImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  NewSenderImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        core.instance.api.rust_arc_increment_strong_count_NewSender,
    rustArcDecrementStrongCount:
        core.instance.api.rust_arc_decrement_strong_count_NewSender,
    rustArcDecrementStrongCountPtr:
        core.instance.api.rust_arc_decrement_strong_count_NewSenderPtr,
  );
}

@sealed
class OhttpErrorImpl extends RustOpaque implements OhttpError {
  // Not to be used by end users
  OhttpErrorImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  OhttpErrorImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        core.instance.api.rust_arc_increment_strong_count_OhttpError,
    rustArcDecrementStrongCount:
        core.instance.api.rust_arc_decrement_strong_count_OhttpError,
    rustArcDecrementStrongCountPtr:
        core.instance.api.rust_arc_decrement_strong_count_OhttpErrorPtr,
  );
}

@sealed
class OhttpKeysImpl extends RustOpaque implements OhttpKeys {
  // Not to be used by end users
  OhttpKeysImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  OhttpKeysImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        core.instance.api.rust_arc_increment_strong_count_OhttpKeys,
    rustArcDecrementStrongCount:
        core.instance.api.rust_arc_decrement_strong_count_OhttpKeys,
    rustArcDecrementStrongCountPtr:
        core.instance.api.rust_arc_decrement_strong_count_OhttpKeysPtr,
  );
}

@sealed
class OutputSubstitutionErrorImpl extends RustOpaque
    implements OutputSubstitutionError {
  // Not to be used by end users
  OutputSubstitutionErrorImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  OutputSubstitutionErrorImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: core
        .instance.api.rust_arc_increment_strong_count_OutputSubstitutionError,
    rustArcDecrementStrongCount: core
        .instance.api.rust_arc_decrement_strong_count_OutputSubstitutionError,
    rustArcDecrementStrongCountPtr: core.instance.api
        .rust_arc_decrement_strong_count_OutputSubstitutionErrorPtr,
  );
}

@sealed
class OutputsUnknownImpl extends RustOpaque implements OutputsUnknown {
  // Not to be used by end users
  OutputsUnknownImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  OutputsUnknownImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        core.instance.api.rust_arc_increment_strong_count_OutputsUnknown,
    rustArcDecrementStrongCount:
        core.instance.api.rust_arc_decrement_strong_count_OutputsUnknown,
    rustArcDecrementStrongCountPtr:
        core.instance.api.rust_arc_decrement_strong_count_OutputsUnknownPtr,
  );
}

@sealed
class PayjoinProposalImpl extends RustOpaque implements PayjoinProposal {
  // Not to be used by end users
  PayjoinProposalImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  PayjoinProposalImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        core.instance.api.rust_arc_increment_strong_count_PayjoinProposal,
    rustArcDecrementStrongCount:
        core.instance.api.rust_arc_decrement_strong_count_PayjoinProposal,
    rustArcDecrementStrongCountPtr:
        core.instance.api.rust_arc_decrement_strong_count_PayjoinProposalPtr,
  );
}

@sealed
class PjNotSupportedImpl extends RustOpaque implements PjNotSupported {
  // Not to be used by end users
  PjNotSupportedImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  PjNotSupportedImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        core.instance.api.rust_arc_increment_strong_count_PjNotSupported,
    rustArcDecrementStrongCount:
        core.instance.api.rust_arc_decrement_strong_count_PjNotSupported,
    rustArcDecrementStrongCountPtr:
        core.instance.api.rust_arc_decrement_strong_count_PjNotSupportedPtr,
  );
}

@sealed
class PjParseErrorImpl extends RustOpaque implements PjParseError {
  // Not to be used by end users
  PjParseErrorImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  PjParseErrorImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        core.instance.api.rust_arc_increment_strong_count_PjParseError,
    rustArcDecrementStrongCount:
        core.instance.api.rust_arc_decrement_strong_count_PjParseError,
    rustArcDecrementStrongCountPtr:
        core.instance.api.rust_arc_decrement_strong_count_PjParseErrorPtr,
  );
}

@sealed
class PjUriImpl extends RustOpaque implements PjUri {
  // Not to be used by end users
  PjUriImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  PjUriImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        core.instance.api.rust_arc_increment_strong_count_PjUri,
    rustArcDecrementStrongCount:
        core.instance.api.rust_arc_decrement_strong_count_PjUri,
    rustArcDecrementStrongCountPtr:
        core.instance.api.rust_arc_decrement_strong_count_PjUriPtr,
  );
}

@sealed
class ProvisionalProposalImpl extends RustOpaque
    implements ProvisionalProposal {
  // Not to be used by end users
  ProvisionalProposalImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ProvisionalProposalImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        core.instance.api.rust_arc_increment_strong_count_ProvisionalProposal,
    rustArcDecrementStrongCount:
        core.instance.api.rust_arc_decrement_strong_count_ProvisionalProposal,
    rustArcDecrementStrongCountPtr: core
        .instance.api.rust_arc_decrement_strong_count_ProvisionalProposalPtr,
  );
}

@sealed
class PsbtInputErrorImpl extends RustOpaque implements PsbtInputError {
  // Not to be used by end users
  PsbtInputErrorImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  PsbtInputErrorImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        core.instance.api.rust_arc_increment_strong_count_PsbtInputError,
    rustArcDecrementStrongCount:
        core.instance.api.rust_arc_decrement_strong_count_PsbtInputError,
    rustArcDecrementStrongCountPtr:
        core.instance.api.rust_arc_decrement_strong_count_PsbtInputErrorPtr,
  );
}

@sealed
class ReceiverTokenImpl extends RustOpaque implements ReceiverToken {
  // Not to be used by end users
  ReceiverTokenImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ReceiverTokenImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        core.instance.api.rust_arc_increment_strong_count_ReceiverToken,
    rustArcDecrementStrongCount:
        core.instance.api.rust_arc_decrement_strong_count_ReceiverToken,
    rustArcDecrementStrongCountPtr:
        core.instance.api.rust_arc_decrement_strong_count_ReceiverTokenPtr,
  );
}

@sealed
class ReplyableErrorImpl extends RustOpaque implements ReplyableError {
  // Not to be used by end users
  ReplyableErrorImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ReplyableErrorImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        core.instance.api.rust_arc_increment_strong_count_ReplyableError,
    rustArcDecrementStrongCount:
        core.instance.api.rust_arc_decrement_strong_count_ReplyableError,
    rustArcDecrementStrongCountPtr:
        core.instance.api.rust_arc_decrement_strong_count_ReplyableErrorPtr,
  );
}

@sealed
class ResponseErrorImpl extends RustOpaque implements ResponseError {
  // Not to be used by end users
  ResponseErrorImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ResponseErrorImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        core.instance.api.rust_arc_increment_strong_count_ResponseError,
    rustArcDecrementStrongCount:
        core.instance.api.rust_arc_decrement_strong_count_ResponseError,
    rustArcDecrementStrongCountPtr:
        core.instance.api.rust_arc_decrement_strong_count_ResponseErrorPtr,
  );
}

@sealed
class ScriptImpl extends RustOpaque implements Script {
  // Not to be used by end users
  ScriptImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ScriptImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        core.instance.api.rust_arc_increment_strong_count_Script,
    rustArcDecrementStrongCount:
        core.instance.api.rust_arc_decrement_strong_count_Script,
    rustArcDecrementStrongCountPtr:
        core.instance.api.rust_arc_decrement_strong_count_ScriptPtr,
  );
}

@sealed
class SelectionErrorImpl extends RustOpaque implements SelectionError {
  // Not to be used by end users
  SelectionErrorImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  SelectionErrorImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        core.instance.api.rust_arc_increment_strong_count_SelectionError,
    rustArcDecrementStrongCount:
        core.instance.api.rust_arc_decrement_strong_count_SelectionError,
    rustArcDecrementStrongCountPtr:
        core.instance.api.rust_arc_decrement_strong_count_SelectionErrorPtr,
  );
}

@sealed
class SenderBuilderImpl extends RustOpaque implements SenderBuilder {
  // Not to be used by end users
  SenderBuilderImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  SenderBuilderImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        core.instance.api.rust_arc_increment_strong_count_SenderBuilder,
    rustArcDecrementStrongCount:
        core.instance.api.rust_arc_decrement_strong_count_SenderBuilder,
    rustArcDecrementStrongCountPtr:
        core.instance.api.rust_arc_decrement_strong_count_SenderBuilderPtr,
  );
}

@sealed
class SenderTokenImpl extends RustOpaque implements SenderToken {
  // Not to be used by end users
  SenderTokenImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  SenderTokenImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        core.instance.api.rust_arc_increment_strong_count_SenderToken,
    rustArcDecrementStrongCount:
        core.instance.api.rust_arc_decrement_strong_count_SenderToken,
    rustArcDecrementStrongCountPtr:
        core.instance.api.rust_arc_decrement_strong_count_SenderTokenPtr,
  );
}

@sealed
class SerdeJsonErrorImpl extends RustOpaque implements SerdeJsonError {
  // Not to be used by end users
  SerdeJsonErrorImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  SerdeJsonErrorImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        core.instance.api.rust_arc_increment_strong_count_SerdeJsonError,
    rustArcDecrementStrongCount:
        core.instance.api.rust_arc_decrement_strong_count_SerdeJsonError,
    rustArcDecrementStrongCountPtr:
        core.instance.api.rust_arc_decrement_strong_count_SerdeJsonErrorPtr,
  );
}

@sealed
class SessionErrorImpl extends RustOpaque implements SessionError {
  // Not to be used by end users
  SessionErrorImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  SessionErrorImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        core.instance.api.rust_arc_increment_strong_count_SessionError,
    rustArcDecrementStrongCount:
        core.instance.api.rust_arc_decrement_strong_count_SessionError,
    rustArcDecrementStrongCountPtr:
        core.instance.api.rust_arc_decrement_strong_count_SessionErrorPtr,
  );
}

@sealed
class UncheckedProposalImpl extends RustOpaque implements UncheckedProposal {
  // Not to be used by end users
  UncheckedProposalImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  UncheckedProposalImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        core.instance.api.rust_arc_increment_strong_count_UncheckedProposal,
    rustArcDecrementStrongCount:
        core.instance.api.rust_arc_decrement_strong_count_UncheckedProposal,
    rustArcDecrementStrongCountPtr:
        core.instance.api.rust_arc_decrement_strong_count_UncheckedProposalPtr,
  );
}

@sealed
class UriImpl extends RustOpaque implements Uri {
  // Not to be used by end users
  UriImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  UriImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        core.instance.api.rust_arc_increment_strong_count_Uri,
    rustArcDecrementStrongCount:
        core.instance.api.rust_arc_decrement_strong_count_Uri,
    rustArcDecrementStrongCountPtr:
        core.instance.api.rust_arc_decrement_strong_count_UriPtr,
  );
}

@sealed
class UrlImpl extends RustOpaque implements Url {
  // Not to be used by end users
  UrlImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  UrlImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        core.instance.api.rust_arc_increment_strong_count_Url,
    rustArcDecrementStrongCount:
        core.instance.api.rust_arc_decrement_strong_count_Url,
    rustArcDecrementStrongCountPtr:
        core.instance.api.rust_arc_decrement_strong_count_UrlPtr,
  );
}

@sealed
class UrlParseErrorImpl extends RustOpaque implements UrlParseError {
  // Not to be used by end users
  UrlParseErrorImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  UrlParseErrorImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        core.instance.api.rust_arc_increment_strong_count_UrlParseError,
    rustArcDecrementStrongCount:
        core.instance.api.rust_arc_decrement_strong_count_UrlParseError,
    rustArcDecrementStrongCountPtr:
        core.instance.api.rust_arc_decrement_strong_count_UrlParseErrorPtr,
  );
}

@sealed
class V1ContextImpl extends RustOpaque implements V1Context {
  // Not to be used by end users
  V1ContextImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  V1ContextImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        core.instance.api.rust_arc_increment_strong_count_V1Context,
    rustArcDecrementStrongCount:
        core.instance.api.rust_arc_decrement_strong_count_V1Context,
    rustArcDecrementStrongCountPtr:
        core.instance.api.rust_arc_decrement_strong_count_V1ContextPtr,
  );
}

@sealed
class V2GetContextImpl extends RustOpaque implements V2GetContext {
  // Not to be used by end users
  V2GetContextImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  V2GetContextImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        core.instance.api.rust_arc_increment_strong_count_V2GetContext,
    rustArcDecrementStrongCount:
        core.instance.api.rust_arc_decrement_strong_count_V2GetContext,
    rustArcDecrementStrongCountPtr:
        core.instance.api.rust_arc_decrement_strong_count_V2GetContextPtr,
  );
}

@sealed
class V2PostContextImpl extends RustOpaque implements V2PostContext {
  // Not to be used by end users
  V2PostContextImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  V2PostContextImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        core.instance.api.rust_arc_increment_strong_count_V2PostContext,
    rustArcDecrementStrongCount:
        core.instance.api.rust_arc_decrement_strong_count_V2PostContext,
    rustArcDecrementStrongCountPtr:
        core.instance.api.rust_arc_decrement_strong_count_V2PostContextPtr,
  );
}

@sealed
class WantsInputsImpl extends RustOpaque implements WantsInputs {
  // Not to be used by end users
  WantsInputsImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  WantsInputsImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        core.instance.api.rust_arc_increment_strong_count_WantsInputs,
    rustArcDecrementStrongCount:
        core.instance.api.rust_arc_decrement_strong_count_WantsInputs,
    rustArcDecrementStrongCountPtr:
        core.instance.api.rust_arc_decrement_strong_count_WantsInputsPtr,
  );
}

@sealed
class WantsOutputsImpl extends RustOpaque implements WantsOutputs {
  // Not to be used by end users
  WantsOutputsImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  WantsOutputsImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        core.instance.api.rust_arc_increment_strong_count_WantsOutputs,
    rustArcDecrementStrongCount:
        core.instance.api.rust_arc_decrement_strong_count_WantsOutputs,
    rustArcDecrementStrongCountPtr:
        core.instance.api.rust_arc_decrement_strong_count_WantsOutputsPtr,
  );
}
