// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import '../lib.dart';
import 'ohttp/error.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'uri/error.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `clone`, `clone`, `fmt`, `from`, `from`, `from`, `from`, `from`, `from`, `from`

// Rust type: RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FfiPjUri>>
abstract class FfiPjUri implements RustOpaqueInterface {
  String address();

  /// Number of btc  requested as payment
  BigInt? amountSats();

  String asString();

  String pjEndpoint();

  /// Sets the amount in sats and returns a new FfiPjUri
  FfiPjUri setAmountSats({required BigInt amount});
}

class FfiOhttpKeys {
  final OhttpKeys field0;

  const FfiOhttpKeys({
    required this.field0,
  });

  static Future<FfiOhttpKeys> decode({required List<int> bytes}) =>
      core.instance.api.crateApiUriFfiOhttpKeysDecode(bytes: bytes);

  @override
  int get hashCode => field0.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is FfiOhttpKeys &&
          runtimeType == other.runtimeType &&
          field0 == other.field0;
}

class FfiUri {
  final Uri field0;

  const FfiUri({
    required this.field0,
  });

  String address() => core.instance.api.crateApiUriFfiUriAddress(
        that: this,
      );

  /// Gets the amount in sats.
  BigInt? amountSats() => core.instance.api.crateApiUriFfiUriAmountSats(
        that: this,
      );

  String asString() => core.instance.api.crateApiUriFfiUriAsString(
        that: this,
      );

  FfiPjUri checkPjSupported() =>
      core.instance.api.crateApiUriFfiUriCheckPjSupported(
        that: this,
      );

  static FfiUri parse({required String uri}) =>
      core.instance.api.crateApiUriFfiUriParse(uri: uri);

  @override
  int get hashCode => field0.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is FfiUri &&
          runtimeType == other.runtimeType &&
          field0 == other.field0;
}

class FfiUrl {
  final Url field0;

  const FfiUrl({
    required this.field0,
  });

  String asString() => core.instance.api.crateApiUriFfiUrlAsString(
        that: this,
      );

  static FfiUrl parse({required String url}) =>
      core.instance.api.crateApiUriFfiUrlParse(url: url);

  String? query() => core.instance.api.crateApiUriFfiUrlQuery(
        that: this,
      );

  @override
  int get hashCode => field0.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is FfiUrl &&
          runtimeType == other.runtimeType &&
          field0 == other.field0;
}
