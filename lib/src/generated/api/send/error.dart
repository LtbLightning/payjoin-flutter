// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import '../../lib.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These types are ignored because they are neither used by any `pub` functions nor (for structs and enums) marked `#[frb(unignore)]`: `FfiValidationError`, `FfiWellKnownError`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `from`, `from`, `from`, `from`, `from`

class FfiBuildSenderError implements FrbException {
  final String msg;

  const FfiBuildSenderError({
    required this.msg,
  });

  @override
  int get hashCode => msg.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is FfiBuildSenderError &&
          runtimeType == other.runtimeType &&
          msg == other.msg;
}

class FfiCreateRequestError implements FrbException {
  final String msg;

  const FfiCreateRequestError({
    required this.msg,
  });

  @override
  int get hashCode => msg.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is FfiCreateRequestError &&
          runtimeType == other.runtimeType &&
          msg == other.msg;
}

class FfiEncapsulationError implements FrbException {
  final String msg;

  const FfiEncapsulationError({
    required this.msg,
  });

  @override
  int get hashCode => msg.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is FfiEncapsulationError &&
          runtimeType == other.runtimeType &&
          msg == other.msg;
}

class FfiResponseError implements FrbException {
  final ResponseError field0;

  const FfiResponseError({
    required this.field0,
  });

  @override
  int get hashCode => field0.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is FfiResponseError &&
          runtimeType == other.runtimeType &&
          field0 == other.field0;
}
