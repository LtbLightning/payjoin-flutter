// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import '../../lib.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `from`, `from`, `from`, `from`

class FfiIntoUrlError implements FrbException {
  final IntoUrlError field0;

  const FfiIntoUrlError({
    required this.field0,
  });

  @override
  int get hashCode => field0.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is FfiIntoUrlError &&
          runtimeType == other.runtimeType &&
          field0 == other.field0;
}

class FfiPjNotSupported implements FrbException {
  final PjNotSupported field0;

  const FfiPjNotSupported({
    required this.field0,
  });

  @override
  int get hashCode => field0.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is FfiPjNotSupported &&
          runtimeType == other.runtimeType &&
          field0 == other.field0;
}

class FfiPjParseError implements FrbException {
  final PjParseError field0;

  const FfiPjParseError({
    required this.field0,
  });

  @override
  int get hashCode => field0.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is FfiPjParseError &&
          runtimeType == other.runtimeType &&
          field0 == other.field0;
}

class FfiUrlParseError implements FrbException {
  final UrlParseError field0;

  const FfiUrlParseError({
    required this.field0,
  });

  @override
  int get hashCode => field0.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is FfiUrlParseError &&
          runtimeType == other.runtimeType &&
          field0 == other.field0;
}
