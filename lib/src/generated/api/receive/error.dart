// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import '../../lib.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`

// Rust type: RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FfiJsonReply>>
abstract class FfiJsonReply implements RustOpaqueInterface {}

class FfiError implements FrbException {
  final Error field0;

  const FfiError({
    required this.field0,
  });

  @override
  int get hashCode => field0.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is FfiError &&
          runtimeType == other.runtimeType &&
          field0 == other.field0;
}

class FfiImplementationError implements FrbException {
  final ImplementationError field0;

  const FfiImplementationError({
    required this.field0,
  });

  @override
  int get hashCode => field0.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is FfiImplementationError &&
          runtimeType == other.runtimeType &&
          field0 == other.field0;
}

class FfiInputContributionError implements FrbException {
  final InputContributionError field0;

  const FfiInputContributionError({
    required this.field0,
  });

  @override
  int get hashCode => field0.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is FfiInputContributionError &&
          runtimeType == other.runtimeType &&
          field0 == other.field0;
}

class FfiOutputSubstitutionError implements FrbException {
  final OutputSubstitutionError field0;

  const FfiOutputSubstitutionError({
    required this.field0,
  });

  @override
  int get hashCode => field0.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is FfiOutputSubstitutionError &&
          runtimeType == other.runtimeType &&
          field0 == other.field0;
}

class FfiPsbtInputError implements FrbException {
  final PsbtInputError field0;

  const FfiPsbtInputError({
    required this.field0,
  });

  @override
  int get hashCode => field0.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is FfiPsbtInputError &&
          runtimeType == other.runtimeType &&
          field0 == other.field0;
}

class FfiReplyableError implements FrbException {
  final ReplyableError field0;

  const FfiReplyableError({
    required this.field0,
  });

  @override
  int get hashCode => field0.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is FfiReplyableError &&
          runtimeType == other.runtimeType &&
          field0 == other.field0;
}

class FfiSelectionError implements FrbException {
  final SelectionError field0;

  const FfiSelectionError({
    required this.field0,
  });

  @override
  int get hashCode => field0.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is FfiSelectionError &&
          runtimeType == other.runtimeType &&
          field0 == other.field0;
}

class FfiSessionError implements FrbException {
  final SessionError field0;

  const FfiSessionError({
    required this.field0,
  });

  @override
  int get hashCode => field0.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is FfiSessionError &&
          runtimeType == other.runtimeType &&
          field0 == other.field0;
}
