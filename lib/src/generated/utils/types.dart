// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../api/bitcoin_ffi.dart';
import '../api/uri.dart';
import '../frb_generated.dart';
import '../lib.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

class ClientResponse {
  final MutexOptionClientResponse field0;

  const ClientResponse({
    required this.field0,
  });

  @override
  int get hashCode => field0.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ClientResponse &&
          runtimeType == other.runtimeType &&
          field0 == other.field0;
}

enum Network {
  ///Classic Bitcoin
  bitcoin,

  ///Bitcoin’s testnet
  testnet,

  ///Bitcoin’s testnet4
  testnet4,

  ///Bitcoin’s signet
  signet,

  ///Bitcoin’s regtest
  regtest,
  ;
}

/// A reference to a transaction output.
class OutPoint {
  /// The referenced transaction's txid.
  final String txid;

  /// The index of the referenced output in its transaction's vout.
  final int vout;

  const OutPoint({
    required this.txid,
    required this.vout,
  });

  @override
  int get hashCode => txid.hashCode ^ vout.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is OutPoint &&
          runtimeType == other.runtimeType &&
          txid == other.txid &&
          vout == other.vout;
}

class PsbtInput {
  final TxOut? witnessUtxo;
  final FfiScript? redeemScript;
  final FfiScript? witnessScript;

  const PsbtInput({
    this.witnessUtxo,
    this.redeemScript,
    this.witnessScript,
  });

  @override
  int get hashCode =>
      witnessUtxo.hashCode ^ redeemScript.hashCode ^ witnessScript.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is PsbtInput &&
          runtimeType == other.runtimeType &&
          witnessUtxo == other.witnessUtxo &&
          redeemScript == other.redeemScript &&
          witnessScript == other.witnessScript;
}

class Request {
  final FfiUrl url;
  final String contentType;
  final Uint8List body;

  const Request({
    required this.url,
    required this.contentType,
    required this.body,
  });

  @override
  int get hashCode => url.hashCode ^ contentType.hashCode ^ body.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Request &&
          runtimeType == other.runtimeType &&
          url == other.url &&
          contentType == other.contentType &&
          body == other.body;
}

class TxIn {
  final OutPoint previousOutput;
  final FfiScript scriptSig;
  final int sequence;
  final List<Uint8List> witness;

  const TxIn({
    required this.previousOutput,
    required this.scriptSig,
    required this.sequence,
    required this.witness,
  });

  @override
  int get hashCode =>
      previousOutput.hashCode ^
      scriptSig.hashCode ^
      sequence.hashCode ^
      witness.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is TxIn &&
          runtimeType == other.runtimeType &&
          previousOutput == other.previousOutput &&
          scriptSig == other.scriptSig &&
          sequence == other.sequence &&
          witness == other.witness;
}

class TxOut {
  /// The value of the output, in satoshis.
  final BigInt value;

  /// The address of the output.
  final Uint8List scriptPubkey;

  const TxOut({
    required this.value,
    required this.scriptPubkey,
  });

  @override
  int get hashCode => value.hashCode ^ scriptPubkey.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is TxOut &&
          runtimeType == other.runtimeType &&
          value == other.value &&
          scriptPubkey == other.scriptPubkey;
}
